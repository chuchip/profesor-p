<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jdbc on Documentacion en espa√±ol</title>
    <link>http://www.profesor-p.com/categories/jdbc/</link>
    <description>Recent content in jdbc on Documentacion en espa√±ol</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <lastBuildDate>Mon, 29 Oct 2018 08:49:12 +0000</lastBuildDate>
    
	<atom:link href="http://www.profesor-p.com/categories/jdbc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring WebFlow con JSP ‚Äì Configuraci√≥n</title>
      <link>http://www.profesor-p.com/2018/10/29/spring-webflow-con-jsp-configuracion/</link>
      <pubDate>Mon, 29 Oct 2018 08:49:12 +0000</pubDate>
      
      <guid>http://www.profesor-p.com/2018/10/29/spring-webflow-con-jsp-configuracion/</guid>
      <description>Voy a intentar explicar como funciona Spring WebFlow y para ello, como siempre, lo har√© desarrollando un programa que pod√©is descargar de¬†https://github.com/chuchip/webflowExample
El programa simulara que entras a la p√°gina de un banco donde puedes realizar una transferencia de tus cuentas personales a otra. Para ello, primero deber√°s identificarte y seg√∫n el usuario con el que te identifiques tendr√°s acceso a unas cuentas que a su vez disponen de un saldo establecido.</description>
    </item>
    
    <item>
      <title>Backend (V)</title>
      <link>http://www.profesor-p.com/2018/09/06/aplicacion-en-spring-rest-y-angular-5a-parte/</link>
      <pubDate>Thu, 06 Sep 2018 06:08:12 +0000</pubDate>
      
      <guid>http://www.profesor-p.com/2018/09/06/aplicacion-en-spring-rest-y-angular-5a-parte/</guid>
      <description>En esta ultima parte de la parte servidor hablare de como se crean los objetos que en el anterior articulo se devolv√≠an.
Estos objetos eran del tipo _VentasAnoBean¬†_y un ArrayList de _VentasSemanaBean.¬†_Para conseguirlos se llamaban a sendas funciones en¬†la clase YagesBussines,¬†que eran las que constru√≠an esos objetos.
Empezare describiendo la clase
@Component public class YagesBussines { @Autowired CalendarioRepositorioService calendarioRepositorio; @Autowired HistVentasRepository histVentasRepository; @Autowired DataSource dataSource; @Autowired private JdbcOperations jdbc; @Bean public JdbcTemplate jdbcTemplate() { return new JdbcTemplate(dataSource); } .</description>
    </item>
    
    <item>
      <title>Lambdas en JDBC Data</title>
      <link>http://www.profesor-p.com/2018/08/22/acceso-a-base-de-datos-con-jdbc-spring/</link>
      <pubDate>Tue, 04 Sep 2018 11:04:46 +0000</pubDate>
      
      <guid>http://www.profesor-p.com/2018/08/22/acceso-a-base-de-datos-con-jdbc-spring/</guid>
      <description>En una entrada anterior, puse un ejemplo de como usar expresiones Lambas, como me parece que es un tema interesante, este de la programaci√≥n funcional, voy a insistir en este tema.
Una cosa¬†muy com√∫n en Java es¬†tener que pesarle como argumento a una funci√≥n externa, una objeto que implemente una funci√≥n donde nosotros pondremos el c√≥digo a ejecutar en nuestra¬†aplicaci√≥n.
Un ejemplo practico es en el uso de¬†la clase¬†JdbcOperations, que es utilizada por Spring para poder realizar operaciones JDBC, la cual tiene la funci√≥n:</description>
    </item>
    
    <item>
      <title>JPA &#43; Hibernate en Spring</title>
      <link>http://www.profesor-p.com/2018/08/25/jpa-hibernate-en-spring/</link>
      <pubDate>Sat, 25 Aug 2018 18:14:42 +0000</pubDate>
      
      <guid>http://www.profesor-p.com/2018/08/25/jpa-hibernate-en-spring/</guid>
      <description>En un entrada anterior, explique como crear nuestra conexi√≥n a la base de datos, usando JNDI. En esta entrada explicare como usar esa conexi√≥n con JPA.
Recordar que el c√≥digo fuente de de este ejemplo esta en: https://github.com/chuchip/jdbc_jpa_tomcat
Importante recalcar que este ejemplo solo funciona con Java 1.8 o superior.
Lo primero explicar un poco de que va esto de JPA.¬†JPA son las siglas de¬†Java Persistence API. Es decir la API de persistencia en Java.</description>
    </item>
    
    <item>
      <title>Acceso a Base de Datos con  Spring Data JDBC</title>
      <link>http://www.profesor-p.com/2018/08/22/acceso-a-base-de-datos-con-jdbc-spring/</link>
      <pubDate>Wed, 22 Aug 2018 15:39:57 +0000</pubDate>
      
      <guid>http://www.profesor-p.com/2018/08/22/acceso-a-base-de-datos-con-jdbc-spring/</guid>
      <description>En el anterior articulo explicaba como crear la conexion a la base de datos en un servidor de aplicaciones Tomcat . En este articulo explicare como acceder a esos datos a traves del paquete JDBC de Spring Data JDBC
El c√≥digo fuente de este ejemplo esta en: https://github.com/chuchip/jdbc_jpa_tomcat
Creando nuestro POJO y Repositorio Ahora que ya tenemos nuestro acceso a la base de datos configurado y disponible, vamos a utilizarlo (por eso de que no se aburra üòâ )</description>
    </item>
    
  </channel>
</rss>