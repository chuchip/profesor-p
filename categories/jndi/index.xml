<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jndi on Documentacion en español</title>
    <link>http://ww2.profesor-p.com/categories/jndi/</link>
    <description>Recent content in Jndi on Documentacion en español</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <lastBuildDate>Thu, 06 Sep 2018 06:08:12 +0000</lastBuildDate>
    
	<atom:link href="http://ww2.profesor-p.com/categories/jndi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Aplicación en Spring REST y Angular – 5ª Parte</title>
      <link>http://ww2.profesor-p.com/2018/09/06/aplicacion-en-spring-rest-y-angular-5a-parte/</link>
      <pubDate>Thu, 06 Sep 2018 06:08:12 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/09/06/aplicacion-en-spring-rest-y-angular-5a-parte/</guid>
      <description>En esta ultima parte de la parte servidor hablare de como se crean los objetos que en el anterior articulo se devolvían.
Estos objetos eran del tipo _VentasAnoBean _y un ArrayList de _VentasSemanaBean. _Para conseguirlos se llamaban a sendas funciones en la clase YagesBussines, que eran las que construían esos objetos.
Empezare describiendo la clase
@Component public class YagesBussines { @Autowired CalendarioRepositorioService calendarioRepositorio; @Autowired HistVentasRepository histVentasRepository; @Autowired DataSource dataSource; @Autowired private JdbcOperations jdbc; @Bean public JdbcTemplate jdbcTemplate() { return new JdbcTemplate(dataSource); } .</description>
    </item>
    
    <item>
      <title>Aplicación en Spring REST y Angular</title>
      <link>http://ww2.profesor-p.com/2018/08/31/aplicacion-en-spring-y-angular/</link>
      <pubDate>Fri, 31 Aug 2018 05:53:48 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/08/31/aplicacion-en-spring-y-angular/</guid>
      <description>En Anjelica, el ERP desarrollado por mi hace unos años, hay un programa que saca un comparativo de ventas, entre dos años, mostrando mes a mes, los kilos, importes y ganancias.
La idea es realizar esta misma consulta pero usando Spring con REST en el backend y como frontend usar Angular.
Para ello se realizaran los siguientes pasos:
  Crear tablas y cargar datos de prueba en la base de datos.</description>
    </item>
    
    <item>
      <title>Conectando a una base de datos usando JNDI y Spring en Tomcat</title>
      <link>http://ww2.profesor-p.com/2018/08/21/conectando-con-postgresql-usando-jndi-y-spring-en-tomcat-parte-1/</link>
      <pubDate>Tue, 21 Aug 2018 13:34:56 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/08/21/conectando-con-postgresql-usando-jndi-y-spring-en-tomcat-parte-1/</guid>
      <description>1. Introducción En este ejemplo veremos como conecta a Postgresql usando JPA + Hibernate y Spring JDBC. Para ello uso como servidor de aplicaciones Tomcat. La configuración esta realizada con anotaciones y XML y utilizo el pool de conexiones de Tomcat recogido a través de JNDI, para que la aplicación no deba saber realmente ni donde se conecta.
El código fuente lo teneis en: https://github.com/chuchip/jdbc_jpa_tomcat
En este enlace teneis este mismo documento (todas las partes) pero en PDF.</description>
    </item>
    
  </channel>
</rss>