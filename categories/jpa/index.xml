<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jpa on Documentacion en espa√±ol</title>
    <link>http://ww2.profesor-p.com/categories/jpa/</link>
    <description>Recent content in jpa on Documentacion en espa√±ol</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <lastBuildDate>Fri, 05 Apr 2019 10:54:22 +0000</lastBuildDate>
    
	<atom:link href="http://ww2.profesor-p.com/categories/jpa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Aplicaci√≥n CRUD usando REST en JavaEE  (2¬™ Parte)</title>
      <link>http://ww2.profesor-p.com/2018/10/07/aplicacion-rest-en-javaee-2a-parte/</link>
      <pubDate>Sun, 07 Oct 2018 05:49:37 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/10/07/aplicacion-rest-en-javaee-2a-parte/</guid>
      <description>Buenas otra vez.
En esta entrada continuo explicando la aplicaci√≥n CRUD, utilizando peticiones REST, con JavaEE.
Recordar que ten√©is el c√≥digo fuente en https://github.com/chuchip/crudJavaEE
En la anterior entrada, que pod√©is ver en¬†en http://www.profesor-p.com/2018/10/06/aplicacion-rest-en-javaee/ hab√≠amos visto como consultar los lenguajes disponibles. Ahora vamos a ver como a√±adir nuevos, modificarlos y borrarlos.
 Funcion¬†create  @POST @Consumes(MediaType.APPLICATION_JSON) public Response create(Locales locale) { if ( localeController.exists(locale.getCodigo())) { return Response.status(Response.Status.CONFLICT).build(); } localeController.create(locale); URI location = UriBuilder.</description>
    </item>
    
    <item>
      <title>Aplicacion CRUD con REST en Kotlin y SpringBoot</title>
      <link>http://ww2.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/</link>
      <pubDate>Thu, 11 Oct 2018 06:01:11 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/</guid>
      <description>Buenas chavales,
En esta nueva entrada os ense√±are como realizar un programa CRUD, que sirva peticiones REST, usando Spring Boot y como lenguaje de programaci√≥n usar Kotlin.
Creo que no har√° falta aclarar que una aplicaci√≥n CRUD es la t√≠pica aplicaci√≥n que permite consultar, insertar, modificar y borrar los datos de una tabla. Vamos, lo que se suele ir llamando un mantenimiento de una tabla.
Esta aplicaci√≥n seria una variaci√≥n del que explique en la entrada http://www.</description>
    </item>
    
    <item>
      <title>Perfiles en Spring Boot</title>
      <link>http://ww2.profesor-p.com/2019/02/28/perfiles-en-spring-boot/</link>
      <pubDate>Thu, 28 Feb 2019 11:52:51 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2019/02/28/perfiles-en-spring-boot/</guid>
      <description>Introducci√≥n Cuando se hacen aplicaciones empresariales, lo normal es que, como m√≠nimo, primero se desplieguen en un entorno de pruebas y despu√©s¬†en el entorno de producci√≥n. Cada entorno de pruebas tendr√° diferentes bases de datos, diferentes URLs y toda una serie de par√°metros espec√≠ficos, con el fin de que una aplicaci√≥n en desarrollo no acceda nunca a datos reales.
Estableciendo perfiles en la aplicaci√≥n Spring provee una manera sencilla de gestionar esta situaci√≥n haciendo uso de los perfiles.</description>
    </item>
    
    <item>
      <title>Optimizando relaciones entre entidades en Hibernate</title>
      <link>http://ww2.profesor-p.com/2019/04/05/optimizando-consultas-con-hibernate/</link>
      <pubDate>Fri, 05 Apr 2019 10:54:22 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2019/04/05/optimizando-consultas-con-hibernate/</guid>
      <description>En esta entrada, siguiendo el proyecto de ejemplo que teneis en¬†https://github.com/chuchip/jpajoins explicando como optimizar¬†las consultas a la base de datos usando JPA.
Se ver√°n diferentes tipos de consultas, explicando como realizar uniones entre tablas de modo perezoso (lazy) o agresivo (eager). Se unir√°n tablas por un solo campo, por varios e incluso por uno pero a√±adiendo una condici√≥n est√°tica.
EL proyecto de ejemplo esta desarrollado en Spring Boot con Hibernate, usando como base de datos H2.</description>
    </item>
    
    <item>
      <title>Accediendo facilmente a los datos con Spring Rest Data</title>
      <link>http://ww2.profesor-p.com/2019/03/25/accediendo-facilmente-a-los-datos-con-spring-rest-data/</link>
      <pubDate>Mon, 25 Mar 2019 16:02:14 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2019/03/25/accediendo-facilmente-a-los-datos-con-spring-rest-data/</guid>
      <description>Spring Boot ofrece un fant√°stico soporte para acceder a los datos con JPA a trav√©s de sus interfaces, del tipo Repository. Si a esto le a√±adimos la facilidad con que se crean servicios REST, como explicaba en la entrada [http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/][2] podremos hacer una aplicaci√≥n ofreciendo una API para acceder a nuestra base de datos preferida muy facilmente.
Pero si queremos implementar HATEOAS en nuestro proyecto o si hay muchos criterios sobre los que debemos acceder a los datos, deberemos escribir bastante c√≥digo.</description>
    </item>
    
    <item>
      <title>Querys avanzadas con JPA en Spring Boot</title>
      <link>http://ww2.profesor-p.com/2019/02/14/querys-avanzadas-con-jpa-en-spring-boot/</link>
      <pubDate>Thu, 14 Feb 2019 15:37:15 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2019/02/14/querys-avanzadas-con-jpa-en-spring-boot/</guid>
      <description>Hay veces en que las campos sobre los que restringir una consulta pueden variar en tiempo de ejecuci√≥n. En ese caso si queremos usar JPA no podemos usar una sentencia @Query definida en nuestro repositorio pues no sabemos los campos sobre los que se aplicaran condiciones en la consulta. Adem√°s es bastante com√∫n que el usuario pueda elegir el criterio de b√∫squeda sobre un campo, deseando que el valor de un campo deba ser igual, mayor o menor, respecto al valor introducido .</description>
    </item>
    
    <item>
      <title>Aplicacion CRUD con REST en Kotlin y SpringBoot (2¬™ Parte)</title>
      <link>http://ww2.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-y-springboot-2a-parte/</link>
      <pubDate>Thu, 11 Oct 2018 09:50:19 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-y-springboot-2a-parte/</guid>
      <description>Hola de nuevo, chicos.
Continuo con la entrada¬†http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/¬†para ver como realizar las peticiones REST , con protocolo JSON que es el est√°ndar de facto üòâ en Kotlin.
Una vez que ya tenemos la l√≥gica de acceso a nuestra base de datos, tenemos que hacer la parte Web. Pues, aunque os parezca incre√≠ble, esto se hace con una sola clase y ademas de muy pocas lineas.
La clase en cuesti√≥n es¬†ApiController.</description>
    </item>
    
    <item>
      <title>Aplicaci√≥n en Spring REST y Angular ‚Äì 5¬™ Parte</title>
      <link>http://ww2.profesor-p.com/2018/09/06/aplicacion-en-spring-rest-y-angular-5a-parte/</link>
      <pubDate>Thu, 06 Sep 2018 06:08:12 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/09/06/aplicacion-en-spring-rest-y-angular-5a-parte/</guid>
      <description>En esta ultima parte de la parte servidor hablare de como se crean los objetos que en el anterior articulo se devolv√≠an.
Estos objetos eran del tipo _VentasAnoBean¬†_y un ArrayList de _VentasSemanaBean.¬†_Para conseguirlos se llamaban a sendas funciones en¬†la clase YagesBussines,¬†que eran las que constru√≠an esos objetos.
Empezare describiendo la clase
@Component public class YagesBussines { @Autowired CalendarioRepositorioService calendarioRepositorio; @Autowired HistVentasRepository histVentasRepository; @Autowired DataSource dataSource; @Autowired private JdbcOperations jdbc; @Bean public JdbcTemplate jdbcTemplate() { return new JdbcTemplate(dataSource); } .</description>
    </item>
    
    <item>
      <title>Aplicaci√≥n en Spring REST y Angular ‚Äì 2 Parte</title>
      <link>http://ww2.profesor-p.com/2018/09/03/aplicacion-en-spring-rest-y-angular-2-parte/</link>
      <pubDate>Mon, 03 Sep 2018 16:22:55 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/09/03/aplicacion-en-spring-rest-y-angular-2-parte/</guid>
      <description>En esta segunda parte voy a empezar a explicar como hacer la parte del servidor, usando, como dije en la primera parte de este articulo utilizare¬†JAVA 8, apoy√°ndome en el framework Spring, versi√≥n 5.
Esta aplicaci√≥n la he realizado con NetBeans 9, usando Tomcat 9 como servidor de aplicaciones. La pod√≠a haber realizado usando Spring Boot, lo que habr√≠a realizado m√°s f√°cilmente y con menos configuraci√≥n pero he querido hacerlo con Tomcat como ejercicio.</description>
    </item>
    
    <item>
      <title>Aplicaci√≥n en Spring REST y Angular</title>
      <link>http://ww2.profesor-p.com/2018/08/31/aplicacion-en-spring-y-angular/</link>
      <pubDate>Fri, 31 Aug 2018 05:53:48 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/08/31/aplicacion-en-spring-y-angular/</guid>
      <description>En Anjelica, el ERP desarrollado por mi hace unos a√±os, hay un programa que saca un comparativo de ventas, entre dos a√±os, mostrando mes a mes, los kilos, importes y ganancias.
La idea es realizar esta misma consulta pero usando Spring con REST en el backend y como frontend usar Angular.
Para ello se realizaran los siguientes pasos:
 ¬†Crear tablas y cargar datos de prueba en la base de datos.</description>
    </item>
    
    <item>
      <title>JPA &#43; Hibernate en Spring</title>
      <link>http://ww2.profesor-p.com/2018/08/25/jpa-hibernate-en-spring/</link>
      <pubDate>Sat, 25 Aug 2018 18:14:42 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/08/25/jpa-hibernate-en-spring/</guid>
      <description>En un entrada anterior, explique como crear nuestra conexi√≥n a la base de datos, usando JNDI. En esta entrada explicare como usar esa conexi√≥n con JPA.
Recordar que el c√≥digo fuente de de este ejemplo esta en: https://github.com/chuchip/jdbc_jpa_tomcat
Importante recalcar que este ejemplo solo funciona con Java 1.8 o superior.
Lo primero explicar un poco de que va esto de JPA.¬†JPA son las siglas de¬†Java Persistence API. Es decir la API de persistencia en Java.</description>
    </item>
    
  </channel>
</rss>