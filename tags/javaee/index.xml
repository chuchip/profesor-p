<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javaee on Documentacion en español</title>
    <link>ww2.profesor-p.com/tags/javaee/</link>
    <description>Recent content in Javaee on Documentacion en español</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <lastBuildDate>Sat, 06 Oct 2018 21:54:13 +0000</lastBuildDate>
    
	<atom:link href="ww2.profesor-p.com/tags/javaee/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Aplicación CRUD usando REST en JavaEE</title>
      <link>ww2.profesor-p.com/2018/10/06/aplicacion-rest-en-javaee/</link>
      <pubDate>Sat, 06 Oct 2018 21:54:13 +0000</pubDate>
      
      <guid>ww2.profesor-p.com/2018/10/06/aplicacion-rest-en-javaee/</guid>
      <description>Buenas, chicos, en esta ocasión voy a explicar como hacer una aplicación CRUD, que sirva peticiones REST con el protocolo JSON, usando JavaEE y Glasfish como servidor de aplicaciones. En esta aplicación actualizaremos y consultaremos una pequeña tabla a través de diferentes peticiones REST.
Si bien es cierto que JavaEE no soporta oficialmente JSON en sus especificaciones, la realidad es que es muy fácil el realizar una aplicación totalmente funcional y muy fácilmente con la libreria JACKSON.</description>
    </item>
    
    <item>
      <title>Aplicación CRUD usando REST en JavaEE  (2ª Parte)</title>
      <link>ww2.profesor-p.com/2018/10/07/aplicacion-rest-en-javaee-2a-parte/</link>
      <pubDate>Sun, 07 Oct 2018 05:49:37 +0000</pubDate>
      
      <guid>ww2.profesor-p.com/2018/10/07/aplicacion-rest-en-javaee-2a-parte/</guid>
      <description>Buenas otra vez.
En esta entrada continuo explicando la aplicación CRUD, utilizando peticiones REST, con JavaEE.
Recordar que tenéis el código fuente en https://github.com/chuchip/crudJavaEE
En la anterior entrada, que podéis ver en en http://www.profesor-p.com/2018/10/06/aplicacion-rest-en-javaee/ habíamos visto como consultar los lenguajes disponibles. Ahora vamos a ver como añadir nuevos, modificarlos y borrarlos.
 Funcion create  @POST @Consumes(MediaType.APPLICATION_JSON) public Response create(Locales locale) { if ( localeController.exists(locale.getCodigo())) { return Response.status(Response.Status.CONFLICT).build(); } localeController.create(locale); URI location = UriBuilder.</description>
    </item>
    
  </channel>
</rss>