<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Documentacion en español</title>
    <link>http://ww2.profesor-p.com/2-spring/</link>
    <description>Recent content in Spring on Documentacion en español</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-ES</language>
    <lastBuildDate>Thu, 28 Feb 2019 11:52:51 +0000</lastBuildDate>
    
	<atom:link href="http://ww2.profesor-p.com/2-spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Perfiles en Spring Boot</title>
      <link>http://ww2.profesor-p.com/2019/02/28/perfiles-en-spring-boot/</link>
      <pubDate>Thu, 28 Feb 2019 11:52:51 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2019/02/28/perfiles-en-spring-boot/</guid>
      <description>Introducción Cuando se hacen aplicaciones empresariales, lo normal es que, como mínimo, primero se desplieguen en un entorno de pruebas y después en el entorno de producción. Cada entorno de pruebas tendrá diferentes bases de datos, diferentes URLs y toda una serie de parámetros específicos, con el fin de que una aplicación en desarrollo no acceda nunca a datos reales.
Estableciendo perfiles en la aplicación Spring provee una manera sencilla de gestionar esta situación haciendo uso de los perfiles.</description>
    </item>
    
    <item>
      <title>Lambdas en JDBC Data</title>
      <link>http://ww2.profesor-p.com/2018/08/22/acceso-a-base-de-datos-con-jdbc-spring/</link>
      <pubDate>Tue, 04 Sep 2018 11:04:46 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/08/22/acceso-a-base-de-datos-con-jdbc-spring/</guid>
      <description>Expresiones Lamba en Spring JDBC Data. Mejorando la explicación. En una entrada anterior, puse un ejemplo de como usar expresiones Lambas, como me parece que es un tema interesante, este de la programación funcional, voy a insistir en este tema.
Una cosa muy común en Java es tener que pesarle como argumento a una función externa, una objeto que implemente una función donde nosotros pondremos el código a ejecutar en nuestra aplicación.</description>
    </item>
    
    <item>
      <title>Estableciendo filtros en Spring</title>
      <link>http://ww2.profesor-p.com/2019/06/13/estableciendo-filtros-en-spring/</link>
      <pubDate>Thu, 13 Jun 2019 16:11:53 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2019/06/13/estableciendo-filtros-en-spring/</guid>
      <description>En esta entrada voy a hablar de como implementar filtros en Spring. Los filtros son de los que se pueden establecer cuando se recibe una petición HTTP. Es decir, suponiendo que tenemos un programa escuchando en unas URI, poder especificar que deseamos ejecutar algo antes de que las peticiones sea procesadas por el controlador.
Esto es muy útil si queremos que todas las peticiones cumplan un requisito, por ejemplo incluir una cabecera especifica.</description>
    </item>
    
    <item>
      <title>Cacheando resultados con Spring Boot</title>
      <link>http://ww2.profesor-p.com/2019/05/12/cacheando-datos-en-spring-boot/</link>
      <pubDate>Sun, 12 May 2019 07:57:07 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2019/05/12/cacheando-datos-en-spring-boot/</guid>
      <description>Usando cache en Spring Boot Vamos a imaginar una aplicación web, donde por cada petición recibida, debe leer ciertos datos de configuración desde una base de datos. Esos datos no cambiaran normalmente pero nuestra aplicación, en cada petición, debe conectarse, ejecutar las sentencias adecuadas para leer los datos, traerlos por la red, etc. Imaginemos, además, que la base de datos a la que nos conectamos esta saturada o la conexión de red que nos une a la base de datos es inestable.</description>
    </item>
    
    <item>
      <title>Beans avanzados</title>
      <link>http://ww2.profesor-p.com/2019/04/18/beans-avanzados-en-spring/</link>
      <pubDate>Thu, 18 Apr 2019 21:26:57 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2019/04/18/beans-avanzados-en-spring/</guid>
      <description>En esta ocasión he cogido un proyecto de SimpleProgramming el cual tiene un video en Youtube donde explica como cargar Beans dinámicamente usando Spring (en Ingles).
Imaginemos que tenemos un programa que dependiendo de unos parámetros deba cargar un clase u otra, donde está definida la lógica a seguir. Por supuesto podemos anidar condiciones e instanciar las clases debidas, pero eso tiene un problema y es que si mañana debemos añadir una lógica nueva, deberemos incluir una condición más para cargar la nueva clase, y podríamos introducir errores en el código.</description>
    </item>
    
    <item>
      <title>Usando Zuul para redirigir peticiones REST</title>
      <link>http://ww2.profesor-p.com/2019/03/16/zuul-para-redirigir-peticiones-rest-en-spring-boot/</link>
      <pubDate>Sat, 16 Mar 2019 07:19:41 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2019/03/16/zuul-para-redirigir-peticiones-rest-en-spring-boot/</guid>
      <description>En este articulo explicare como crear una pasarela para peticiones REST (una gateway) utilizando Zuul.
Zuul es parte del paquete Spring Cloud NetFlix y permite redirigir peticiones REST, realizando diversos tipos de filtros.
En casi cualquier proyecto donde haya microservicios, es deseable que todas las comunicaciones entre esos microservicios pasen por un lugar común, de tal manera que se registren las entradas y salidas, se pueda implementar seguridad o se puedan redirigir las peticiones dependiendo de diversos parámetros.</description>
    </item>
    
    <item>
      <title>Mensajería con Kafka y Spring Boot</title>
      <link>http://ww2.profesor-p.com/2019/01/24/mensajeria-con-kafka-y-spring-boot/</link>
      <pubDate>Thu, 24 Jan 2019 15:31:06 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2019/01/24/mensajeria-con-kafka-y-spring-boot/</guid>
      <description>Kafka es un programa de mensajería pensado para comunicaciones asíncronas. Básicamente la idea es que los clientes o consumidores se subscriben a un tipo de noticia o topic y cuando un emisor o broker manda un mensaje sobre ese topic Kafka lo distribuye a los consumidores suscritos.
Para probar este programa deberemos tener un servidor funcionando con los topics ya definidos . En la página https://kafka.apache.org/quickstart hay un manual rápido y muy claro de como levantar uno en apenas 10 minutos.</description>
    </item>
    
    <item>
      <title>Personalizar salidas de códigos HTTP en Spring Boot</title>
      <link>http://ww2.profesor-p.com/2018/11/20/personalizar-codigo-http-en-spring-boot/</link>
      <pubDate>Tue, 20 Nov 2018 17:46:55 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/11/20/personalizar-codigo-http-en-spring-boot/</guid>
      <description>Buenas, Alumnos/as.
En esta articulo os voy a explicar como devolver errores HTTP personalizados. Para ello crearemos un proyecto llamado httpErrorPersonalizado. Teneis el código fuente de este proyecto en mi página de GitHub
Cuando realizamos una petición HTTP a un recurso en Spring Boot, es común que esa petición tenga que considerar la opción de devolver un error.
Es el caso típico de que realizamos una petición RESTful para solicitar un registro, pero ese registro no existe.</description>
    </item>
    
    <item>
      <title>Instalar plugin Spring Boot en NetBeans</title>
      <link>http://ww2.profesor-p.com/2018/08/27/instalar-plugin-spring-boot-con-netbeans-9-en-ubuntu-18-04/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://ww2.profesor-p.com/2018/08/27/instalar-plugin-spring-boot-con-netbeans-9-en-ubuntu-18-04/</guid>
      <description>En esta entrada explicare como crear un aplicación con el framework Spring Boot, usando el IDE NetBeans 9.
Ademas haremos todo esto en un Linux Ubuntu 18.04
Si no sabéis lo que es Spring Boot, ya estáis tardando en aprender al menos los conceptos básicos.
 Spring Boot es Spring hecho (más) fácil.  Con Spring Boot, entre otras cosas, se puede realizar una aplicación Web, con una mínima configuración. Una aplicación demo se crea en apenas 5 minutos.</description>
    </item>
    
  </channel>
</rss>