<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jpa on Documentacion en español</title>
    <link>http://www.profesor-p.com/es/tags/jpa/index.html</link>
    <description>Recent content in jpa on Documentacion en español</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Sat, 23 Jan 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.profesor-p.com/es/tags/jpa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aplicación CRUD usando REST en JavaEE  (II)</title>
      <link>http://www.profesor-p.com/2018/10/07/aplicacion-rest-en-javaee-2a-parte/index.html</link>
      <pubDate>Sun, 07 Oct 2018 05:49:37 +0000</pubDate>
      <guid>http://www.profesor-p.com/2018/10/07/aplicacion-rest-en-javaee-2a-parte/index.html</guid>
      <description>&lt;p&gt;En esta ocasión continuo explicando la aplicación CRUD, utilizando peticiones REST, con JavaEE.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Aplicacion CRUD con REST en Kotlin y SpringBoot</title>
      <link>http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/index.html</link>
      <pubDate>Thu, 11 Oct 2018 06:01:11 +0000</pubDate>
      <guid>http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/index.html</guid>
      <description>Buenas chavales,
En esta nueva entrada os enseñare como realizar un programa CRUD, que sirva peticiones REST, usando Spring Boot y como lenguaje de programación usar Kotlin.
Creo que no hará falta aclarar que una aplicación CRUD es la típica aplicación que permite consultar, insertar, modificar y borrar los datos de una tabla. Vamos, lo que se suele ir llamando un mantenimiento de una tabla.
Esta aplicación seria una variación del que explique en la entrada http://www.</description>
    </item>
    <item>
      <title>Usar QBE en Spring Data</title>
      <link>http://www.profesor-p.com/spring/data/qbe/index.html</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      <guid>http://www.profesor-p.com/spring/data/qbe/index.html</guid>
      <description>A menudo, cuando arranca nuestra aplicación, tenemos que tener ciertos registros en algunas tablas de diccionarios. Por ejemplo, en la tabla &amp;lsquo;paises&amp;rsquo; puede que debamos tener cargados los países del mundo. O en la tabla &amp;lsquo;roles&amp;rsquo;, debemos tener definidos una serie de roles.
Una de las maneras de cargar esos datos es definiendo una rutina en el programa, la cual se ejecutara al inicio y que insertara esos registros necesarios. El problema que nos podemos encontrar es que entonces, debemos borrar todos los registros y luego volverlos a insertar para no tener registros duplicados.</description>
    </item>
    <item>
      <title>Optimizando relaciones entre entidades en Hibernate</title>
      <link>http://www.profesor-p.com/2019/04/05/optimizando-consultas-con-hibernate/index.html</link>
      <pubDate>Fri, 05 Apr 2019 10:54:22 +0000</pubDate>
      <guid>http://www.profesor-p.com/2019/04/05/optimizando-consultas-con-hibernate/index.html</guid>
      <description>En esta entrada, siguiendo el proyecto de ejemplo que teneis en https://github.com/chuchip/jpajoins explicando como optimizar las consultas a la base de datos usando JPA.
Se verán diferentes tipos de consultas, explicando como realizar uniones entre tablas de modo perezoso (lazy) o agresivo (eager). Se unirán tablas por un solo campo, por varios e incluso por uno pero añadiendo una condición estática.
EL proyecto de ejemplo esta desarrollado en Spring Boot con Hibernate, usando como base de datos H2.</description>
    </item>
    <item>
      <title>Accediendo facilmente a los datos con Spring Rest Data</title>
      <link>http://www.profesor-p.com/2019/03/25/accediendo-facilmente-a-los-datos-con-spring-rest-data/index.html</link>
      <pubDate>Mon, 25 Mar 2019 16:02:14 +0000</pubDate>
      <guid>http://www.profesor-p.com/2019/03/25/accediendo-facilmente-a-los-datos-con-spring-rest-data/index.html</guid>
      <description>Spring Boot ofrece un fantástico soporte para acceder a los datos con JPA a través de sus interfaces, del tipo Repository. Si a esto le añadimos la facilidad con que se crean servicios REST, como explicaba en la entrada [http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/][2] podremos hacer una aplicación ofreciendo una API para acceder a nuestra base de datos preferida muy facilmente.
Pero si queremos implementar HATEOAS en nuestro proyecto o si hay muchos criterios sobre los que debemos acceder a los datos, deberemos escribir bastante código.</description>
    </item>
    <item>
      <title>Querys avanzadas con JPA en Spring Boot</title>
      <link>http://www.profesor-p.com/2019/02/14/querys-avanzadas-con-jpa-en-spring-boot/index.html</link>
      <pubDate>Thu, 14 Feb 2019 15:37:15 +0000</pubDate>
      <guid>http://www.profesor-p.com/2019/02/14/querys-avanzadas-con-jpa-en-spring-boot/index.html</guid>
      <description>Hay veces en que las campos sobre los que restringir una consulta pueden variar en tiempo de ejecución. En ese caso si queremos usar JPA no podemos usar una sentencia @Query definida en nuestro repositorio pues no sabemos los campos sobre los que se aplicaran condiciones en la consulta. Además es bastante común que el usuario pueda elegir el criterio de búsqueda sobre un campo, deseando que el valor de un campo deba ser igual, mayor o menor, respecto al valor introducido .</description>
    </item>
    <item>
      <title>Aplicacion CRUD con REST en Kotlin y SpringBoot (2ª Parte)</title>
      <link>http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-y-springboot-2a-parte/index.html</link>
      <pubDate>Thu, 11 Oct 2018 09:50:19 +0000</pubDate>
      <guid>http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-y-springboot-2a-parte/index.html</guid>
      <description>Hola de nuevo, chicos.
Continuo con la entrada http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/ para ver como realizar las peticiones REST , con protocolo JSON que es el estándar de facto 😉 en Kotlin.
Una vez que ya tenemos la lógica de acceso a nuestra base de datos, tenemos que hacer la parte Web. Pues, aunque os parezca increíble, esto se hace con una sola clase y ademas de muy pocas lineas.
La clase en cuestión es ApiController.</description>
    </item>
    <item>
      <title>Conectando a una base de datos usando JNDI y Spring en Tomcat</title>
      <link>http://www.profesor-p.com/2018/08/21/conectando-con-postgresql-usando-jndi-y-spring-en-tomcat-parte-1/index.html</link>
      <pubDate>Tue, 21 Aug 2018 13:34:56 +0000</pubDate>
      <guid>http://www.profesor-p.com/2018/08/21/conectando-con-postgresql-usando-jndi-y-spring-en-tomcat-parte-1/index.html</guid>
      <description>&lt;p&gt;En este ejemplo veremos como conecta a Postgresql usando JPA + Hibernate y Spring JDBC. Para ello uso como servidor de aplicaciones Tomcat. La configuración esta realizada con anotaciones y XML y utilizo el pool de conexiones de Tomcat recogido a través de JNDI, para que la aplicación no deba saber realmente ni donde se conecta.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>