<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aot on Documentacion en español</title>
    <link>http://www.profesor-p.com/es/categories/aot/index.html</link>
    <description>Recent content in aot on Documentacion en español</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Sat, 09 Dec 2023 07:57:07 +0000</lastBuildDate>
    <atom:link href="http://www.profesor-p.com/es/categories/aot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AOT en Spring</title>
      <link>http://www.profesor-p.com/springboot/aot/index.html</link>
      <pubDate>Sat, 09 Dec 2023 07:57:07 +0000</pubDate>
      <guid>http://www.profesor-p.com/springboot/aot/index.html</guid>
      <description>Creo que Aspect Oriented Programing (AOP) no es muy conocido. Spring lo usa mucho y, a menudo, cuando pones etiquetas en tu código, Spring usará AOT.
No quiero explicar que es AOP porque hay mucha documentación al respecto. En este artículo, quiero darte algunos ejemplos y casos en los que el uso de AOP podría mejorar tu código. Quiero mostrarte una nueva herramienta para programar. Veamos si puedo hacerlo.
En primer lugar, te estarás preguntando, ¿por qué debería usar AOP?</description>
    </item>
  </channel>
</rss>