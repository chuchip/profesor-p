<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rest on Documentacion en español</title><link>http://www.profesor-p.com/es/tags/rest/index.html</link><description>Recent content in rest on Documentacion en español</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Sun, 01 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://www.profesor-p.com/es/tags/rest/index.xml" rel="self" type="application/rss+xml"/><item><title>Aplicación CRUD usando REST en JavaEE</title><link>http://www.profesor-p.com/2018/10/06/aplicacion-rest-en-javaee/index.html</link><pubDate>Sat, 06 Oct 2018 21:54:13 +0000</pubDate><guid>http://www.profesor-p.com/2018/10/06/aplicacion-rest-en-javaee/index.html</guid><description>&lt;p>Explicaré como hacer una aplicación CRUD, que sirva peticiones REST con el protocolo JSON, usando JavaEE y Glasfish como servidor de aplicaciones.
En esta aplicación actualizaremos y consultaremos una pequeña tabla a través de diferentes peticiones REST.&lt;/p></description></item><item><title>Aplicación CRUD usando REST en JavaEE (II)</title><link>http://www.profesor-p.com/2018/10/07/aplicacion-rest-en-javaee-2a-parte/index.html</link><pubDate>Sun, 07 Oct 2018 05:49:37 +0000</pubDate><guid>http://www.profesor-p.com/2018/10/07/aplicacion-rest-en-javaee-2a-parte/index.html</guid><description>&lt;p>En esta ocasión continuo explicando la aplicación CRUD, utilizando peticiones REST, con JavaEE.&lt;/p></description></item><item><title>Aplicación CRUD en Angular</title><link>http://www.profesor-p.com/2018/10/08/aplicacion-crud-en-angular/index.html</link><pubDate>Mon, 08 Oct 2018 20:23:38 +0000</pubDate><guid>http://www.profesor-p.com/2018/10/08/aplicacion-crud-en-angular/index.html</guid><description>En esta ocasión os traigo un programa realizado en Angular, el cual a través de peticiones REST, da de alta, modifica, borra y consulta los diferentes países disponibles en una base de datos. Lo que se viene diciendo una aplicacion CRUD.
Por supuesto el protocolo para las comunicaciones es JSON.
El código fuente lo tenéis en: https://github.com/chuchip/crud-rest-angular
Este programa es el frontend del realizado en JavaEE, y que explico como funciona en las entradas: http://www.</description></item><item><title>La clase RestTemplate</title><link>http://www.profesor-p.com/2019/08/03/trabajando-con-la-clase-resttemplate/index.html</link><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid>http://www.profesor-p.com/2019/08/03/trabajando-con-la-clase-resttemplate/index.html</guid><description>&lt;p>Este será el primero de una serie de entradas sobre la clase &lt;strong>RestTemplate&lt;/strong> de &lt;strong>Spring.&lt;/strong>&lt;/p>
&lt;p>Con los diferentes métodos de la clase se realizan peticiones HTTP fácilmente, produciéndose la serialización y deserialización de los objetos de una manera transparente. Es una gran alternativa dada por &lt;strong>Spring&lt;/strong> sobre otras librerías ya existentes en el mercado.&lt;/p></description></item><item><title>Aplicacion CRUD con REST en Kotlin y SpringBoot</title><link>http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/index.html</link><pubDate>Thu, 11 Oct 2018 06:01:11 +0000</pubDate><guid>http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/index.html</guid><description>Buenas chavales,
En esta nueva entrada os enseñare como realizar un programa CRUD, que sirva peticiones REST, usando Spring Boot y como lenguaje de programación usar Kotlin.
Creo que no hará falta aclarar que una aplicación CRUD es la típica aplicación que permite consultar, insertar, modificar y borrar los datos de una tabla. Vamos, lo que se suele ir llamando un mantenimiento de una tabla.
Esta aplicación seria una variación del que explique en la entrada http://www.</description></item><item><title>Frontend en Angular</title><link>http://www.profesor-p.com/2018/09/13/aplicacion-en-angular-instalacion-y-configuracion-basica/index.html</link><pubDate>Thu, 13 Sep 2018 07:51:25 +0000</pubDate><guid>http://www.profesor-p.com/2018/09/13/aplicacion-en-angular-instalacion-y-configuracion-basica/index.html</guid><description>En anteriores entradas se creo la parte del servidor de nuestra aplicación . Para la parte cliente o frontend usaremos Angular 6.
El código fuente del programa lo tenéis, como siempre, en mi página de GitHub.
Lo primero sera instalar Angular, para ello tenemos un excelente manual de como hacerlo en la página web de Angular. Básicamente es instalar el servidor de aplicaciones Node.js. y su aplicación incluida npm (es un solo ejecutable) de https://nodejs.</description></item><item><title>La Clase RestTemplate - 2</title><link>http://www.profesor-p.com/clase-resttemplate-2/index.html</link><pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate><guid>http://www.profesor-p.com/clase-resttemplate-2/index.html</guid><description>&lt;p>En &lt;a href="http://www.profesor-p.com/2019/08/03/trabajando-con-la-clase-resttemplate/">la anterior entrada&lt;/a> vimos como lanzar una petición HTTP contra un servidor externo, pero al lanzarla surgieron algunas dudas. Dos ya fueron resueltas así que continuemos resolviendo las siguientes.&lt;/p></description></item><item><title>Backend (II)</title><link>http://www.profesor-p.com/2018/09/03/aplicacion-en-spring-rest-y-angular-2-parte/index.html</link><pubDate>Mon, 03 Sep 2018 16:22:55 +0000</pubDate><guid>http://www.profesor-p.com/2018/09/03/aplicacion-en-spring-rest-y-angular-2-parte/index.html</guid><description>En esta segunda parte voy a empezar a explicar como hacer la parte del servidor, usando, como dije en la primera parte de este articulo utilizare JAVA 8, apoyándome en el framework Spring, versión 5.
Esta aplicación la he realizado con NetBeans 9, usando Tomcat 9 como servidor de aplicaciones. La podía haber realizado usando Spring Boot, lo que habría realizado más fácilmente y con menos configuración pero he querido hacerlo con Tomcat como ejercicio.</description></item><item><title>La Clase RestTemplate - 3</title><link>http://www.profesor-p.com/clase-resttemplate-3/index.html</link><pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate><guid>http://www.profesor-p.com/clase-resttemplate-3/index.html</guid><description>&lt;p>Esta es la tercera y última entrada sobre la clase &lt;strong>RestTemplate&lt;/strong>.&lt;/p></description></item><item><title>Backend (III)</title><link>http://www.profesor-p.com/2018/09/04/aplicacion-en-spring-rest-y-angular-3a-parte/index.html</link><pubDate>Tue, 04 Sep 2018 05:44:12 +0000</pubDate><guid>http://www.profesor-p.com/2018/09/04/aplicacion-en-spring-rest-y-angular-3a-parte/index.html</guid><description>En esta entrada, continuare con la parte servidor, que ya comencé en el articulo anterior.
Voy a desarrollar la parte donde se responden a las peticiones REST. Para el que no sepa que es eso de REST, podéis empezar leyendo este articulo de la wikipedia, pero os podeis quedar con la idea de que es como una petición web normal, solo que en vez de trabajar con paginas HTML enteras, se trabaja con intercambio de datos más o menos en crudo.</description></item><item><title>La clase WebClient</title><link>http://www.profesor-p.com/webclient/index.html</link><pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate><guid>http://www.profesor-p.com/webclient/index.html</guid><description>En esta ocasión hablare de la clase WebClient de SpringBoot.
El proyecto de ejemplo esta disponible en: https://github.com/chuchip/webClientExample
Esta clase seria la equivalente a RestTemplate pero para realizar peticiones asíncronas.
Para poder usar esta clase debemos poner estas dependencias en nuestro fichero maven
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-webflux&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;Esto es así porque debemos usar WebFlux el cual esta disponible con la versión 5.0 de Spring. Esta versión de Spring requiere que usemos al menos Java 8.</description></item><item><title>Backend (IV)</title><link>http://www.profesor-p.com/2018/09/05/aplicacion-en-spring-rest-y-angular-4a-parte/index.html</link><pubDate>Wed, 05 Sep 2018 10:16:08 +0000</pubDate><guid>http://www.profesor-p.com/2018/09/05/aplicacion-en-spring-rest-y-angular-4a-parte/index.html</guid><description>Continuo con la serie de artículos explicando una aplicación donde la parte de servidor esta creada con Java, apoyándose en el framework Spring y la parte del cliente usara Angular. Para la comunicación entre la aplicación usare peticiones REST, por supuesto utilizando el protocolo JSON.
En la anterior entrada empece a explicar como se desplegaría la aplicación y en que URLs se procesarían las diferentes peticiones. Ahora explicare como funcionan las diferentes peticiones.</description></item><item><title>Securizando aplicación de SpringBoot con KeyCloack</title><link>http://www.profesor-p.com/springboot/seguridad-con-keycloack/index.html</link><pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate><guid>http://www.profesor-p.com/springboot/seguridad-con-keycloack/index.html</guid><description>&lt;h3 id="u_borrador_u-pendiente-de-refactorizar-y-documentar-en-español">&lt;!-- raw HTML omitted -->&lt;em>Borrador&lt;/em>&lt;!-- raw HTML omitted -->. Pendiente de refactorizar y documentar en español.&lt;/h3>
&lt;p>Programa demostrando como crear una aplicación en Spring Boot cuya seguridad es gestionada por &lt;a href="https://www.keycloak.org/" target="_blank">KeyCloak&lt;/a>.&lt;/p>
&lt;p>El programa esta basado en este articulo &lt;a href="https://medium.com/@ddezoysa/securing-spring-boot-rest-apis-with-keycloak-1d760b2004e" target="_blank">https://medium.com/@ddezoysa/securing-spring-boot-rest-apis-with-keycloak-1d760b2004e&lt;/a>&lt;/p></description></item><item><title>Estableciendo filtros en Spring</title><link>http://www.profesor-p.com/2019/06/13/estableciendo-filtros-en-spring/index.html</link><pubDate>Thu, 13 Jun 2019 16:11:53 +0000</pubDate><guid>http://www.profesor-p.com/2019/06/13/estableciendo-filtros-en-spring/index.html</guid><description>En esta entrada voy a hablar de como implementar filtros en Spring. Los filtros son de los que se pueden establecer cuando se recibe una petición HTTP. Es decir, suponiendo que tenemos un programa escuchando en unas URI, poder especificar que deseamos ejecutar algo antes de que las peticiones sea procesadas por el controlador.
Esto es muy útil si queremos que todas las peticiones cumplan un requisito, por ejemplo incluir una cabecera especifica.</description></item><item><title>Accediendo facilmente a los datos con Spring Rest Data</title><link>http://www.profesor-p.com/2019/03/25/accediendo-facilmente-a-los-datos-con-spring-rest-data/index.html</link><pubDate>Mon, 25 Mar 2019 16:02:14 +0000</pubDate><guid>http://www.profesor-p.com/2019/03/25/accediendo-facilmente-a-los-datos-con-spring-rest-data/index.html</guid><description>Spring Boot ofrece un fantástico soporte para acceder a los datos con JPA a través de sus interfaces, del tipo Repository. Si a esto le añadimos la facilidad con que se crean servicios REST, como explicaba en la entrada [http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/][2] podremos hacer una aplicación ofreciendo una API para acceder a nuestra base de datos preferida muy facilmente.
Pero si queremos implementar HATEOAS en nuestro proyecto o si hay muchos criterios sobre los que debemos acceder a los datos, deberemos escribir bastante código.</description></item><item><title>Microservicios distribuidos con Eureka</title><link>http://www.profesor-p.com/2019/01/03/microservicios-distribuidos-con-eureka/index.html</link><pubDate>Thu, 03 Jan 2019 08:52:59 +0000</pubDate><guid>http://www.profesor-p.com/2019/01/03/microservicios-distribuidos-con-eureka/index.html</guid><description>En esta clase hablare de como crear microservicios distribuidos en Spring Boot utilizando las facilidades que nos da el paquete Spring Cloud NetFlix.
Cualquier microservicio debe poder localizar las diferentes instancias de otro servicio del que dependa sin tener sus direcciones definidas en el código.
En el caso de que un microservicio deba acceder a otro lo ideal seria que de alguna manera pudiera saber en que direcciones esta las instancias de ese otro microservicio funcionando, pues lo más común es que se levanten diferentes instancias dependiendo de la carga.</description></item><item><title>Personalizar salidas de códigos HTTP en Spring Boot</title><link>http://www.profesor-p.com/2018/11/20/personalizar-codigo-http-en-spring-boot/index.html</link><pubDate>Tue, 20 Nov 2018 17:46:55 +0000</pubDate><guid>http://www.profesor-p.com/2018/11/20/personalizar-codigo-http-en-spring-boot/index.html</guid><description>En esta articulo os voy a explicar como devolver errores HTTP personalizados. Para ello crearemos un proyecto llamado httpErrorPersonalizado. Teneis el código fuente de este proyecto en mi página de GitHub
Cuando realizamos una petición HTTP a un recurso en Spring Boot, es común que esa petición tenga que considerar la opción de devolver un error.
Es el caso típico de que realizamos una petición RESTful para solicitar un registro, pero ese registro no existe.</description></item><item><title>Securizando servicios REST con Oauth2 en SpringBoot</title><link>http://www.profesor-p.com/2018/10/18/securizando-servicios-rest-con-oauth2-en-springboot/index.html</link><pubDate>Thu, 18 Oct 2018 13:20:43 +0000</pubDate><guid>http://www.profesor-p.com/2018/10/18/securizando-servicios-rest-con-oauth2-en-springboot/index.html</guid><description>En esta entrada explicare como podemos dotar de seguridad a servicios REST en Spring Boot. La aplicación de ejemplo es la misma que la entrada de seguridad WEB anterior, así que el código fuente lo tenéis en: https://github.com/chuchip/OAuthServer.
Explicando la tecnologia Oauth2 Como he dicho, utilizaremos el protocolo OAuth2, así que lo primero sera explicar como funciona este protocolo.
OAuth2 tiene algunas variantes pero yo os voy a explicar la que utilizare en el programa y, para ello, voy a poneros un ejemplo para que entendáis lo que pretendemos hacer.</description></item></channel></rss>