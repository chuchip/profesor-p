<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>json on Documentacion en español</title><link>http://www.profesor-p.com/es/categories/json/index.html</link><description>Recent content in json on Documentacion en español</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Wed, 28 Oct 2020 17:00:00 +0000</lastBuildDate><atom:link href="http://www.profesor-p.com/es/categories/json/index.xml" rel="self" type="application/rss+xml"/><item><title>Aplicación CRUD usando REST en JavaEE</title><link>http://www.profesor-p.com/2018/10/06/aplicacion-rest-en-javaee/index.html</link><pubDate>Sat, 06 Oct 2018 21:54:13 +0000</pubDate><guid>http://www.profesor-p.com/2018/10/06/aplicacion-rest-en-javaee/index.html</guid><description>&lt;p>Explicaré como hacer una aplicación CRUD, que sirva peticiones REST con el protocolo JSON, usando JavaEE y Glasfish como servidor de aplicaciones.
En esta aplicación actualizaremos y consultaremos una pequeña tabla a través de diferentes peticiones REST.&lt;/p></description></item><item><title>Aplicación CRUD en Angular</title><link>http://www.profesor-p.com/2018/10/08/aplicacion-crud-en-angular/index.html</link><pubDate>Mon, 08 Oct 2018 20:23:38 +0000</pubDate><guid>http://www.profesor-p.com/2018/10/08/aplicacion-crud-en-angular/index.html</guid><description>En esta ocasión os traigo un programa realizado en Angular, el cual a través de peticiones REST, da de alta, modifica, borra y consulta los diferentes países disponibles en una base de datos. Lo que se viene diciendo una aplicacion CRUD.
Por supuesto el protocolo para las comunicaciones es JSON.
El código fuente lo tenéis en: https://github.com/chuchip/crud-rest-angular
Este programa es el frontend del realizado en JavaEE, y que explico como funciona en las entradas: http://www.</description></item><item><title>Backend (IV)</title><link>http://www.profesor-p.com/2018/09/05/aplicacion-en-spring-rest-y-angular-4a-parte/index.html</link><pubDate>Wed, 05 Sep 2018 10:16:08 +0000</pubDate><guid>http://www.profesor-p.com/2018/09/05/aplicacion-en-spring-rest-y-angular-4a-parte/index.html</guid><description>Continuo con la serie de artículos explicando una aplicación donde la parte de servidor esta creada con Java, apoyándose en el framework Spring y la parte del cliente usara Angular. Para la comunicación entre la aplicación usare peticiones REST, por supuesto utilizando el protocolo JSON.
En la anterior entrada empece a explicar como se desplegaría la aplicación y en que URLs se procesarían las diferentes peticiones. Ahora explicare como funcionan las diferentes peticiones.</description></item><item><title>Spring Cloud Gateway. Redirigiendo peticiones Reactivamente.</title><link>http://www.profesor-p.com/spring/gateway/index.html</link><pubDate>Wed, 28 Oct 2020 17:00:00 +0000</pubDate><guid>http://www.profesor-p.com/spring/gateway/index.html</guid><description>Hace tiempo escribí un articulo sobre como realizar una pasarela o gateway para redirigir peticiones utilizando Zuul. Sin embargo, Zuul ya no esta aconsejado por la gente de Pivotal, que como sabréis es la empresa detrás de Spring. Para sustituirlo han creado Spring Cloud Gateway.
Principalmente, la mayor ventaja de este este software es que es reactivo. Es decir, utiliza las nuevas librerías de Webflux de Spring para que las llamadas no sean bloqueantes.</description></item><item><title>Accediendo facilmente a los datos con Spring Rest Data</title><link>http://www.profesor-p.com/2019/03/25/accediendo-facilmente-a-los-datos-con-spring-rest-data/index.html</link><pubDate>Mon, 25 Mar 2019 16:02:14 +0000</pubDate><guid>http://www.profesor-p.com/2019/03/25/accediendo-facilmente-a-los-datos-con-spring-rest-data/index.html</guid><description>Spring Boot ofrece un fantástico soporte para acceder a los datos con JPA a través de sus interfaces, del tipo Repository. Si a esto le añadimos la facilidad con que se crean servicios REST, como explicaba en la entrada [http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/][2] podremos hacer una aplicación ofreciendo una API para acceder a nuestra base de datos preferida muy facilmente.
Pero si queremos implementar HATEOAS en nuestro proyecto o si hay muchos criterios sobre los que debemos acceder a los datos, deberemos escribir bastante código.</description></item><item><title>Usando Zuul para redirigir peticiones REST</title><link>http://www.profesor-p.com/2019/03/16/zuul-para-redirigir-peticiones-rest-en-spring-boot/index.html</link><pubDate>Sat, 16 Mar 2019 07:19:41 +0000</pubDate><guid>http://www.profesor-p.com/2019/03/16/zuul-para-redirigir-peticiones-rest-en-spring-boot/index.html</guid><description>En este articulo explicare como crear una pasarela para peticiones REST (una gateway) utilizando Zuul.
Zuul es parte del paquete Spring Cloud NetFlix y permite redirigir peticiones REST, realizando diversos tipos de filtros.
En casi cualquier proyecto donde haya microservicios, es deseable que todas las comunicaciones entre esos microservicios pasen por un lugar común, de tal manera que se registren las entradas y salidas, se pueda implementar seguridad o se puedan redirigir las peticiones dependiendo de diversos parámetros.</description></item></channel></rss>