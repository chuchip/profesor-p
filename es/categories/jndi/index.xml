<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jndi on Documentacion en español</title><link>http://www.profesor-p.com/es/categories/jndi/index.html</link><description>Recent content in jndi on Documentacion en español</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Thu, 06 Sep 2018 06:08:12 +0000</lastBuildDate><atom:link href="http://www.profesor-p.com/es/categories/jndi/index.xml" rel="self" type="application/rss+xml"/><item><title>Backend I</title><link>http://www.profesor-p.com/2018/08/31/aplicacion-en-spring-y-angular/index.html</link><pubDate>Fri, 31 Aug 2018 05:53:48 +0000</pubDate><guid>http://www.profesor-p.com/2018/08/31/aplicacion-en-spring-y-angular/index.html</guid><description>En Anjelica, el ERP desarrollado por mi hace unos años, hay un programa que saca un comparativo de ventas, entre dos años, mostrando mes a mes, los kilos, importes y ganancias.
La idea es realizar esta misma consulta pero usando Spring con REST en el backend y como frontend usar Angular.
Para ello se realizaran los siguientes pasos:
Crear tablas y cargar datos de prueba en la base de datos. Usare H2 embebido, en vez de postgresql, que es la base de datos que usa Anjelica.</description></item><item><title>Backend (V)</title><link>http://www.profesor-p.com/2018/09/06/aplicacion-en-spring-rest-y-angular-5a-parte/index.html</link><pubDate>Thu, 06 Sep 2018 06:08:12 +0000</pubDate><guid>http://www.profesor-p.com/2018/09/06/aplicacion-en-spring-rest-y-angular-5a-parte/index.html</guid><description>En esta ultima parte de la parte servidor hablare de como se crean los objetos que en el anterior articulo se devolvían.
Estos objetos eran del tipo _VentasAnoBean _y un ArrayList de _VentasSemanaBean. _Para conseguirlos se llamaban a sendas funciones en la clase **YagesBussines, **que eran las que construían esos objetos.
Empezare describiendo la clase
Lo primero, marcamos nuestra clase como @Component para que Spring la cree y este disponible para inyectarla en otras clases.</description></item><item><title>Conectando a una base de datos usando JNDI y Spring en Tomcat</title><link>http://www.profesor-p.com/2018/08/21/conectando-con-postgresql-usando-jndi-y-spring-en-tomcat-parte-1/index.html</link><pubDate>Tue, 21 Aug 2018 13:34:56 +0000</pubDate><guid>http://www.profesor-p.com/2018/08/21/conectando-con-postgresql-usando-jndi-y-spring-en-tomcat-parte-1/index.html</guid><description>&lt;p>En este ejemplo veremos como conecta a Postgresql usando JPA + Hibernate y Spring JDBC. Para ello uso como servidor de aplicaciones Tomcat. La configuración esta realizada con anotaciones y XML y utilizo el pool de conexiones de Tomcat recogido a través de JNDI, para que la aplicación no deba saber realmente ni donde se conecta.&lt;/p></description></item></channel></rss>