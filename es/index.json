[{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular","content":" En esta p√°gina ir√© poniendo las sucesivas entradas donde intentare dar un curso b√°sico sobre Angular 6\nEn el curso se desarrollara una aplicaci√≥n que usando peticiones RESTFUL, realizara una consulta mostrando un hist√≥rico de ventas. En la aplicaci√≥n se usara Boostrap y se explicara como utilizar rultas.\nLa aplicaci√≥n backend, en el servidor, esta hecho en Java, usando Spring Framework,¬†y se puede ver en su desarrollo en la pagina: http://www.profesor-p.com/aplicacion-usando-java-y-angular/\nEstas son las entradas creadas de momento:\n¬°¬°Angular es reactivo!! Instalaci√≥n y configuraci√≥n b√°sica de Angular Inicializando aplicaci√≥n Manejando rutas ‚Ä¶ continuara\n","description":"","tags":null,"title":"Curso de Angular 6","uri":"/es/4-angular/curso/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular","content":"A continuaci√≥n detallo las entradas donde voy explicando, paso a paso, como crear un aplicaci√≥n, que es una migraci√≥n de una consulta realizada en el ERP Anjelica, el cual es software libre .¬†Esta es la pantalla original de la aplicaci√≥n en Anjelica.\nEsta aplicaci√≥n es una consulta donde la parte del servidor se realiza en Java, usando Spring como Framework y la parte del cliente se realiza en Angular. La comunicaci√≥n entre ambas partes se realiza con servicios REST, usando JSON.\nParte servidor Primera parte Segunda parte Tercera parte Cuarta¬†parte Quinta parte Parte cliente ¬°¬°Angular es reactivo!! Instalaci√≥n y configuraci√≥n b√°sica de Angular Inicializando aplicaci√≥n Manejando rutas ‚Ä¶ continuaremos üòâ\n","description":"","tags":null,"title":"Aplicaci√≥n usando Java y Angular","uri":"/es/4-angular/aplicacion/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"Este es un caj√≥n de sastre con art√≠culos sobre diferentes temas.\nKotlinArticulos relacionados con el lenguaje de programaci√≥n Kotlin:\nProxies in JavaEn articulo anterior (https://www.profesor-p.com/springboot/aot/index.html) hablaba sobre AOT (Aspect Oriented Programing) y comentaba que Spring Boot hac√≠a uso de proxies para implementarlos. En este art√≠culo profundizare como usar proxies en java usando la librer√≠a java.lang.reflect.Proxy\nUsando LambdasEn esta breve entrada explicare como mejorar el ejemplo anterior, con el uso de lambdas.\n","description":"","tags":null,"title":"Java","uri":"/es/1-java/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring","content":"Estos son los art√≠culos disponibles sobre testing:\nTesteando las aplicacionesEn una pr√≥xima entrada hablare sobre como testear las aplicaciones con pruebas unitarias. Bueno, mostrare como lo hago en mi c√≥digo.\nDe momento, viendo que alguien ya la ha hecho antes (y seguramente mejor) dejo este enlace como aperitivo.\nUso de perfiles para testear en Spring BootComo comentaba en el articulo anterior gracias al uso de perfiles es f√°cil personalizar las aplicaciones en Spring Boot.\nTesteando SpringEn este art√≠culo muestro diferentes maneras de testear una aplicaci√≥n basada con SpringBoot.\n","description":"","tags":null,"title":"Testing","uri":"/es/2-spring/1-testing/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Hugo","content":"Vamos a hablar de Hugo. Este un software¬†permite crear sitios web est√°ticos pero trabajando casi como si fueran din√°micos. Para ello podremos usar diferentes plantillas que configuraremos, para luego a√±adir entradas y contenido din√°mico f√°cilmente.\nHugo usa markdown para a√±adir los contenidos pero tambi√©n podremos usar HTML, CSS y JavaScript si fuera necesario.\nPara crear una pagina web lo primero que tenemos que hacer es bajarnos el programa, lo cual podemos hacer desde https://github.com/gohugoio/hugo/releases Una vez tengamos instalado hugo en nuestro ordenador, podremos empezar a crear nuestra propia pagina web.\nComo primer paso abriremos un terminal y ejecutaremos la siguiente sentencia:\n\u003e hugo new site mipagina Con esto hugo creara un directorio llamado ‚Äòmipagina‚Äô debajo del actual. Nos moveremos a el directorio para poder instalar el tema con el que queremos que funcione nuestra p√°gina web.\n\u003e cd mipagina En https://themes.gohugo.io/ tenemos todas los temas (o plantillas) sobre las que basar nuestra p√°gina web. Estos temas est√°n en su mayor√≠a alojados en GitHub por lo cual lo m√°s f√°cil para descargarlos es usar el comando git . De todos modos, siempre tenemos la opci√≥n de descargar un fichero zip que despu√©s descomprimiremos en el directorio themes\nSupongamos que queremos usar el tema initio que es el que usamos en la p√°gina de RiojaTech Alliance . Para ello iremos a su URL https://themes.gohugo.io/hugo-initio/ y pulsaremos sobre el bot√≥n ‚ÄòDownload‚Äò, lo cual nos llevara a GitHub, a la direcci√≥n https://github.com/miguelsimoni/hugo-initio. All√≠ descargaremos el fichero ZIP, d√°ndole a l bot√≥n Download ZIP.\nDespu√©s descomprimiremos el fichero ZIP dentro del directorio themes , de tal manera que la estructura de nuestros directorios ser√° como la siguiente:\nSuele ser una buena idea copiar el contenido del directorio example-site dentro de nuestro directorio principal para tener una plantilla sobre la que empezar a trabajar.\nProbando nuestra pagina web Ahora, para ver como va quedando nuestra p√°gina web, ejecutaremos este comando:\n\u003e hugo -F serve De est√° manera se lanzara un peque√±o servidor web el cual escuchara en el puerto 1313 .\nEste servidor monitorizara los cambios en los ficheros de tal manera que si modificamos cualquier fichero, nuestra pagina web ser√° recargada autom√°ticamente.\nEn la direcci√≥n http://localhost:1313/ con nuestro navegador favorito podremos ver el resultado.\nA√±adiendo contenido Si queremos a√±adir una entrada en la pagina web usaremos este comando:\nEsto nos generara el fichero ‚Äòpost0.md‚Äô en el directorio content/post/\nEste fichero tendr√° el siguiente contenido.\n--- title: \"post0\" # Nombre del post date: 2018-11-01T11:21:58+01:00 ## fecha actual. draft: true # Poner a false para que aparezca el evento --- Debajo deberemos poner el contenido de nuestro articulo. Recordar que se puede usar el lenguaje markdown y tambi√©n HTML.\nSi ponemos la etiqueta \u003c!--more--\u003e, si nuestra plantilla lo soporta, separaremos el sumario de nuestro articulo, del articulo completo en si.\nConfigurando HUGO El fichero principal de Hugo esta en el directorio ra√≠z y se llama config.toml\nEn este fichero configuraremos el tema a usar , el titulo de nuestra pagina web y otra serie de par√°metros. Estos par√°metros pueden variar de un tema a otro aunque siempre suele haber unos cuantos en com√∫n.\nEsto es un extracto del fichero config.toml de la web www.lariojatech.org\nbaseURL = \"http://lariojatech.org/\" languageCode = \"es-es\" title = \"La Rioja Tech Alliance\" theme = \"hugo-initio\" publishDir = \"docs\" [params] name = \"La Rioja Tech Alliance\" description = \"Los grupos de tecnolog√≠a de La Rioja hacemos pi√±a para promover la tecnolog√≠a \" favicon = \"images/gt_favicon.png\" DateForm = \"2, January 2006\" ..... Si queremos hacer alg√∫n cambio a la plantilla descargada deberemos cambiar los ficheros ubicados en themes/NOMBRE_PLANTILLA/layouts/partials . Ah√≠ encontraremos una serie de ficheros donde se especifica el comportamiento de la plantilla.\nEn themes/NOMBRE_PLANTILLA/_default es probable que existan los ficheros list.html y single.html. En single.html se definir√° como se deben presentar una pagina de tipo lista, es decir cuando se deben mostrar diferentes art√≠culos juntos. En single.html se especifica como se debe presentar una pagina de un sola entrada.\nGenerando pagina web con HTML est√°tico Para generar todos los ficheros que deber√°n ir en el servidor web, ejecutaremos el comando\n\u003e hugo -F Los ficheros, por defecto ser√°n generados, en el directorio public . Ese comportamiento se puede cambiar a√±adiendo la directiva publishDir en el fichero config.toml\nEl flag ‚Äú‚Äù-F‚Äù es para obligar a Hugo a incluir los posts cuya fecha sea superior a la actual, pues por defecto no los incluye. Si no la pusi√©ramos todos los eventos futuros no aparecer√≠an.\nY esto es todo, solo animaros a que utilizeis este fantastico programa con el que podreis crear paginas dinamicamente para alojarlas, por ejemplo, en GitHub. Gratuitamente por supuesto.\n","description":"","tags":["hugo","web"],"title":"Generar paginas Web est√°ticas din√°micamente","uri":"/2018/11/28/generar-paginas-web-estaticas-dinamicamente/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Java","content":"Articulos relacionados con el lenguaje de programaci√≥n Kotlin:\nKotlin vs JavaUltimamente se habla mucho de Kotlin, que si Google lo ha marcado como lenguaje preferente en la IO 2017, que si es un lenguaje muy mega-guay para programar en Android, que si soluciona los problemas de Null Pointer Exception.\nEn esta entrada voy a dar mi opini√≥n (sin que nadie me pague üòâ ) comparando ambos lenguajes y diciendo, en mi opini√≥n si es tan guay Kotlin, o es mas humo e intereses comerciales.\nAplicacion CRUD con REST en Kotlin y SpringBootBuenas chavales, En esta nueva entrada os ense√±are como realizar un programa CRUD, que sirva peticiones REST, usando Spring Boot y como lenguaje de programaci√≥n usar Kotlin. Creo que no har√° falta aclarar que una aplicaci√≥n CRUD es la t√≠pica aplicaci√≥n que permite consultar, insertar, modificar y borrar los datos de una tabla. Vamos, lo que se suele ir llamando un mantenimiento de una tabla. Esta aplicaci√≥n seria una variaci√≥n del que explique en la entrada http://www.\nAplicacion CRUD con REST en Kotlin y SpringBoot (2¬™ Parte)Hola de nuevo, chicos. Continuo con la entrada¬†http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/¬†para ver como realizar las peticiones REST , con protocolo JSON que es el est√°ndar de facto üòâ en Kotlin. Una vez que ya tenemos la l√≥gica de acceso a nuestra base de datos, tenemos que hacer la parte Web. Pues, aunque os parezca incre√≠ble, esto se hace con una sola clase y ademas de muy pocas lineas. La clase en cuesti√≥n es¬†ApiController.\n","description":"","tags":null,"title":"Kotlin","uri":"/es/1-java/kotlin/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†J2EE","content":"Explicar√© como hacer una aplicaci√≥n CRUD, que sirva peticiones REST con el protocolo JSON, usando JavaEE y Glasfish como servidor de aplicaciones. En esta aplicaci√≥n actualizaremos y consultaremos una peque√±a tabla a trav√©s de diferentes peticiones REST.\nSi bien es cierto que JavaEE no soporta oficialmente JSON en sus especificaciones, la realidad es que es muy f√°cil el realizar una aplicaci√≥n totalmente funcional y muy f√°cilmente con la libreria JACKSON.\nLo primero, aclarar que en¬†https://github.com/chuchip/crudJavaEE teneis c√≥digo fuente del que hablo en esta entrada. Y ahora, pong√°monos manos a la obra.\nComo ya he dicho vamos a utilizar la libreria Jackson que viene incluida con JavaEE 8.0, por lo cual no necesitaremos incluir ninguna librer√≠a externa excepto las necesarias para acceder a la base de datos, a trav√©s de JPA. En este caso utilizaremos EclipseLink, por lo que deberemos incluir en nuestro fichero pom.xml las siguientes dependencias:\nTambi√©n incluiremos las dependencias para las libreria LOMBOK y WEB.\nVale, ya tenemos nuestras librerias. Ahora empecemos con el programa.Primero¬†voy a crear la clase donde definimos el punto de entrada de nuestras peticiones REST.¬†Esto lo hacemos en la clase RestConfiguration.java\nComo pod√©is ver es una clase supersencilla. Tan solo tenemos que crear una clase que herede de Application y a√±adir la etiqueta @ApplicationPath. Con esto ya especificaremos que todas las peticiones que vayan a la trayectoria (Path para los ingleses) api seran tratadas por el servlet de la librer√≠a JACKSON.\nAhora vamos a especificar los diferentes recursos dentro de esta trayectoria o camino. Esto lo haremos en la clase LocaleResource, la cual detallo a continuaci√≥n:\nY como dec√≠a, Jack El Destripador, vayamos por partes üòâ\nLo primero es observar la etiqueta @Path(‚Äúlocale‚Äù) que indicara la trayectoria a la que responder√° esta clase. En este caso indicamos la trayectoria locale. Es decir, esta clase sera usada cuando vayamos a la URL: ‚Äúhttp://localhost:8080/restExample/api/locale‚Äù . Aclarar que restExample es donde desplegaremos la aplicaci√≥n en el servidor Glassfish .\nLa etiqueta @Stateless es usada para poder inyectar las dependencias correctamente (vosotros, de momento, hacerme caso y creer que es necesario. ¬°¬° Un acto de fe!! üòâ\nDentro de la clase, con la etiqueta¬†@Inject inyectaremos la clase¬†LocaleController, la cual utilizaremos para interactuar con la base de datos.\nAhora vamos a explicar, una a una las diferentes funciones de¬†esta clase.\nFuncion findAllLocales Ahora definimos nuestra primera funci√≥n que nos devolver√° todos los Locales (pa√≠ses) disponibles en nuestra base de datos. Como se ve, ponemos la etiqueta @GET para especificar que debe ser llamada solo en peticiones HTTP tipo GET, y despu√©s a√±adimos la etiqueta\n@Produces(MediaType.APPLICATION_JSON), para especificar que devuelve un resultado en formato JSON.\nDentro de la funci√≥n ponemos usamos la clase javax.ws.rs.core.Response que a trav√©s de su metodo ok, al que debemos pasar el objeto que debe construir en formato JSON, cuando invoquemos a la funci√≥n¬†build. En este caso el objeto pasado a la funci√≥n **ok¬†**¬†es una colecci√≥n de clases de tipo Locales. Es decir, le pasamos esto: Collection, al llamar a la funci√≥n findAll de la clase **LocaleController¬†**\nComo se puede ver en el pantallazo, usando el excelente programa postman, podemos ver el resultado de la llamada a esta funci√≥n:\nFunci√≥n findLocale Aqu√≠ devolveremos el registro que indicamos en el par√°metro mandado. Utilizaremos una vez m√°s la etiqueta @GET y despues a√±adiremos la etiqueta @Path(‚Äú/{locale}‚Äù) de tal manera que a esta funci√≥n se le llamara cuando se haga una peticion HTTP tipo GET y que tenga un unico parametro\nEn la declaraci√≥n de la funci√≥n vemos la anotaci√≥n @PathParam, con la cual indicamos que a la variable \u003cem\u003elocCodi\u003c/em\u003e, se le debe asignar el valor del par√°metro ‚Äúlocale‚Äù, que anteriormente hemos especificado en la anotaci√≥n @Path.\nLa funci√≥n como tal no tiene muchos misterios. Llamamos a la funcion findByID para buscar en la base de datos el codigo mandado. En caso de que no exista, al intentar recoger el nombre, con la linea l.getNombre()se lanzara una excepci√≥n tipo EntityNotFoundException, en cuyo caso devolveremos una respuesta tipo NOT_FOUND. En caso contrario devolveremos el objeto tipo Locales devuelto.\nY por hoy ya vale‚Ä¶ otro dia continuare con las funciones que a√±aden, actualizan y borran los registros.\nHasta pronto¬†!!\n","description":"","tags":["glassfish","javaee","json","netbeans","rest"],"title":"Aplicaci√≥n CRUD usando REST en JavaEE","uri":"/2018/10/06/aplicacion-rest-en-javaee/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular¬†\u003e¬†Aplicaci√≥n usando Java y Angular","content":"Aqu√≠ encontrareis los entradas describiendo como crear la parte backend de esta aplicaci√≥n.\nBackend IEn Anjelica, el ERP desarrollado por mi hace unos a√±os, hay un programa que saca un comparativo de ventas, entre dos a√±os, mostrando mes a mes, los kilos, importes y ganancias. La idea es realizar esta misma consulta pero usando Spring con REST en el backend y como frontend usar Angular. Para ello se realizaran los siguientes pasos: Crear tablas y cargar datos de prueba en la base de datos. Usare H2 embebido, en vez de postgresql, que es la base de datos que usa Anjelica.\nBackend (II)En esta segunda parte voy a empezar a explicar como hacer la parte del servidor, usando, como dije en la primera parte de este articulo utilizare¬†JAVA 8, apoy√°ndome en el framework Spring, versi√≥n 5. Esta aplicaci√≥n la he realizado con NetBeans 9, usando Tomcat 9 como servidor de aplicaciones. La pod√≠a haber realizado usando Spring Boot, lo que habr√≠a realizado m√°s f√°cilmente y con menos configuraci√≥n pero he querido hacerlo con Tomcat como ejercicio.\nBackend (III)En esta entrada, continuare con la parte servidor, que ya comenc√© en el articulo anterior. Voy a desarrollar la parte donde se responden a las peticiones REST. Para el que no sepa que es eso de REST, pod√©is empezar leyendo este articulo de la wikipedia, pero os podeis quedar con la idea de que es como una petici√≥n web normal, solo que en vez de trabajar con paginas HTML enteras, se trabaja con intercambio de datos m√°s o menos en crudo.\nBackend (IV)Continuo con la serie de art√≠culos explicando una aplicaci√≥n donde la parte de servidor esta creada con Java, apoy√°ndose en el framework Spring y la parte del cliente usara Angular. Para la comunicaci√≥n entre la aplicaci√≥n usare peticiones REST, por supuesto utilizando el protocolo JSON. En la anterior entrada¬†empece a explicar como se desplegar√≠a la aplicaci√≥n y en que URLs se procesar√≠an las diferentes peticiones. Ahora explicare como funcionan las diferentes peticiones.\nBackend (V)En esta ultima parte de la parte servidor hablare de como se crean los objetos que en el anterior articulo se devolv√≠an. Estos objetos eran del tipo _VentasAnoBean¬†_y un ArrayList de _VentasSemanaBean.¬†_Para conseguirlos se llamaban a sendas funciones en¬†la clase **YagesBussines,¬†**que eran las que constru√≠an esos objetos. Empezare describiendo la clase Lo primero, marcamos nuestra clase como @Component para que Spring la cree y este disponible para inyectarla en otras clases.\n","description":"","tags":null,"title":"Backend","uri":"/es/4-angular/aplicacion/backend/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Java¬†\u003e¬†Kotlin","content":"Ultimamente se habla mucho de Kotlin, que si Google lo ha marcado como lenguaje preferente en la IO 2017, que si es un lenguaje muy mega-guay para programar en Android, que si soluciona los problemas de Null Pointer Exception.\nEn esta entrada voy a dar mi opini√≥n (sin que nadie me pague üòâ ) comparando ambos lenguajes y diciendo, en mi opini√≥n si es tan guay Kotlin, o es mas humo e intereses comerciales.\nEn primer lugar, decir que Kotlin es compatible con Java, es decir, utiliza la m√°quina virtual de Java y ademas es compatible con este, vamos que tu puedes tener tu programita en Kotlin y ejecutar c√≥digo Java ya creado, con lo cual todas las librerias de Java funcionan en Kotlin. Ahora voy a enumerar las ventajas de Kotlin y ver si realmente son tan trascendentes.\nKotlin soluciona el problema de los Null Pointer Exception. A este tema se le ha dado mucha publicidad. En Kotlin, efectivamente, cuando defines una variable tienes que especificarle un valor y si no,¬†marcar la variable como que¬†va a aceptar nulos, Si la marcas como que acepta nulos,¬†no te deja¬†juntarla con otras variables que no han sido marcadas como posibles nulables (vamos, que pueden ser null ).Bueno, realmente si te deja, pero te obliga a marcar el resultado como posible null.\nEl problema es que al final, si usas librerias Java¬†externas (como es lo normal), no tienes ningun control sobre si las funciones Java puras devuelven valores Null o no, con lo cual, lo mas probable es que tengas Null Pointers Exception como antes. Es decir, cuando solo uses Kotlin y todas las librerias externas sean Kotlin, pues igual a este tema¬†le sacas algun provecho pero actualmente se queda cojo.\nKotlin tiene expresiones lambda. Vale, Java 8.0 (que ya tiene un tiempo) tambien lo tiene. Otro tema es que se utilize mas o menos, pero vamos que no es una ventaja sobre Java.\nKotlin soporta variables genericas. En Kotlin, cuando defines una variable no tienes porque especificar de que tipo es.¬†O sea, puedes crear una variable tal que asi:\nvar s=\"hola\"Esto esta muy guay y evita tener que andar poniendo el tipo de variable, pero‚Ä¶. en Java 10, tambien lo tenemos disponible, usando, ademas, la misma sintaxis. (var n=1;). La unica diferencia es que en Kotlin, las lineas no tienen porque ir terminadas con el punto y coma.\nExtensiones a Funciones. Kotlin, sobre todo programando en Android, tiene ciertas extensiones, por ejemplo la¬†que hace que puedas acceder a las variables de tu entorno grafico directamente. Otra extension es que tu defines un POJO y no hace falta poner los setters y getters de siempre. Directamente Kotlin los crea por ti. Eso esta muy bien, pero‚Ä¶ en Java tenemos el proyecto Lombok que hace lo mismo, es decir crear al vuelo, las sentencias setters , getters y alguna otra cosa m√°s (echarle un vistazo, esta fenomenal).\nBueno, por no extenderme demasiado, Kotlin es un gran lenguaje y tiene cosas muy chulas, como por ejemplo, el hecho de definir en las funciones valores por defecto, de tal manera que en una funcion puede estar definida algo asi como esto:\nDe tal manera que a esta funcion la podremos llamar con un parametro, con dos o con ninguno, con lo cual te evitas el¬†crear 3 funciones como tendrias que crear en Java, y que una llame a otra (es decir, es un ahorro de c√≥digo sin mas).\nMi opini√≥n: Si vais a programar en Android, aprender Kotlin, la curva de aprendizaje es muy rapida y esta claro que Google le va¬†a dar mucho soporte y a√±adirle m√°s cosas que ayudaran. Es obvio que Android no quiere depender de Java (entre otras cosas por los problemas de licencias que esta teniendo con Oracle) y por eso, al final, Kotlin sera el lenguaje que mandara en Android.\nSi usais Java, pero programando, por ejemplo, servicios Web, yo no me molestaria demasiado en aprender Kotlin: las mejoras que te ofrece no son tan grandes y las que valen la pena, las tienes en las ultimas versiones de Java. Pero claro, esto es solo mi opini√≥n üòâ\n","description":"","tags":["java","kotlin"],"title":"Kotlin vs Java","uri":"/2018/08/23/kotlin-vs-java/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"Art√≠culos sobre temas b√°sicos y algunos m√°s avanzados\nAqu√≠ tienes un listado de los art√≠culos disponibles:\nTestingEstos son los art√≠culos disponibles sobre testing:\nSeguridadAqu√≠ tienes un listado de entradas sobre seguridad en Spring:\nMVCAunque ya no se utiliza tanto aqu√≠ encontraras art√≠culos sobre Spring MVC.\nDatabaseEntradas sobre como acceder a bases de datos, con JPA y JDBC\nCloudEntradas relacionas con el desarrollo de aplicaciones Spring en la nube.\nWebflowEntradas sobre el paquete WebFlow de Spring. Actualmente esta en un poco en desuso pero ha sido ampliamente utilizado en entornos empresariales.\nBaseExplicaciones sobre el core de Spring\nRestfulAnotaciones sobre aplicaciones Restful en Spring\nMensajer√≠a con Kafka y Spring BootKafka es un programa de mensajer√≠a pensado para comunicaciones as√≠ncronas. B√°sicamente la idea es que los clientes o consumidores se subscriben a un tipo de noticia o topic y cuando un emisor o broker manda un mensaje sobre ese topic Kafka lo distribuye a los consumidores suscritos.\nInstalar plugin Spring Boot en NetBeansEn esta entrada explicare como crear un aplicaci√≥n con el framework Spring Boot, usando el IDE NetBeans 9.\n","description":"","tags":null,"title":"Spring","uri":"/es/2-spring/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring","content":"Aqu√≠ tienes un listado de entradas sobre seguridad en Spring:\nSecurizando aplicaci√≥n de SpringBoot con KeyCloackBorrador. Pendiente de refactorizar y documentar en espa√±ol. Programa demostrando como crear una aplicaci√≥n en Spring Boot cuya seguridad es gestionada por KeyCloak.\nEl programa esta basado en este articulo https://medium.com/@ddezoysa/securing-spring-boot-rest-apis-with-keycloak-1d760b2004e\nSecurizando servicios REST con Oauth2 en SpringBootEn esta entrada explicare como podemos dotar de seguridad a servicios REST en Spring Boot. La aplicaci√≥n de ejemplo es la misma que la entrada de seguridad WEB anterior, as√≠ que el c√≥digo fuente lo ten√©is en: https://github.com/chuchip/OAuthServer. Explicando la tecnologia Oauth2 Como he dicho, utilizaremos el protocolo OAuth2, as√≠ que lo primero sera explicar como funciona este protocolo. OAuth2 tiene algunas variantes pero yo os voy a explicar la que utilizare en el programa y,¬†para ello, voy a poneros un ejemplo para que entend√°is lo que pretendemos hacer.\nSeguridad WEB en Spring BootEn esta entrada voy a explicar¬†como gestiona Spring la seguridad. No todo, por supuesto, que el tema de la seguridad dar√≠a para un libro muy gordote, pero al menos aprender a securizar una pagina web. En una pr√≥xima entrada hablare de como securizar un servicio REST. Como siempre, comienzo diciendo que el c√≥digo fuente de lo que explico lo ten√©is en mi pagina de GITHUB, en https://github.com/chuchip/OAuthServer. El programa esta realizado en Java, usando Spring Boot.\n","description":"","tags":null,"title":"Seguridad","uri":"/es/2-spring/2-seguridad/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Hugo","content":"En esta entrada explicare como crear una p√°gina¬†web gratuita¬†en GitHub\nEstas¬†p√°ginas deben ser est√°ticas¬†pero no hay limitaciones de ancho de banda, numero de ficheros y por supuesto no meter√°n publicidad en vuestra pagina web. Ademas, utilizara¬†https y podreis usar un dominio propio, si lo habeis comprado con anterioridad. Aclarar que un dominio se puede registrar por solo un euro al a√±o üòâ\nAdem√°s pod√©is usar Hugo como explicaba en una anterior entrada para hacer vuestro sitio web est√°tico, m√°s din√°mico.\nEso s√≠, para usar GitHub deb√©is tener al menos ciertas nociones basicas de Git pues se utilizara esta herramienta para subir los ficheros que formaran la pagina web.\nLo primero es crear nuestro proyecto en GitHub, para lo cual deberemos estar registrados.\nTen√©is muchos videos y manuales que explican como trabajar con GitHub, uno donde se explica incluso como crear una¬†p√°gina web lo podreis ver en devCode.la\nPor si os sirve de ayuda he creado un proyecto en https://github.com/chuchip/web que genera la pagina web https://chuchip.github.io/web/\nAclarar que una vez tengamos creado nuestro proyecto, deberemos hacer al menos un push. Es decir subir a GitHub al menos un fichero.\nAhora, para especificar que queremos tener una pagina web para nuestro proyecto, iremos a ‚ÄúSettings‚Äú\ny bajaremos hasta que veamos la secci√≥n: GitHub Pages\nAhora eligi√©remos el branch (es decir, la rama) donde estar√° nuestra pagina web. Para empezar simplemente usar el valor que aparece por defecto: master branch. El tema de ‚Äòramas‚Äô es ampliamente utilizado en GIT pero si solo queremos hacer una pagina web no necesitamos crear ninguna, por lo cual tendremos la rama ‚Äòmaster‚Äô (que sera la √∫nica que exista)\nAhora deberemos elegir que tema vamos a utilizar para nuestra pagina web. Aunque tenemos la opci√≥n de no utilizarlo como explico m√°s adelante, es obligatorio elegir un tema.\nTambien tenemos la opci√≥n de tener un dominio propio tipo www.midominio.com, el cual, logicamente, deberemos tener registrado previamente. Si no tenemos un dominio propio nuestra pagina web sera visible bajo el dominio: http://USUARIO.github.com/PROYECTO\nElegimos una de las formas de crear nuestra pagina web\nUtilizando un tema Sin tema para lo cual usaremos un fichero index.html. * Trabajando con un tema Si elegimos usar un tema lo que se mostrara sera el fichero readme.md que tengamos en nuestro proyecto, maquetado seg√∫n el tema elegido. En este fichero readme.md podremos usar el lenguaje de maquetado MarkDown con el que podremos poner imagenes, formatear nuestro texto con negritas, cursiva, etc,¬†poner enlaces, etc.\nPara poner enlaces a las imagenes se podra usar el formato: ./IMAGEN_A_ENLAZAR\n* Pagina web estatica Si hemos creado un fichero index.html, este fichero se utilizara como p√°gina inicial de nuestra p√°gina web.\nTodas las referencias a imagenes queramos poner deberan ser con el formato:\nhttps://raw.githubusercontent.com/USUARIO/web/master/IMAGEN_A_MOSTRAR\nEs decir si el usuario es ‚Äòchuchip‚Äò y el proyecto se llama ‚Äòweb‚Äô, todas las referencias a imagenes deberan ser con la URL:\nhttps://raw.githubusercontent.com/chuchip/web/master/\nPara las referencias a paginas web, CSS y ficheros javascript podremos usar el formato ‚Äú./PAGINA_XX.html‚Äù\n* Notas Aclarar que si tenemos el fichero index.html no utilizara el tema ni se vera el fichero readme.md\nOtra cosa a tener en cuenta que a GitHub le cuesta un poco (menos de un minuto), refrescar la pagina web desde el ultimo push\nY con esto ya tendreis vuestra pagina web alojada gratuitamente.\n¬°¬° Hasta otra!!\n","description":"","tags":["hugo","html","web"],"title":"Crear pagina web gratuita en GitHub","uri":"/2018/12/05/crear-pagina-web-gratuita-en-github/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†J2EE","content":"En esta ocasi√≥n continuo explicando la aplicaci√≥n CRUD, utilizando peticiones REST, con JavaEE.\nRecordar que ten√©is el c√≥digo fuente en https://github.com/chuchip/crudJavaEE\nEn la anterior entrada, que pod√©is ver en¬†en http://www.profesor-p.com/2018/10/06/aplicacion-rest-en-javaee/ hab√≠amos visto como consultar los lenguajes disponibles. Ahora vamos a ver como a√±adir nuevos, modificarlos y borrarlos.\nFuncion¬†create Como pod√©is observar lo primero es especificar el tipo de petici√≥n HTTP que se va¬†a aceptar,¬†en este caso POST. Especificamos que queremos tratar solo peticiones tipo JSON y ya declaramos la funci√≥n, que recibe un objeto tipo Locales\nDespu√©s comprobamos si ese Locale no exista en la base de datos , devolviendo una respuesta tipo CONFLICT en caso de que ya exista.\nEn caso contrario, insertamos en la base de datos con la funci√≥n create de la clase LocaleController, para despues devolver una respuesta tipo created (c√≥digo 201) con la direcci√≥n donde se podr√≠a consultar el registro reci√©n creado.\nY como siempre, una imagen mejor que cien palabras üòâ\n)\nEn este pantallazo pod√©is ver como se hace la petici√≥n POST, mandando en el cuerpo el objeto JSON, donde se especifica el c√≥digo y el nombre. La aplicaci√≥n devuelve un 201 como estado y¬†Location vemos que tenemos ‚Äúhttp://localhost:8080/restExample/api/locale/es-BO‚Äù que seria donde podemos consultar el registro reci√©n creado.\nFuncion update Con esta funci√≥n¬†se actualizara el registro mandado. Mirar como se solicita el c√≥digo del pa√≠s, ademas del objeto tipo locales . Esto es para comprobar que el objeto a modificar coincida con el c√≥digo del pa√≠s mandado. En caso contrario devolver√° una excepci√≥n tipo BadRequestException la cual devolver√° un c√≥digo¬†400 (Bad Request).\nSi todo va bien, devolvemos un c√≥digo 200 (OK).\nAqu√≠ ten√©is un pantallazo actualizando el registro anteriormente insertado.\nFuncion delete Esta funci√≥n sera tratada cuando la petici√≥n HTTP sea del tipo DELETE ya que as√≠ esta especificado en la etiqueta @DELETE y deber√° recibir un par√°metro¬†con el c√≥digo del pa√≠s a borrar. Si el pa√≠s en cuesti√≥n no existe devolver√° un c√≥digo error tipo NOT_FOUND y si es borrado correctamente, un 200 (OK).\nY con esto ya tendremos nuestra maravillosa aplicaci√≥n CRUD,¬†a trav√©s de peticiones REST.\nLa l√≥gica de acceso a la base de datos no es diferente a como se har√≠a en Spring o con cualquier otro framework, as√≠ que si ten√©is curiosidad de lo que hay detr√°s, pod√©is bajaros el c√≥digo fuente de mi p√°gina de GitHub.\n¬°¬° Hasta la pr√≥xima !!\n","description":"","tags":["glassfish","java","javaee","jpa","rest"],"title":"Aplicaci√≥n CRUD usando REST en JavaEE  (II)","uri":"/2018/10/07/aplicacion-rest-en-javaee-2a-parte/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular¬†\u003e¬†Aplicaci√≥n usando Java y Angular","content":"Aqu√≠ encontrareis los entradas describiendo como crear la parte frontend de esta aplicaci√≥n. Es decir lo creado en Angular\nFrontend en AngularEn anteriores entradas se creo la parte del servidor de nuestra aplicaci√≥n¬†.¬†Para la parte cliente o frontend usaremos Angular 6. El c√≥digo fuente del programa lo ten√©is, como siempre,¬†en mi p√°gina de GitHub. Lo primero sera instalar Angular, para ello tenemos¬†un excelente manual de¬†como hacerlo en la p√°gina web de Angular. B√°sicamente es instalar el servidor de aplicaciones Node.js. y su aplicaci√≥n incluida¬†npm (es un solo ejecutable) de¬†https://nodejs.\nAngular - InicializandoContinuando con la entrada donde instalaba Angular, seguimos desarrollando la aplicaci√≥n que detallo en esta p√°gina. Una vez tenemos creado el esqueleto de nuestro programa, con el comando ‚Äú**ng new‚Äù ,¬†** entraremos al directorio **src.¬†**En este directorio es donde realmente vamos a trabajar. Los dem√°s directorios son donde est√°n las librer√≠as y utilidades que nuestra aplicaci√≥n usara pero que son propias de Angular y nosotros no las tocaremos (al menos en este ejemplo).\nAngular ‚Äì RutasUna vez he explicado en la anterior entrada¬†como inicializa Angular la aplicaci√≥n, voy a explicar como hacer para que esta pueda aceptar par√°metros a trav√©s de la URL introducida en el navegador. B√°sicamente, lo que deseo hacer es que, suponiendo que nuestra aplicaci√≥n este corriendo en http://localhost:4200/ (es la direcci√≥n por defecto en la que escucha Node.js cuando lo lanzamos con el comando ng serve¬†), si vamos a la direcci√≥n http://localhost:4200/2018¬†nos muestre las ventas del ejercicio 2018.\n","description":"","tags":null,"title":"Frontend","uri":"/es/4-angular/aplicacion/frontend/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"Est√° pagina web esta creada con HUGO y alojada en GitHub gratuitamente. Aq√∫i teneis algun articulo sobre como crear paginas web est√°ticas generadas din√°micamente.\nGenerar paginas Web est√°ticas din√°micamenteVamos a hablar de Hugo. Este un software¬†permite crear sitios web est√°ticos pero trabajando casi como si fueran din√°micos. Para ello podremos usar diferentes plantillas que configuraremos, para luego a√±adir entradas y contenido din√°mico f√°cilmente.\nCrear pagina web gratuita en GitHubEn esta entrada explicare como crear una p√°gina¬†web gratuita¬†en GitHub\nEstas¬†p√°ginas deben ser est√°ticas¬†pero no hay limitaciones de ancho de banda, numero de ficheros y por supuesto no meter√°n publicidad en vuestra pagina web. Ademas, utilizara¬†https y podreis usar un dominio propio, si lo habeis comprado con anterioridad. Aclarar que un dominio se puede registrar por solo un euro al a√±o üòâ\n","description":"","tags":null,"title":"Hugo","uri":"/es/3-hugo/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular","content":"En esta ocasi√≥n os traigo un programa realizado en Angular, el cual a trav√©s de peticiones REST, da de alta, modifica, borra¬†y consulta los diferentes pa√≠ses disponibles en una base de datos. Lo que se viene diciendo una aplicacion CRUD.\nPor supuesto el protocolo para las comunicaciones es JSON.\nEl c√≥digo fuente lo ten√©is en: https://github.com/chuchip/crud-rest-angular\nEste programa es el frontend del realizado en JavaEE, y que explico como funciona en las entradas: http://www.profesor-p.com/2018/10/06/aplicacion-rest-en-javaee/ y¬†http://www.profesor-p.com/2018/10/07/aplicacion-rest-en-javaee-2a-parte/\nEs decir, este programa realizara sera el cliente¬†que correr√° en el navegador de los usuarios y el anterior programa estar√° corriendo en un servidor y tendr√° acceso a la base de datos correspondiente, para actualizarla seg√∫n las peticiones REST realizadas por el cliente.\nEsto es un pantallazo de como queda en modo consulta.\nY este otro, un pantallazo del alta:\nOs invito a que ech√©is un vistazo al programa, sobre todo al fichero datosserver.service.ts que es donde se se hacen las diferentes peticiones GET, POST, PUT y DELETE para interactuar con el servidor .\nSi veo inter√©s ya explicare con detalle como funciona.\nEspero vuestros comentarios y sugerencias.\n¬°¬° Hasta pronto!!\n","description":"","tags":["angular","frontend","json","rest"],"title":"Aplicaci√≥n CRUD en Angular","uri":"/2018/10/08/aplicacion-crud-en-angular/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring","content":"Aunque ya no se utiliza tanto aqu√≠ encontraras art√≠culos sobre Spring MVC.\nEjemplo aplicaci√≥n MVC con Spring Boot usando NetBeans 9En una entrada anterior explique como instalar NetBeans 9, a√±adiendole el plugin para usar Spring Boot. Ahora vamos a crear nuestro primer proyecto en este entorno. Pulsaremos New Project, lo cual nos mostrara una pantalla como la siguiente. y en el campo Filter pondremos _spring,¬†_ para despu√©s eligir Spring Boot Inititilizr project. Pulsaremos Next y nos pedir√°¬†una serie de datos sobre¬†nuestro proyecto. Para este ejemplo podemos dejar los campos como aparecen por defecto.\n","description":"","tags":null,"title":"MVC","uri":"/es/2-spring/3-mvc/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring","content":"Entradas sobre como acceder a bases de datos, con JPA y JDBC\nLambdas en JDBC DataEn una entrada anterior, puse un ejemplo de como usar expresiones Lambas, como me parece que es un tema interesante, este de la programaci√≥n funcional, voy a insistir en este tema. Una cosa¬†muy com√∫n en Java es¬†tener que pesarle como argumento a una funci√≥n externa, una objeto que implemente una funci√≥n donde nosotros pondremos el c√≥digo a ejecutar en nuestra¬†aplicaci√≥n. Un ejemplo practico es en el uso de¬†la clase¬†JdbcOperations, que es utilizada por Spring para poder realizar operaciones JDBC, la cual tiene la funci√≥n:¬†T¬†query(java.\nUsar QBE en Spring DataA menudo, cuando arranca nuestra aplicaci√≥n, tenemos que tener ciertos registros en algunas tablas de diccionarios. Por ejemplo, en la tabla ‚Äòpaises‚Äô puede que debamos tener cargados los pa√≠ses del mundo. O en la tabla ‚Äòroles‚Äô, debemos tener definidos una serie de roles. Una de las maneras de cargar esos datos es definiendo una rutina en el programa, la cual se ejecutara al inicio y que insertara esos registros necesarios. El problema que nos podemos encontrar es que entonces, debemos borrar todos los registros y luego volverlos a insertar para no tener registros duplicados.\nOptimizando relaciones entre entidades en HibernateEn esta entrada, siguiendo el proyecto de ejemplo que teneis en¬†https://github.com/chuchip/jpajoins explicando como optimizar¬†las consultas a la base de datos usando JPA. Se ver√°n diferentes tipos de consultas, explicando como realizar uniones entre tablas de modo perezoso (lazy) o agresivo (eager). Se unir√°n tablas por un solo campo, por varios e incluso por uno pero a√±adiendo una condici√≥n est√°tica. EL proyecto de ejemplo esta desarrollado en Spring Boot con Hibernate, usando como base de datos H2.\nAccediendo facilmente a los datos con Spring Rest DataSpring Boot ofrece un fant√°stico soporte para acceder a los datos con JPA a trav√©s de sus interfaces, del tipo Repository. Si a esto le a√±adimos la facilidad con que se crean servicios REST, como explicaba en la entrada [http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/][2] podremos hacer una aplicaci√≥n ofreciendo una API para acceder a nuestra base de datos preferida muy facilmente. Pero si queremos implementar HATEOAS en nuestro proyecto o si hay muchos criterios sobre los que debemos acceder a los datos, deberemos escribir bastante c√≥digo.\nQuerys avanzadas con JPA en Spring BootHay veces en que las campos sobre los que restringir una consulta pueden variar en tiempo de ejecuci√≥n. En ese caso si queremos usar JPA no podemos usar una sentencia @Query definida en nuestro repositorio pues no sabemos los campos sobre los que se aplicaran condiciones en la consulta. Adem√°s es bastante com√∫n que el usuario pueda elegir el criterio de b√∫squeda sobre un campo, deseando que el valor de un campo deba ser igual, mayor o menor, respecto al valor introducido .\nJPA + Hibernate en SpringEn un entrada anterior, explique como crear nuestra conexi√≥n a la base de datos, usando JNDI. En esta entrada explicare como usar esa conexi√≥n con JPA. Recordar que el c√≥digo fuente de de este ejemplo esta en: https://github.com/chuchip/jdbc_jpa_tomcat Importante recalcar que este ejemplo solo funciona con Java 1.8 o superior. Lo primero explicar un poco de que va esto de JPA.¬†JPA son las siglas de¬†Java Persistence API. Es decir la API de persistencia en Java.\nJPA con Lombok, simplificando.En un [entrada anterior][1], explique que para usar JPA hay que tener nuestros objetos POJO definidos .¬†En esta entrada hablare de como mejorar la la definicion de nuestro objeto POJO, con la libreria Lombok. Recordar que el c√≥digo fuente de de este ejemplo esta en: https://github.com/chuchip/jdbc_jpa_tomcat Anteriormente teniamos definido nuestro objeto de esta manera: @Entity @Table(name = \"usuario\", uniqueConstraints = { @UniqueConstraint(columnNames = {\"login\"})}) public class Usuario implements Serializable { @Id String login; @Column String nombre; public Usuario() { } public String getLogin() { return login; } public void setLogin(String login) { this.\nAcceso a Base de Datos con Spring Data JDBCEn el anterior articulo explicaba como crear la conexion a la base de datos en un servidor de aplicaciones Tomcat . En este articulo explicare como acceder a esos datos a traves del paquete JDBC de Spring Data JDBC El c√≥digo fuente de este ejemplo esta en: https://github.com/chuchip/jdbc_jpa_tomcat Creando nuestro POJO y Repositorio Ahora que ya tenemos nuestro acceso a la base de datos configurado y disponible, vamos a utilizarlo (por eso de que no se aburra üòâ )\n","description":"","tags":null,"title":"Database","uri":"/es/2-spring/4-database/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"Art√≠culos diversos sobre el framework Angular\nCurso de Angular 6En esta p√°gina ir√© poniendo las sucesivas entradas donde intentare dar un curso b√°sico sobre Angular 6 En el curso se desarrollara una aplicaci√≥n que usando peticiones RESTFUL, realizara una consulta mostrando un hist√≥rico de ventas. En la aplicaci√≥n se usara Boostrap y se explicara como utilizar rultas. La aplicaci√≥n backend, en el servidor, esta hecho en Java, usando Spring Framework,¬†y se puede ver en su desarrollo en la pagina: http://www.\nAplicaci√≥n usando Java y AngularA continuaci√≥n detallo las entradas donde voy explicando, paso a paso, como crear un aplicaci√≥n, que es una migraci√≥n de una consulta realizada en el ERP Anjelica, el cual es software libre .¬†Esta es la pantalla original de la aplicaci√≥n en Anjelica. Esta aplicaci√≥n es una consulta donde la parte del servidor se realiza en Java, usando Spring como Framework y la parte del cliente se realiza en Angular. La comunicaci√≥n entre ambas partes se realiza con servicios REST, usando JSON.\nAplicaci√≥n CRUD en AngularEn esta ocasi√≥n os traigo un programa realizado en Angular, el cual a trav√©s de peticiones REST, da de alta, modifica, borra¬†y consulta los diferentes pa√≠ses disponibles en una base de datos. Lo que se viene diciendo una aplicacion CRUD. Por supuesto el protocolo para las comunicaciones es JSON. El c√≥digo fuente lo ten√©is en: https://github.com/chuchip/crud-rest-angular Este programa es el frontend del realizado en JavaEE, y que explico como funciona en las entradas: http://www.\nAngular ‚Äì Hablando espa√±olAngular si no se le dice lo contrario, es ingles del bueno. Las fechas las pondr√° en su formato de mes/dia/a√±o . Los n√∫meros ser√°n con las comas con separadores de miles y los decimales con puntos. Vamos, muy ingles todo. El problema es que no todo el mundo es ingles (aunque les pene a los ingleses ;- )) . As√≠ que en esta entrada voy a explicar como hacer que Angular se nos vuelva espa√±ol.\nAngular 6 ‚Äì A√±adir Bootstrap 4 con JQueryRecordar lo primero que para utilizar toda la potencia de BootStrap, necesitamos tener instaladas las librerias de¬†JQuery y Popper¬†Hay varias maneras de¬†instalar estas librer√≠as. Localmente usando npm Una vez estemos situados el directorio principal del proyecto, desde tu terminal preferido ejecutar las instrucciones siguientes: Esto nos instalara los archivos necesarios bajo el directorio¬†**node-modules.¬†** Ahora debemos incluir el fichero de estilos (css) de BootStrap y las librer√≠as JavaScript de BootStrap, JQuery y Pooper.\n","description":"","tags":null,"title":"Angular","uri":"/es/4-angular/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring","content":"Entradas relacionas con el desarrollo de aplicaciones Spring en la nube.\nSpring Cloud Gateway. Redirigiendo peticiones Reactivamente.Hace tiempo escrib√≠ un articulo sobre como realizar una pasarela o gateway para redirigir peticiones utilizando Zuul. Sin embargo, Zuul ya no esta aconsejado por la gente de Pivotal, que como sabr√©is es la empresa detr√°s de Spring. Para sustituirlo han creado Spring Cloud Gateway. Principalmente, la mayor ventaja de este este software es que es reactivo. Es decir, utiliza las nuevas librer√≠as de Webflux de Spring para que las llamadas no sean bloqueantes.\nMicroservicios distribuidos con EurekaEn esta clase hablare de como crear microservicios distribuidos en Spring Boot utilizando las facilidades que nos da el paquete Spring Cloud NetFlix. Cualquier microservicio debe poder localizar las diferentes instancias de otro servicio del que dependa sin tener sus direcciones definidas en el c√≥digo. En el caso de que un microservicio deba acceder a otro lo ideal seria que de alguna manera pudiera saber en que direcciones esta las instancias de ese otro microservicio funcionando, pues lo m√°s com√∫n es que se levanten diferentes instancias dependiendo de la carga.\nServidor configuraciones usando Spring CloudEn esta ocasi√≥n vamos a usar el paquete Spring Cloud Config para poder tener configuraciones remotas para nuestras aplicaciones. La idea es que nuestro programa o programas puedan ir a buscar sus par√°metros de configuraci√≥n a un lugar externo, de tal manera que nuestra aplicaci√≥n sea f√°cilmente parametrizable e incluso se puedan cambiar sus configuraciones en caliente. Esto se utiliza ampliamente en microservicios pues una mismo servicio o aplicaci√≥n puede estar lanzada muchas veces en diferentes contenedores y es interesante tener un lugar central desde donde se puedan aplicar las configuraciones a estos servicios.\n‚Å†‚Å†‚Å†\n","description":"","tags":null,"title":"Cloud","uri":"/es/2-spring/5-cloud/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"Enlaces disponibles:\nConectando a una base de datos usando JNDI y Spring en TomcatEn este ejemplo veremos como conecta a Postgresql usando JPA + Hibernate y Spring JDBC. Para ello uso como servidor de aplicaciones Tomcat. La configuraci√≥n esta realizada con anotaciones y XML y utilizo el pool de conexiones de Tomcat recogido a trav√©s de JNDI, para que la aplicaci√≥n no deba saber realmente ni donde se conecta.\n","description":"","tags":null,"title":"DBA","uri":"/es/5-dba/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring","content":"Entradas sobre el paquete WebFlow de Spring. Actualmente esta en un poco en desuso pero ha sido ampliamente utilizado en entornos empresariales.\nSpring WebFlow con JSP ‚Äì Configuraci√≥nVoy a intentar explicar como funciona Spring WebFlow y para ello, como siempre, lo har√© desarrollando un programa que pod√©is descargar de¬†https://github.com/chuchip/webflowExample El programa simulara que entras a la p√°gina de un banco donde puedes realizar una transferencia de tus cuentas personales a otra. Para ello, primero deber√°s identificarte y seg√∫n el usuario con el que te identifiques tendr√°s acceso a unas cuentas que a su vez disponen de un saldo establecido.\nSpring WebFlow con JSPEn el articulo anterior http://www.profesor-p.com/2018/10/29/spring-webflow-con-jsp-configuracion/ explicaba como configurar el programa para que Spring WebFlow funcionara. En este articulo explicare como hacer el flujo en si. La p√°gina principal del programa no esta dentro de ning√∫n flujo y sus peticiones son respondidas por Spring MVC, en la clase MyController, la cual podemos encontrar en el paquete profesorp.webflow.controller. Esta clase anotada con la etiqueta @Controller responde en la funci√≥n indice1 a las peticiones de los recursos ‚Äú/‚Äù e ‚Äúindex‚Äù\n‚Å†‚Å†‚Å†\n","description":"","tags":null,"title":"Webflow","uri":"/es/2-spring/6-webflow/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"Ejemplos usando java EE. (La competencia de Spring üòÑ )\nAplicaci√≥n CRUD usando REST en JavaEEExplicar√© como hacer una aplicaci√≥n CRUD, que sirva peticiones REST con el protocolo JSON, usando JavaEE y Glasfish como servidor de aplicaciones. En esta aplicaci√≥n actualizaremos y consultaremos una peque√±a tabla a trav√©s de diferentes peticiones REST.\nAplicaci√≥n CRUD usando REST en JavaEE (II)En esta ocasi√≥n continuo explicando la aplicaci√≥n CRUD, utilizando peticiones REST, con JavaEE.\nDesarrollando aplicaciones Java EE en NetBeans 9El reci√©n salido NetBeans 9, es un excelente IDE, con soporte para Java 10 y 11, y con otra serie de caracter√≠sticas muy interesantes. Sin embargo, por temas de licencias con Oracle que es el due√±o del antiguo NetBeans, solo tiene soporte para¬†Java Standard Edition, no pudiendo, en teor√≠a, hacer aplicaciones para Java EE.\n","description":"","tags":null,"title":"J2EE","uri":"/es/6-javaee/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring","content":"Explicaciones sobre el core de Spring\nPerfiles en Spring BootCuando se hacen aplicaciones empresariales, lo normal es que, como m√≠nimo, primero se desplieguen en un entorno de pruebas y despu√©s¬†en el entorno de producci√≥n. Cada entorno de pruebas tendr√° diferentes bases de datos, diferentes URLs y toda una serie de par√°metros espec√≠ficos, con el fin de que una aplicaci√≥n en desarrollo no acceda nunca a datos reales.\nAOT en SpringCreo que Aspect Oriented Programing (AOP) no es muy conocido. Spring lo usa mucho y, a menudo, cuando pones etiquetas en tu c√≥digo, Spring usar√° AOT. No quiero explicar que es AOP porque hay mucha documentaci√≥n al respecto. En este art√≠culo, quiero darte algunos ejemplos y casos en los que el uso de AOP podr√≠a mejorar tu c√≥digo. Quiero mostrarte una nueva herramienta para programar. Veamos si puedo hacerlo. En primer lugar, te estar√°s preguntando, ¬øpor qu√© deber√≠a usar AOP?\nLogging en Spring BootUna vez que tenemos nuestra fant√°stica aplicaci√≥n realizada con Spring lo normal es que queramos ver como se va comportando. Para ello, la manera m√°s f√°cil es escribir mensajes dentro de la aplicaci√≥n, explicando por que funciones entra, como se toman las decisiones y, en general, como se va comportando.\nCacheando resultados con Spring BootVamos a imaginar una aplicaci√≥n web, donde por cada petici√≥n recibida, debe leer ciertos datos de configuraci√≥n desde una base de datos. Esos datos no cambiaran normalmente pero nuestra aplicaci√≥n, en cada petici√≥n, debe conectarse, ejecutar las sentencias adecuadas para leer los datos, traerlos por la red, etc. Imaginemos, adem√°s, que la base de datos a la que nos conectamos esta saturada o la conexi√≥n de red que nos une a la base de datos es inestable.\nBeans avanzadosEn esta ocasi√≥n he cogido un proyecto de SimpleProgramming el cual tiene un video en Youtube donde explica como cargar Beans din√°micamente usando Spring (en Ingles). Imaginemos que tenemos un programa que dependiendo de unos par√°metros deba cargar un clase u otra, donde est√° definida la l√≥gica a seguir. Por supuesto podemos anidar condiciones e instanciar las clases debidas, pero eso tiene un problema y es que si ma√±ana debemos a√±adir una l√≥gica nueva, deberemos incluir una condici√≥n m√°s para cargar la nueva clase, y podr√≠amos introducir errores en el c√≥digo.\n‚Å†‚Å†‚Å†\n","description":"","tags":null,"title":"Base","uri":"/es/2-spring/7-base/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"Art√≠culos sobre el framework DJango . Porque no todo en la vida es Java ;-)\nAqu√≠ tienes un listado de los art√≠culos disponibles:\nCreando una aplicacion DJango con Python3 en EclipseRealmente para crear un proyecto con DJango no necesitamos ning√∫n IDE sin embargo siempre es m√°s c√≥modo usar uno que nos facilite el poder realizar debug , adem√°s de ofrecernos otras ventajas. Podr√≠amos usar PyCharm el cual crea un entorno autom√°ticamente pero en este tutorial vamos a explicar como usar Eclipse con el plugin PyDev. En esta p√°gina tienes los primeros pasos para crear un entorno para DJango pero yo voy a explicarlo para poder usarlo despu√©s con PyDev.\nAplicaci√≥n CRUD con DJango-REST.Partiendo del art√≠culo anterior, y usando el esqueleto del proyecto Eclipse creado, vamos a ver como hacer una peque√±a aplicaci√≥n CRUD con Django-Rest. El c√≥digo fuente esta disponible en https://github.com/chuchip/djangorestcrud Esta aplicaci√≥n nos servir√° para consultar, modificar, borrar o a√±adir los libros disponibles en una biblioteca. El modelo de datos con el vamos a trabajar ser√° el siguiente: title. Tipo: String. Titulo del libro. type. TIpo: String. Tipo libro (aventura, cient√≠fico,comic, etc.\n","description":"","tags":null,"title":"DJango","uri":"/es/7-django/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring","content":"Anotaciones sobre aplicaciones Restful en Spring\nLa clase RestTemplateEste ser√° el primero de una serie de entradas sobre la clase RestTemplate de Spring.\nCon los diferentes m√©todos de la clase se realizan peticiones HTTP f√°cilmente, produci√©ndose la serializaci√≥n y deserializaci√≥n de los objetos de una manera transparente. Es una gran alternativa dada por Spring sobre otras librer√≠as ya existentes en el mercado.\nLa Clase RestTemplate - 2En la anterior entrada vimos como lanzar una petici√≥n HTTP contra un servidor externo, pero al lanzarla surgieron algunas dudas. Dos ya fueron resueltas as√≠ que continuemos resolviendo las siguientes.\nLa Clase RestTemplate - 3Esta es la tercera y √∫ltima entrada sobre la clase RestTemplate.\nLa clase WebClientEn esta ocasi√≥n hablare de la clase WebClient de SpringBoot. El proyecto de ejemplo esta disponible en: https://github.com/chuchip/webClientExample Esta clase seria la equivalente a RestTemplate pero para realizar peticiones as√≠ncronas. Para poder usar esta clase debemos poner estas dependencias en nuestro fichero maven \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-webflux\u003c/artifactId\u003e \u003c/dependency\u003eEsto es as√≠ porque debemos usar WebFlux el cual esta disponible con la versi√≥n 5.0 de Spring. Esta versi√≥n de Spring requiere que usemos al menos Java 8.\nEstableciendo filtros en SpringEn esta entrada voy a hablar de como implementar filtros en Spring. Los filtros son de los que se pueden establecer cuando se recibe una petici√≥n HTTP. Es decir, suponiendo que tenemos un programa escuchando en unas URI, poder especificar que deseamos ejecutar algo antes de que las peticiones sea procesadas por el controlador. Esto es muy √∫til si queremos que todas las peticiones cumplan un requisito, por ejemplo incluir una cabecera especifica.\nUsando Zuul para redirigir peticiones RESTEn este articulo explicare como crear una pasarela para peticiones REST (una gateway) utilizando Zuul. Zuul es parte del paquete Spring Cloud NetFlix y permite redirigir peticiones REST, realizando diversos tipos de filtros. En casi cualquier proyecto donde haya microservicios, es deseable que todas las comunicaciones entre esos microservicios pasen por un lugar com√∫n, de tal manera que se registren las entradas y salidas, se pueda implementar seguridad o se puedan redirigir las peticiones dependiendo de diversos par√°metros.\nPersonalizar salidas de c√≥digos HTTP en Spring BootEn esta articulo os voy a explicar como devolver errores HTTP personalizados. Para ello crearemos un proyecto llamado httpErrorPersonalizado. Teneis el c√≥digo fuente de este proyecto en mi p√°gina de¬†GitHub Cuando realizamos una petici√≥n HTTP a un recurso en Spring Boot, es com√∫n que esa petici√≥n tenga que considerar la opci√≥n de devolver un error. Es el caso t√≠pico de que realizamos una petici√≥n RESTful para solicitar un registro, pero ese registro no existe.\n‚Å†‚Å†‚Å†\n","description":"","tags":null,"title":"Restful","uri":"/es/2-spring/8-restful/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†DJango","content":"Realmente para crear un proyecto con DJango no necesitamos ning√∫n IDE sin embargo siempre es m√°s c√≥modo usar uno que nos facilite el poder realizar debug , adem√°s de ofrecernos otras ventajas.\nPodr√≠amos usar PyCharm el cual crea un entorno autom√°ticamente pero en este tutorial vamos a explicar como usar Eclipse con el plugin PyDev.\nEn esta p√°gina tienes los primeros pasos para crear un entorno para DJango pero yo voy a explicarlo para poder usarlo despu√©s con PyDev. Aclarar que este este articulo el proyecto fue creado en una m√°quina con Windows 10.\nHay dos opciones para crear el proyecto. Usando un entorno de trabajo (enviroment) o sin usarlo. Si prefiere no usarlo pase al punto dos. En caso de querer usarlo sigue leyendo.\n1. Usando un entorno de trabajo. El usar un entorno de trabajo en Python es muy recomendable ya que nos evita problemas de dependencias. Podremos tener diferentes versiones de Python y de las librer√≠as usadas para cada entorno, de tal manera que si, por ejemplo, actualizamos la versi√≥n de Python en la m√°quina, los proyectos creados bajo un entorno dado, seguir√°n usando la versi√≥n de Python con las que originalmente se realizaron.\nEn nuestro caso vamos a crear un entorno de trabajo que incluya DJango y Django-Rest , para ello desde la l√≠nea de comandos (cmd) ejecutaremos lo siguiente:\nc:\\python\u003e python -m vvenv djangoenvdjangoenv ser√° el nombre del directorio donde se creara el entorno de trabajo. Para cambiar a este entorno ejecutaremos el comando djangoenv\\Scripts\\activate. Observaremos que ahora el prompt empieza por (djangoenv). Es decir deberemos ver algo parecido a esto: (djangoenv) C:\\Users\\...\nAhora instalaremos los paquetes de DJango y DJangoRest.\n(djangoenv) c:\\python\u003e pip install django djangorestframeworkListo, ya tenemos nuestro entorno de Python con los paquetes instalados. Lo podemos comprobar con el siguiente comando:\n(djangoenv) C:\\python\u003e pip list Package Version ------------------- ------- Django 2.2.5 djangorestframework 3.10.3 pip 19.0.3 pytz 2019.2 setuptools 40.8.0 sqlparse 0.3.0 (djangoenv) C:\\python\u003epython --version Python 3.7.4En el men√∫ Windows de Eclipse, escogeremos la opci√≥n Preferences para crear un nuevo perfil de Django. Para ello bajaremos a la rama Python Interpreter\nEn la nueva ventana que nos aparece erigiremos la opci√≥n Browse for python/pypy exe\nIremos al directorio donde hemos creado el entorno djangoenv , entrando a la carpeta Scripts para seleccionar el ejecutable python.\nComo nombre del interprete pondremos djangoenv.\nEn la siguiente pantalla dejaremos los valores como aparecen por defecto.\n2. Creando el proyecto DJango Cerraremos la ventana de preferencias y crearemos un nuevo proyecto del tipo ‚ÄúPyDev DDJango‚Äù\nElegiremos el nuevo interprete creado, pondremos un nombre al proyecto y daremos a Next:\nVolveremos a dar a Next ye n la ultima pantalla dejaremos como base de datos a usar sqlite3 y como versi√≥n de Django la 1.4 o superior. Es decir dejaremos los par√°metros como aparecen por defecto para despu√©s pulsar el bot√≥n Finish.\nAhora ya tenemos una instalaci√≥n b√°sica de DJango. Para probar si todo funciona bien vamos a ejecutarla.\nPara ello pulsaremos sobre el bot√≥n derecho del rat√≥n encima del proyecto y dentro del men√∫ DJango elegiremos la opci√≥n Custom Command\nEn la ventana que nos aparecer√° solicitando el comando a ejecutar escribiremos runserver.\nEn la consola podremos ver que se nos ha levantado un servidor web, escuchando en el puerto 8000 de nuestra m√°quina (en localhost).\nDjango version 2.2.5, using settings 'djangoresttest.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CTRL-BREAK.Podemos ver que efectivamente el servidor esta funcionando si usando un navegador vamos a la direcci√≥n:\nhttp://127.0.0.1:8000/ veremos la siguiente pantalla:\nLas siguientes veces que deseemos ejecutar el servidor de DJango simplemente iremos al men√∫ Run de eclipse y elegiremos la nueva configuraci√≥n que se nos habr√° creado.\nY esto es todo por ahora. En un pr√≥ximo articulo seguir√© creando el servidor Rest usando Django.\n","description":"","tags":["python - eclipse - django - django-rest"],"title":"Creando una aplicacion DJango con Python3 en Eclipse","uri":"/es/7-django/djangoeneclipse/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Restful","content":"Este ser√° el primero de una serie de entradas sobre la clase RestTemplate de Spring.\nCon los diferentes m√©todos de la clase se realizan peticiones HTTP f√°cilmente, produci√©ndose la serializaci√≥n y deserializaci√≥n de los objetos de una manera transparente. Es una gran alternativa dada por Spring sobre otras librer√≠as ya existentes en el mercado.\nComo siempre ten√©is el proyecto sobre el que esta basado este art√≠culo en: https://github.com/chuchip/RestTemplateExample\nRestTemplate esta en el core de Spring por lo cual no es necesario instalar ninguna dependencia. Lo puedes encontrar en el paquete org.springframework.web.client.RestTemplate\nPara hacer una petici√≥n a un recurso web con RestTemplate simplemente se escribir√≠a este c√≥digo:\nResponseEntity\u003cCustomer\u003e responseEntity= new RestTemplate().getForEntity(URL, Customer.class);Donde URLseria la direcci√≥n donde queremos realizar la petici√≥n (por ejemplo) y Customer es el objeto que esperamos que nos vaya a devolver esa petici√≥n. La petici√≥n seria del tipo GET ya que hemos utilizado la funci√≥n getForEntity.\nEn esa llamada se recibe un objeto ResponseEntity donde estar√° embebido el objeto del tipo indicado, pero si solo nos interesa recoger el cuerpo del mensaje podr√≠amos utilizar la funci√≥n getForObject, sin embargo el recoger la clase ResponseEntity nos ofrece una informaci√≥n que a menudo es necesaria.\nDe esta clase podremos utilizar, entre otras, las siguientes funciones:\ngetStatusCode()\nEsta funci√≥n nos permitir√° saber el estado HTTP retornado por la petici√≥n. Devuelve un tipo HttpStatus\nAs√≠ para saber si el servidor devolvi√≥ un OK podremos poner\nif (responseEntity.getStatusCode()==HttpStatus.OK) { // Todo fue bien .... } getHeaders()\nDevuelve un objeto HttpHeaders en el cual tendremos las cabeceras devueltas por el servidor.\ngetBody()\nDevuelve una instancia de la clase devuelto por el servidor. En nuestro ejemplo anterior devolver√≠a un objeto del tipo Customer\nSupongamos que nuestro servidor esperamos que nos devuelva los datos de un cliente. La clase devuelta seria esta:\npublic class Customer { private String name; private String address; }Si todo va bien nos devolver√° un c√≥digo HTTP 200 (OK)\nPara hacer la petici√≥n utilizaremos el siguiente c√≥digo:\npublic Customer getCliente() { ResponseEntity\u003cCustomer\u003e responseEntity = restTemplate.getForEntity(\"http://localhost:8080\", Customer.class); if (responseEntity.getStatusCode()==HttpStatus.OK) return responseEntity.getBody(); throw new RuntimeException(\"The server didn't respond OK\"); }Como se ve esta funci√≥n devolver√≠a el objeto Customer si el servidor devuelve un OK o lanzar√≠a una excepci√≥n en el caso contrario.\nF√°cil, ¬ø verdad ?. Pero, ¬ø no os parece que falta algo ?. Haceros las siguientes preguntas:\n¬øC√≥mo puedo capturar el mensaje de error devuelto por el servidor si el c√≥digo devuelto no es OK? ¬øQu√© pasa si la llamada falla porque el servidor esta ca√≠do? Y si el servidor devuelve un OK, pero lo devuelto no es un objeto del tipo Customer, ¬ø qu√© pasara?. ¬øC√≥mo podr√≠a tener un registro de lo enviado y recibido por el servidor ? ¬øMe devolver√° el objeto tipo Customer en el cuerpo de la respuesta aunque no sea OK el estado de esta? Bueno, pues no todas son tan obvias como podr√≠a parecer. Voy a intentar responder a ellas.\n1. ¬øC√≥mo puedo capturar el mensaje de error devuelto por el servidor si el c√≥digo devuelto no es OK? En la aplicaci√≥n de ejemplo si realizamos esta llamada.\ncurl -s http:/localhost:8080/NULLEl servidor lanzara una excepci√≥n con el el c√≥digo HTTP BAD_REQUEST y obtendremos la siguiente salida:\n{\"timestamp\":\"2019-08-03T04:45:54.458+0000\",\"status\":400,\"error\":\"Bad Request\",\"message\":\"....\"\"path\":\"/\"}Si Spring intentara meter esa variable en el objeto Customer no ver√≠amos nada pues nosotros no tenemos definida ni la variable timestamp ni status ni error. As√≠ que, ¬ø como conseguir capturar ese mensaje de error para ver que ha pasado ?.\nHay dos opciones:\n1.1 Capturar la excepci√≥n del tipo HttpClientErrorException Este ser√≠a el m√©todo f√°cil. Para ello simplemente deberemos meter entre un try/catch la llamada a la funci√≥n de RestTemplate.\ntry { responseEntity = new RestTemplate().getForEntity(localUrl, String.class); } catch (HttpClientErrorException k1) { return \"Http code is not 2XX. The server responded: \" + k1.getStatusCode() + \" Cause: \"+ k1.getResponseBodyAsString(); } catch (RestClientException k) { return \"The server didn't respond: \" + k.getMessage(); }Ahora si la respuesta no es del tipo 2XX la llamada lanzara una excepci√≥n tipo HttpClientErrorException y a trav√©s de ella podremos capturar el mensaje y el c√≥digo HTTP, devuelto, as√≠ como las correspondientes cabeceras.\n1.1.1 Pr√°ctica Si realizamos una llamada como esta:\ncurl -s http:/localhost:8080/ERROREl servidor llamado por el programa devolvera una c√≥digo HTTP 400 (BAD REQUEST) y el siguiente body {\"name\":\"Customer ERROR\",\"address\":\"Address Customer ERROR\"} .\nAl ser un c√≥digo HTTP que no esta en el rango de 200-300 (2XX) se lanzara la excepci√≥n HttpClientErrorException y obtendr√≠amos la siguiente respuesta:\nError al realizar petici√≥n HTTP. Codigo retornado: 400 BAD_REQUEST Causa: {\"name\":\"Customer ERROR\",\"address\":\"Address Customer ERROR\"}Si realizamos la llamada:\ncurl -s http:/localhost:8080/DOWNSe intentara realizar una petici√≥n al puerto 1111, donde no habr√° nada escuchando y por lo tanto se lanzara la excepci√≥n RestClientException, obteniendo esta respuesta:\nServidor no respondio: I/O error on GET request for \"http://localhost:1111\": Connection refused: connect; nested exception is java.net.ConnectException: Connection refused: connect1.2 Establecer un manejador de Errores personalizados Con este m√©todo tendremos un manera para decidir nosotros que consideramos un error y realizar acciones sobre √©l. Adem√°s en el caso de no utilizar llamadas que devuelvan un objeto ResponseEntity sino el objeto en si podremos acceder a la cabeceras, cuerpo de mensaje, y c√≥digo devuelto de una manera m√°s personalizada.\nSi llamamos a la funci√≥n setErrorHandler de la clase RestTemplate con a objeto que implemente el interface ResponseErrorHandler podremos capturar la salida de error.\nAs√≠ en el proyecto al crear la clase RestTemplate que se utilizara tenemos este c√≥digo:\n@Bean public RestTemplate createRestTemplate() { RestTemplate restTemplate = new RestTemplate();\trestTemplate.setErrorHandler(getErrorHandler()); return restTemplate; } @Bean public CustomResponseErrorHandler getErrorHandler() { return new CustomResponseErrorHandler(); }La clase CustomResponseErrorHandler que implementa el interface ResponseErrorHandler es la siguiente:\npublic class CustomResponseErrorHandler implements ResponseErrorHandler { StringBuilder body;\t@Override public void handleError(ClientHttpResponse response) throws IOException {\tif (body==null) getBody(response);\t} @Override public boolean hasError(ClientHttpResponse response) throws IOException {\treturn response.getStatusCode() != HttpStatus.OK; } public StringBuilder getBody(ClientHttpResponse response) throws IOException {\tlog.trace(\"Leido body de respuesta\"); body=new StringBuilder(); BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(response.getBody(), \"UTF-8\")); String line = bufferedReader.readLine(); while (line != null) { body.append(line); body.append('\\n'); line = bufferedReader.readLine(); }\treturn body; } public String getBody() { if (body==null) return null; return body.toString(); }\tpublic void reset() {\tbody=null; } }Este interface nos obliga a tener las funciones hasError y handleError con la primera definiremos cuando consideramos nosotros que ha habido un error. En el ejemplo se define que si el c√≥digo HTTP es diferente de OK considere que hay un error.\nSi la funci√≥n hasError devuelve true, la funci√≥n handleError ser√° llamada y ah√≠ es donde podremos capturar la respuesta del servidor y tratarla. En el ejemplo simplemente la guardamos en la variable msgError .\nAhora, podremos capturar el mensaje devuelto por el servidor con este c√≥digo:\nif (!httpStatus.is2xxSuccessful()) mensajeError=customError.getMsgError();Es importante destacar que si el servidor NO devuelve un c√≥digo HTTP del tipo 2XX el cuerpo de la respuesta del ser√° siempre igual a NULL, ResponseEntity aunque el servidor haya devuelto algo.\n1.2.1 Pr√°ctica En el proyecto de ejemplo, cuando realizamos una petici√≥n a:\ncurl -s http:/localhost:8080/custom/ERRORSe ejecutara el c√≥digo de la funci√≥n peticionGetPersonalizada\npublic String peticionGetPersonalizada(String idCliente) { String localUrl = url; if (idCliente != null) { localUrl += \"?path=\" + idCliente; } if (\"DOWN\".equals(idCliente)) { localUrl = \"http://localhost:1111\"; } ResponseEntity\u003cString\u003e responseEntity = null; try { responseEntity = restTemplate.getForEntity(localUrl, String.class); } catch (RestClientException k) { return \"Custom RestTemplate. The server didn't respond: \" + k.getMessage(); } HttpStatus httpStatus = responseEntity.getStatusCode(); String mensaje = \"Http Status: \" + httpStatus + \" -\u003e \"; if (httpStatus.is2xxSuccessful()) { mensaje += \"Body: \" + responseEntity.getBody(); } else { mensaje += \" Error message: \"+ customError.getBody(); } return mensaje; }Por lo tanto se obtendr√° esta salida, ya que el c√≥digo HTTP es 400 y se por lo tanto se el cuerpo de la respuesta de la clase customError\nHttp Status: 400 BAD_REQUEST -\u003e Error message: {\"name\":\"Customer ERROR\",\"address\":\"Address Customer ERROR\"}En nuestro ejemplo si pasamos el par√°metro CREATED, el servidor devolver√° un objeto Customer con el c√≥digo HTTP CREATED . Como en la clase CustomResponseErrorHandler se ha definido que cualquier c√≥digo HTTP diferente de OK ser√° considerada un error, el cuerpo del mensaje ser√° NULL ya que se ha consumido el StreamReader en la clase getBody de la clase CustomResponseErrorHandler\n\u003e curl -s http:/localhost:8080/custom/CREATED Http Status: 201 CREATED -\u003e Body: null Nota En el siguiente articulo explicare como se puede leer el cuerpo del mensaje y no consumirlo para que la llamada a getBody del ResponseEntity no devuelva NULL.\n2. ¬øQu√© pasa si la llamada falla porque el servidor esta ca√≠do? En ese caso, tengamos o no tengamos establecido un handleError la llamada a la funci√≥n getForEntity lanzara una excepci√≥n del tipo RestClientException. En esta clase podremos conseguir informaci√≥n sobre el error generado.\ncurl -s http:/localhost:8080/DOWN The server didn't respond: I/O error on GET request for \"http://localhost:1111\": Connection refused: connect; nested exception is java.net.ConnectException: Connection refused: connectEn una pr√≥xima entrada seguir√© hablando de los siguientes supuestos. ¬°¬°Hasta pronto!!\n","description":"","tags":["java","rest","spring"],"title":"La clase RestTemplate","uri":"/2019/08/03/trabajando-con-la-clase-resttemplate/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Webflow","content":"Voy a intentar explicar como funciona Spring WebFlow y para ello, como siempre, lo har√© desarrollando un programa que pod√©is descargar de¬†https://github.com/chuchip/webflowExample\nEl programa simulara que entras a la p√°gina de un banco donde puedes realizar una transferencia de tus cuentas personales a otra. Para ello, primero deber√°s identificarte y seg√∫n el usuario con el que te identifiques tendr√°s acceso a unas cuentas que a su vez disponen de un saldo establecido. Para realizar todo esto utilizo H2 como base de datos y la autentificaci√≥n se realiza con el paquete de seguridad de Spring, utilizando JDBC . Por hacer la p√°gina mas funcional utilizo Bootstrap y JQuery.\nEl programa esta realizado para que funcione bajo Tomcat, en el contexto: webflow. Por lo que deberemos ir a la direcci√≥n http://localhost:8080/webflow¬†para probar nuestra aplicaci√≥n:\nEn esta imagen se puede ver la definici√≥n del flujo de trabajo.\nSpring WebFlow es un paquete con el cual podemos definir el flujo de nuestra aplicaci√≥n. Es decir, definimos las acciones a realizar cuando se pulse un enlace, se cumpla cierta condici√≥n, etc. Estos flujos son definidos en ficheros XML, de tal manera que ah√≠ es donde definimos que de la PAGINA_X, al pulsar el BOTON1, vaya a la PAGINA_XY, siempre y cuando¬†la CONDICION_Z se cumpla. Esto nos permite separar la l√≥gica del programa de las vistas (los ficheros JSP), ademas de ser m√°s f√°cil el reutilizar c√≥digo.\n‚Äì Estructura\nLa estructura del programa es la que se ve en la¬†imagen siguiente:\nDentro del directorio WEB-INF esta la carpeta flows, que a su vez tiene la carpeta traspaso y time donde definimos los dos flujos de trabajo que se usan en la aplicaci√≥n. Observar que los ficheros xml con la definici√≥n del flujo de trabajo tambi√©n se aloja en las mismas carpetas donde estan los JSP de su flujo. Es decir el flujo de trabajo ‚Äútraspaso‚Äù se define en el fichero ‚Äútraspaso.xml‚Äù y utiliza los ficheros: cuentaOrigen.jsp, importe.jsp, confirmar.jsp, _include.jsp y _navegador.jsp.\nDentro del directorio WEB-INF tambi√©n se alojan las carpetas css y img donde se guardan respectivamente las plantillas css y las im√°genes de la aplicaci√≥n.**¬†**\nConfigurando la Base de Datos y Persistencia Empezare mostrando las tablas usadas en la aplicaci√≥n:\nLa tabla clientes, cuentas y cuentas_clientes son usadas por la l√≥gica del programa, mientras que users y user_roles son usadas por el modulo de seguridad de spring.\nLa persistencia esta definida en la clase JpaConfig. Pod√©is ver una explicaci√≥n de esta clase en la parte de la configuraci√≥n de JPA de esta entrada: http://www.profesor-p.com/2018/09/03/aplicacion-en-spring-rest-y-angular-2-parte/#jpa\nDependencias Necesitaremos tener el paquete de JPA, JDBC,¬†Hibernate, soporte de transaciones y por supuesto de H2.\nConfigurando MVC y¬†WEB-FLOW En ella se configura¬†la parte MVC¬†de la aplicaci√≥n. As√≠ en la funci√≥n addResourceHandlers especifico que los recursos de las peticiones¬†a¬†‚Äúwebjars‚Äù deber√°n ser buscadas en el directorio /webjars y que los recursos de las peticiones a resources deber√°n ser buscadas en el directorio /WEB-INF/resources/. Es decir que cuando vayamos a http://localhost:8080/webflow/resources/XX deber√° traer el fichero¬†/WEB-INF/resources/XX\nLa funci√≥n viewResolver establece que se usara la JSTL (que no es sino una extensi√≥n de JSP), especificando en que directorio y que extensiones debe resolver.\nLas funciones FlowHandlerMapping y FlowHandlerAdapter especificaran los identificadores o registros de webflow y sus correspondiente ejecutores. Ahora explicare que es eso üòâ\nEn esta clase configuramos webflow como tal, para ello lo primero es extender de la clase AbstractFlowConfiguration y definir las funciones que detallo a continuaci√≥n:\nEn esta funci√≥n se declaran los diferentes identificadores de los flujos a usar.As√≠ tenemos que el identificador ‚Äútraspaso‚Äù estar√° definido en el directorio ‚Äú/WEB-INF/flows/traspaso/traspaso.xml‚Äú. Esto lo que significa es que cuando vayamos a la direcci√≥n: http://localhost:8080/webflow/traspaso entraremos en el flujo que tenemos definido en el fichero indicado. A su vez, cuando vayamos a http://localhost:8080/webflow/traspaso_time entraremos al flujo declarado en ‚Äú/WEB-INF/flows/traspaso/time/traspaso_time.xml‚Äú.\nEn este caso yo defino individualmente los dos flujos, pero se pueden utilizar comodines para que Spring busque dentro de un directorio todos los ficheros que cumplan ciertos criterios. As√≠, la sentencia: .addFlowLocationPattern(\u003cspan class=\"hl-string\"\u003e\"/WEB-INF/flows/**/*-flow.xml\"\u003c/span\u003e)especificar√≠a que a√±adiera todos los flujos que encontrara en el directorio /WEB-INF/flows¬†cuyo nombre terminara en ‚Äúflow.xml‚Äù. Los identificadores en este caso serian los nombres de los ficheros sin la extensi√≥n xml. Es decir si tenemos el fichero: \u003cspan class=\"hl-string\"\u003e/WEB-INF/flows/consulta-flow.xml\u003c/span\u003e el identificador seria ‚Äúconsulta-flow‚Äù\nLa siguiente funci√≥n simplemente llama a la anterior para especificar los ejecutores de los registros¬†anteriormente definidos.\nAclarar que el trabajo del F**lowExecutor** es crear y ejecutar los flujos de trabajo que anteriormente hayamos definido en los registros.\nLas siguientes funciones unen las vistas (ficheros JSP) con el paquete webflow. Como se puede observar crea dos objetos en los cuales se definen las uniones entre el¬†paquete MVC de Spring y el paquete WebFlow. Esto es as√≠ porque el paquete WebFlow tambi√©n funciona con otros MVC como¬†JavaServer Faces de JavaEE\nDependencias Ademas del paquete JSTL, tambi√©n usamos el paquete spring-security-taglibs que es una extensi√≥n de JSTL que nos permite trabajar¬†con el paquete de seguridad de Spring dentro de nuestros ficheros JSP. Por supuesto tambi√©n debemos incluir el paquete spring-webflow\n‚Äì Configurando la seguridad\nNo es mi intenci√≥n el volver a explicar como funciona la seguridad en Spring, pues aunque en anteriores ejemplos (http://www.profesor-p.com/2018/10/17/seguridad-web-en-spring-boot/) los usuarios los guardaba en memoria en vez en una base de datos como en esta ocasi√≥n, realmente lo √∫nico que cambia es que se incluye la¬†funci√≥n: \u003cstrong\u003econfigure(AuthenticationManagerBuilder auth)\u003c/strong\u003ey se quita la funci√≥n¬†UserDetailsService de la clase SecurityWebConfig.\nEn esta funci√≥n se configura la autentificaci√≥n por jdbc de la clase AuthenticationManagerBuilder especific√°ndole el DataSource a usar, as√≠ como las sentencias SQL¬†a ejecutar para validar los usuarios y los roles de estos.\nLa clase configure(HttpSecurity http) configura¬†la seguridad no teniendo nada en particular, solo resaltar que no deshabilito el modulo de seguridad CRSF por lo cual todas las peticiones POST deben incluir nuestro identificador CRSF. Lo veremos m√°s tarde al explicar los ficheros JSP.\nLa clase SecurityWebApplicationInitializer que extiende de AbstractSecurityWebApplicationInitializer debe estar definida pues esta aplicaci√≥n al no ser Spring Boot, sino Spring a secas la necesita para implementar la seguridad web. La configuraci√≥n, simplemente es inexistente. Con que exista la clase es suficiente üòâ\nDependencias Definimos los paquetes de seguridad de Spring, incluyendo el de seguridad web.\nEn la pr√≥xima entrada explicare el programa paso a paso üòâ\n¬°¬° Nos vemos!!\n","description":"","tags":["bootstrap","java","jdbc","jquery","jstl","l","mvc","security","seguridad","spring","tomcat","webflow"],"title":"Spring WebFlow con JSP ‚Äì Configuraci√≥n","uri":"/2018/10/29/spring-webflow-con-jsp-configuracion/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Java¬†\u003e¬†Kotlin","content":"Buenas chavales,\nEn esta nueva entrada os ense√±are como realizar un programa CRUD, que sirva peticiones REST, usando Spring Boot y como lenguaje de programaci√≥n usar Kotlin.\nCreo que no har√° falta aclarar que una aplicaci√≥n CRUD es la t√≠pica aplicaci√≥n que permite consultar, insertar, modificar y borrar los datos de una tabla. Vamos, lo que se suele ir llamando un mantenimiento de una tabla.\nEsta aplicaci√≥n seria una variaci√≥n del que explique en la entrada http://www.profesor-p.com/2018/10/06/aplicacion-rest-en-javaee/¬†, donde se utilizaba JavaEE. Como frontend para¬†este programa pod√©is usar el realizado en Angular, que¬†explico en esta entrada http://www.profesor-p.com/2018/10/08/aplicacion-crud-en-angular/ ya que lo he hecho totalmente compatible.\nEl c√≥digo fuente lo ten√©is en mi repositorio de GitHub, en: https://github.com/chuchip/restKotlin\nBueno, !!manos a la obra!!\nLo primero sera cambiar de IDE, ya que mi querido NetBeans no soporta el lenguaje Kotlin. Por ello utilizaremos Eclipse, habi√©ndole instalado el plugin de Kotlin y de Spring Boot. Tampoco os voy a explicar como instalar estos plugins pues ten√©is unos 600 manuales por la web y tampoco es cuesti√≥n de alargarme demasiado üòâ\nUtilizando el magnifico asistente de ‚ÄúSpring Starter Project‚Äù crearemos un proyecto Spring Boot, al que le tendremos que a√±adir los paquetes ‚ÄúH2‚Ä≥,‚ÄùJPA‚Äù y ‚ÄúWEB‚Äù. ¬°¬° Acordaros de elegir Kotlin como lenguaje de programaci√≥n !!\nUna vez tenemos nuestro proyecto creado, debemos comprobar la configuraci√≥n del compilador de Kotlin, para ello nos iremos a las Propiedades del proyecto y elegiremos la pesta√±a ‚ÄúKotlin Compiler‚Äù. Ah√≠ deberemos especificar que que la versi√≥n de java para la que debe compilar es la 1.8¬†y deberemos incluir los plugins Spring y JPA. La pantalla deber√° quedar como esta:\nAhora ya podemos ponernos a teclear üòâ\nEclipse nos habr√° creado la clase de entrada , que sera algo como esto:\nimport org.springframework.boot.autoconfigure.SpringBootApplication import org.springframework.boot.runApplication @SpringBootApplication class RestKotlinApplication fun main(args: Array\u0026lt;String\u0026gt;) { runApplication\u0026lt;RestKotlinApplication\u0026gt;(*args) }Esta clase la dejaremos sin tocar, pues nos¬†sirve perfectamente.\nDeberemos configurar el fichero application.properties de Spring Boot, para especificarle que queremos usar una base de datos H2 y ponerle los par√°metros de conexi√≥n. Quedara algo como esto:\n# H2 spring.h2.console.enabled=true spring.h2.console.path=/h2 # Datasource spring.datasource.url=jdbc:h2:file:~/test spring.datasource.username=sa spring.datasource.password= spring.datasource.driver-class-name=org.h2.DriverObservar las anotaciones: spring.h2.console.enabled=true y spring.h2.console.path=/h2 que nos permitira acceder a la consola de H2. Podremos acceder yendo a la URL: http://localhost:8080/h2\nTambi√©n he creado un fichero llamado data.sql que¬†Spring Boot ejecutara para precargar la base de datos con algunos valores, porque, como veis, la base de datos se crea solo en memoria.\nEl fichero deber√° estar en el directorio resources y es algo parecido a esto:\ninsert into locales values('es_ES', 'espa√±ol (Espa√±a)'); insert into locales values('fr', 'frances'); insert into locales values('fr_BE', 'franc√©s (B√©lgica)'); insert into locales values('ca_ES', 'catal√°n (Espa√±a)'); insert into locales values('es_AR', 'espa√±ol (Argentina)');La aplicaci√≥n actualmente ya es ejecutable,¬†aunque solo podr√≠amos acceder a la consola de H2. !! Pod√©is jugar con ella, que esta muy bien hecha y tiene mucha potencia!!\nAhora pasamos a crear nuestra entidad de Idiomas, a la que yo he llamado locales.kt\nimport com.fasterxml.jackson.annotation.JsonProperty import javax.persistence.Basic import javax.persistence.Column import javax.persistence.Entity import javax.persistence.Id import javax.persistence.Table import javax.validation.constraints.NotNull import javax.validation.constraints.Size @Entity @Table(name = \"locales\") data class Locales ( @Id @Basic(optional = false) @NotNull @Size(min = 1, max = 5) @JsonProperty(value = \"codigo\") @Column(name = \"loc_codi\") val codigo: String, @JsonProperty(value = \"nombre\") @Column(name = \"nombre\") val nombre: String ) { }Como veis es una clase muy normalita. Aclarar que he puesto algunas etiquetas que no son necesarias para que ve√°is como podriais usarlas. As√≠ las etiquetas: @Table(name = ‚Äúlocales‚Äù), @JsonProperty(value = ‚Äúcodigo‚Äù) y @ColumName no son necesarias pues los nombres de las clases y variables coinciden con los de la base de datos.\nObservar como se define la clase con la etiqueta data class y lo f√°cil que es crear una entidad en Kotlin al no tener que definir setters, getters¬†y definir las propias variables globales en el constructor. Vamos, que si os fijais, la clase como tal no tiene nada ;-).\nAhora definimos la clase que hara de repositorio, a la que yo he llamado: LocaleRepository.kt\nimport org.springframework.data.jpa.repository.Query import org.springframework.data.repository.CrudRepository import profesorp.kotlin.entity.Locales interface LocaleRepository : CrudRepository\u0026lt;Locales,String\u0026gt; { @Query(\"SELECT l FROM Locales l where l.codigo like ?1 and upper(l.nombre) like ?2\") fun findLike(codigo:String, nombre:String):Iterable\u0026lt;Locales\u0026gt;; }Otra clase super compleja üòâ\n¬øHay que explicar algo ?. Bueno, quizas que he creado una nueva funci√≥n que usaremos para poder filtrar los pa√≠ses por nombre y/o c√≥digo. S√≠, esa funcion que he llamado findLike\nBueno, y por ahora ya vale. En la pr√≥xima entrada detallare la clase que sirve las peticiones REST.\n","description":"","tags":["crud","jpa","kotlin","rest","spring boot"],"title":"Aplicacion CRUD con REST en Kotlin y SpringBoot","uri":"/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular¬†\u003e¬†Aplicaci√≥n usando Java y Angular¬†\u003e¬†Frontend","content":"En anteriores entradas se creo la parte del servidor de nuestra aplicaci√≥n¬†.¬†Para la parte cliente o frontend usaremos Angular 6.\nEl c√≥digo fuente del programa lo ten√©is, como siempre,¬†en mi p√°gina de GitHub.\nLo primero sera instalar Angular, para ello tenemos¬†un excelente manual de¬†como hacerlo en la p√°gina web de Angular. B√°sicamente es instalar el servidor de aplicaciones Node.js. y su aplicaci√≥n incluida¬†npm (es un solo ejecutable) de¬†https://nodejs.org/en/download/¬†y luego, en una shell¬†(cmd en windows), ejecutar:\nlo cual nos instalara Angular, bajando de Internet todos los ficheros necesarios (que son bastantes).\nAhora crearemos nuestro proyecto a trav√©s del interprete de comandos (shell) de Angular (Angular CLI) que acabamos de instalar.\nPara ello abriremos un terminal en nuestro sistema operativo (Windows con CMD y Linux con una shell), nos posicionaremos en la carpeta donde vamos a crear nuestro proyecto y ejecutaremos el siguiente comando:\nEste comando creara la estructura b√°sica (o template que dir√≠an los ingleses) para el proyecto. Es normal que le cueste un rato, ya que descarga muchos ficheros¬†de internet .\nEsta es una salida t√≠pica del comando **ng new¬†**en una ventana windows:\nY podemos ver que nos ha creado el directorio **yagesclient,¬†**debajo del directorio donde est√°bamos:\nAhora mismo ya podr√≠amos ver esa aplicaci√≥n m√≠nima que hemos creado en nuestro navegador. Para ello, lanzamos nuestro servidor web con el comando:\nEste comando nos mostrara la siguiente salida:\nTambien abrir√° una ventana de nuestro navegador donde podremos ver nuestra aplicaci√≥n.\nF√°cil, ¬ø verdad ?. Como se puede observar con muy poco esfuerzo se ha creado una aplicaci√≥n en Angular, totalmente funcional que el servidor de Node¬†que hemos instalado sirve.\n","description":"","tags":["angular","rest"],"title":"Frontend en Angular","uri":"/2018/09/13/aplicacion-en-angular-instalacion-y-configuracion-basica/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular¬†\u003e¬†Aplicaci√≥n usando Java y Angular¬†\u003e¬†Backend","content":"En Anjelica, el ERP desarrollado por mi hace unos a√±os, hay un programa que saca un comparativo de ventas, entre dos a√±os, mostrando mes a mes, los kilos, importes y ganancias.\nLa idea es realizar esta misma consulta pero usando Spring con REST en el backend y como frontend usar Angular.\nPara ello se realizaran los siguientes pasos:\nCrear tablas y cargar datos de prueba en la base de datos. Usare H2 embebido, en vez de postgresql, que es la base de datos que usa Anjelica. Crear aplicaci√≥n servidor, bajo TOMCAT 9, usando Spring 5.¬†No usare Spring Boot para este ejemplo, aunque podr√≠a hacerlo perfectamente y de hecho har√≠a la aplicaci√≥n m√°s sencilla. Crear aplicaci√≥n cliente, para lo cual usare Angular 6. La aplicaci√≥n, como se ve en el anterior pantallazo, nos mostrara las ventas por meses, haciendo un comparativo del ejercicio introducido contra el anterior. Pulsando en cada mes, veremos las ventas por semanas.\nPara empezar vamos a definir las tablas que usaremos en esta consulta:\nComo se ve, tenemos una tabla calendario donde definimos, para cada mes, cual es la fecha inicial y fecha final. Esto es porque nosotros definimos cuando empieza un mes y cuando termina, la raz√≥n de hacerlo as√≠ es porque, en muchas empresas se vende por semanas enteras y como queremos hacer comparativos nos puede interesar especificar que semanas consideramos que son de un mes.\nAs√≠, en los datos que cargaremos, el mes de enero del 2018, empieza el d√≠a 1/1 (lunes) y termina el d√≠a 27/1 s√°bado, y el mes de febrero empieza el 28/1 y termina el 24/2. Es decir en nuestra empresa ficticia la semana comienza el domingo y termina el s√°bado siguiente (ambos inclusive). Excepto al principio del a√±o, que empieza siempre el 1/1 y termina el 31/12.\nEn la tabla histventas tenemos una serie de acumulados para los periodos marcados por hve_fecini (fecha Inicio) y hve_fecfin¬†(Fecha Final) y para una divisa dada.Esta tabla no tiene un indice √∫nico, pero buscaremos por los datos por esos 3 campos\nEsta tabla la llena un proceso autom√°tico del ERP, a trav√©s de las tablas de ventas, pero en este ejemplo no explicare como se llenan esos datos, sino que precargare unos datos en la propia aplicaci√≥n, cuando se instancie la base de datos.\nEn la siguiente entrada, empezare con el programa de la parte del servidor, pero pod√©is echarle un vistazo al c√≥digo en https://github.com/chuchip/yagesserver.git\n¬°¬° Nos vemos pronto!!\n","description":"","tags":["angular","java","spring"],"title":"Backend I","uri":"/2018/08/31/aplicacion-en-spring-y-angular/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Testing","content":"En una pr√≥xima entrada hablare sobre como testear las aplicaciones con pruebas unitarias. Bueno, mostrare como lo hago en mi c√≥digo.\nDe momento, viendo que alguien ya la ha hecho antes (y seguramente mejor) dejo este enlace como aperitivo.\nhttps://platzi.com/jee/tutoriales/pruebas-usando-junit-mockito-y-mockmvc/\nEsta serie de videos hablando de JUnit de Makigas tambi√©n servir√°n aclarar ideas y conocer lo b√°sico de JUNIT, el cual es practicamente imprescindible para testear las aplicaciones.\nNos vemos en la siguiente entrada.\n","description":"","tags":["java","junit","mvc","test"],"title":"Testeando las aplicaciones","uri":"/2018/08/27/testeando-las-aplicaciones/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Contacto","content":"Tengo m√°s de 30 a√±os de experiencia en el mundo de la inform√°tica.¬†Empece en los a√±os 80 como freelance, realizando videojuegos, usando ensamblador como lenguaje de programaci√≥n. A partir de ah√≠ he trabajado de analista, administrador de sistemas y DBA.\nSoy miembro de grupos como AULIR (Asociacion Usuarios de Linux de La Rioja), y GDG (Google Developer Group). La inform√°tica es mi trabajo y, ademas, mi pasi√≥n, por lo cual siempre he estado y estoy aprendiendo m√∫ltiples lenguajes y tecnolog√≠as de forma autodidacta.\nTengo amplia experiencia como programador, administrador de sistemas y administrador de bases de datos.¬†En est√° pagina pueden ver un resumen de los lenguajes en los que he programado y en esta otra, mi experiencia como administrador de sistemas. Para terminar, estas son las bases de datos que he administrado.\nEste es un¬†resumen de mi curriculum en orden cronol√≥gico:\n**1989-1992 **¬†Programaci√≥n de un ERP completo en Informix 4GL, migrando la soluci√≥n ya existente en Cobol.\n1992-1996 Desarrollo de una gesti√≥n completa en Dbase compuesta de almac√©n, facturaci√≥n, control de comerciales y caja. Al cabo de 2 a√±os se migra el programa a Visual Dbase 5\nEn VisualBasic realizo una serie de programas de control de presencia.\n1996 ‚Äì 1999 Migraci√≥n y mejora del antiguo ERP de Informix 4GL a Java, usando Swing. Se dise√±a todo un framework propio.\n1999 ‚Äì 2003 Realizar labores de administrador de Unix (Solaris) y base datos Informix.\nAnalista-Programador en Java, utilizando tanto entorno Web (JSP) como Swing para entorno gr√°fico.\nAdministrar servidores de correo (sendmail y qmail), DNS (bind), radius, firewall,etc.\n2004 ‚Äì 2010 Administrador de un cluster en HP-UX. Administrador de sistemas Linux (CENTOS y Suse)\nMantenimiento y configuraci√≥n de los servicios Web (Apache), Tomcat, Postfix, Antivirus,\nAntiSpam, DNS y el Firewall\nAdministrador de la base de datos principal¬†del Hospital de Calahorra implementada en Informix, ademas de¬†bases de datos Oracle\n(versi√≥n 9 y 10), Postgres y Mysql, que se utilizan en diferentes √°reas del hospital.\n2010 ‚Äì 2016 Teniendo como cliente final al servicio riojano de Salud (SERIS), mi labor es de administrador de Sistemas, dedic√°ndome especialmente al mundo Linux y base de datos\nrelacionales (Informix, Oracle, SQLServer, etc.). Trabajo con VMWARE como entorno de virtualizaci√≥n.\nConfiguraci√≥n e instalaci√≥n de diversos servicios (Servidores Web, Samba, LDAP, Tomcat, SVN, etc).\nConfiguraci√≥n entorno de escritorios remotos usando Citrix.\nConfiguraci√≥n y mantenimiento de sistemas de almacenamientos (EVAS y 3PAR) as√≠ como su correspondiente electr√≥nica de red.\n2016 ‚Äì 2018 Analista/ Programador, en Java. Realizaci√≥n de un ERP completo, enfocado a la trazabilidad.¬†Administrador de sistemas.\n2018 ‚Äì Actual Analista / Programador de Java en GFI Espa√±a.\n","description":"Experiencia laboral","tags":["experiencia"],"title":"Experiencia Laboral","uri":"/es/contacto/experiencia_laboral/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†DJango","content":"Partiendo del art√≠culo anterior, y usando el esqueleto del proyecto Eclipse creado, vamos a ver como hacer una peque√±a aplicaci√≥n CRUD con Django-Rest. El c√≥digo fuente esta disponible en https://github.com/chuchip/djangorestcrud\nEsta aplicaci√≥n nos servir√° para consultar, modificar, borrar o a√±adir los libros disponibles en una biblioteca.\nEl modelo de datos con el vamos a trabajar ser√° el siguiente:\ntitle. Tipo: String. Titulo del libro. type. TIpo: String. Tipo libro (aventura, cient√≠fico,comic, etc.) author -\u003e String creation_date -\u003e Date number_of_pages -\u003e int user. Tipo: String. Usuario al que se le presto el libro. borrow_date: Tipo Date. Fecha en la que se presto el libro. Para plasmar este modelo de datos en nuestro proyecto, primero debemos crear una aplicaci√≥n. Para crearlo desde la l√≠nea de comandos, estando dentro del entorno de djangoenv y situ√°ndonos en el directorio donde creamos el proyecto, ejecutaremos este comando:\nc:\\\u003e cd \\python # Este directorio es donde creamos el entorno de trabajo C:\\python\u003edjangoenv\\Scripts\\activate # Activamos el entorno de trabajo C:\\python\u003edjangoenv\\Scripts\\activate \u003e cd \\DIR_PROYECTO # Moverse donde este el proyeco. (djangoenv) \\DIR_PROYECTO \u003e python manage.py startapp library # Creamos la appTambi√©n lo podemos hacer de una manera m√°s c√≥moda desde eclipse, pulsando con el bot√≥n derecho del rat√≥n y eligiendo el men√∫ Django/Create Application\nEl √°rbol de directorios del proyecto ser√° el siguiente:\nAhora debemos especificar en el fichero de configuraci√≥n de DJango que tenemos la app library, aprovecharemos para indicar que tambi√©n vamos a utilizar la app rest_framework. Para ello editaremos el fichero settings.py y en la variable INSTALLED_APPS a√±adiremos la app.\nINSTALLED_APPS = [ ... 'rest_framework', 'library.apps.LibraryConfig', ]Observar que la l√≠nea a√±adida para definir la app se compone del nombre de la app m√°s el nombre del fichero (sin la extensi√≥n ‚Äú.py‚Äù) y la clase donde definimos la configuraci√≥n de la aplicaci√≥n.\nDe acuerdo, vamos a crear el modelo de datos. Para ello editaremos el fichero library\\models.py, y escribiremos el siguiente c√≥digo:\nfrom django.db import models class Books(models.Model): title = models.CharField('Titulo',max_length=100, blank=False) type = models.CharField('Tipo', max_length=40,blank=False) author = models.CharField('Autor', max_length=100,blank=False) creation_date = models.DateField('Fecha alta',null=False) number_of_pages=models.IntegerField(null=True) user=models.CharField(max_length=30,null=False) borrow_date= models.DateField('Fecha de prestamo',null=False) Como se puede ver, simplemente creamos una clase a la que llamamos Books y que extiende de models.Model. Dentro de la clase definimos variables de los tipos que necesitamos, especificando adem√°s ciertas propiedades para cada campo.\nAqu√≠ tienes m√°s informaci√≥n sobre los modelos de datos en Django\nCon el modelo creado es hora de decirle a DJango que cree las tablas correspondientes en la base de datos sqlite . Esto lo podemos hacer desde el propio eclipse eligiendo la opci√≥n Django|Make Migrations que nos aparecer√° al pulsar con el bot√≥n derecho encima del proyecto.\nEn la ventana que nos saldr√° preguntando por la app que migrar, pondremos library\nSi todo va bien en la consola aparecer√° algo parecido a esto:\nMigrations for 'library': library\\migrations\\0001_initial.py - Create model Books Finished \"....\\manage.py makemigrations library\" execution. Nota Esto seria el equivalente a ejecutar el comando python manage.py makemigrations library\nLo que este comando ha creado ha sido un fichero en el directorio library\\migrations con los comandos necesarios para crear una representaci√≥n de nuestro modelo en la base de datos.\nPara crear la estructura de tablas en la base de datos volveremos a pulsar con el bot√≥n derecho del rat√≥n sobre el proyecto y elegiremos la opci√≥n Django|Migrate\nLo cual nos deber√° mostrar la siguiente salida:\nOperations to perform: Apply all migrations: admin, auth, contenttypes, library, sessions Running migrations: Applying library.0001_initial... OK Finished \"..\\manage.py migrate\" execution. Nota El usar esta opci√≥n en Eclipse seria el equivalente a ejecutar el comando python manage.py migrate desde la l√≠nea de comandos.\nAhora que ya tendremos la estructura en la base de datos, vamos a crear una clase para serializar el modelo de datos, en el fichero library/serializers.py\nfrom rest_framework import serializers from library.models import Books class LibrarySerializer(serializers.ModelSerializer): class Meta: model = Books fields = ['id', 'title', 'type', 'author', 'creation_date', 'number_of_pages','user','borrow_date']Con esta simple clase definiremos como DJango tiene que convertir el modelo de datos a JSON y viceversa. Al heredar de serializers.ModelSerializer simplemente tendremos que especificar el modelo de datos a usar y los campos a presentar. Si queremos personalizar como presentar los datos en la salida podr√≠amos usar heredar de la clase serializers.Serializer pero en este tutorial vamos a intentar hacerlo sencillo.\nHasta ahora ya hemos definido los datos y como representarlos, ahora nos falta poder comunicarnos con el exterior a trav√©s de una API. Eso es tan f√°cil como crear un fichero llamado library/views.py con el siguiente contenido.\nfrom rest_framework import status from rest_framework.decorators import api_view from rest_framework.response import Response from library.models import Books from library.serializers import BooksSerializer @api_view(['GET', 'POST']) def book_list(request): \"\"\" List all code Books, or create a new Book. \"\"\" if request.method == 'GET': books = Books.objects.all() serializer = BooksSerializer(books, many=True) return Response(serializer.data) elif request.method == 'POST': serializer = BooksSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)Con la funci√≥n def book_list(request) ser√° la utilizada para devolver todos los libros en la biblioteca o para insertar un nuevo libro.\nComo se puede ver esta funci√≥n aceptara peticiones GET y POST. Si la petici√≥n es GET buscara todos los libros dentro del modelo Books llamando a la funci√≥n Books.objects.all(), el cual devolver√° una lista de instancias de la clase Book. Esa lista ser√° pasada al constructor de la clase BookSerializer, a√±adiendo el par√°metro many=True por ser una lista de modelos y no un √∫nico modelo . Para terminar se devolver√° un objeto Response, al que se le pasara los datos del objeto serializer.\nEn caso de que la petici√≥n sea tipo POST, creara un serializer con los datos de la petici√≥n. Para ello simplemente pasara al crear el objeto tipo BookSerializer le pasara en el constructor los datos enviados en la petici√≥n (request.data).\nSi los datos son validos, se guardaran en la base datos y se devolver√°n los datos insertados con el c√≥digo HTTP 201. En el caso de que los datos no fueran validos, se devolver√°n los errores detectados y el codigo HTTP 400 (Bad_Request).\nAntes de poder realizar ninguna prueba, en el fichero library/urls.py vamos a indicar la ruta que ejecutara la funci√≥n:\nfrom django.urls import path from library import views urlpatterns = [ path('books/', views.book_list), ]Con esto indicamos a DJango que las peticiones a http://localhost:8000/books deben ser tratadas en la funci√≥n book_list de la clase views. Sin embargo todav√≠a nos falta un paso y es definir en el fichero djangorestcrud/urls.py que tipo de peticiones deben ser dirigidas a la aplicaci√≥n library .\nfrom django.contrib import admin from django.urls import path,include urlpatterns = [ path('', include('library.urls')), ]Recordemos que Django funciona a√±adiendo aplicaciones al modulo principal y cada aplicaci√≥n tendr√° su propia URL. En este caso estamos especificando que cualquier petici√≥n sea dirigida al modulo library. Si quisi√©ramos que solo se mandaran al modulo library las peticiones que contuvieran en el path la cadena library pondr√≠amos la siguiente linea: path('library/', include('library.urls'))\nPara poder hacer nuestra primera prueba, sin depender de ninguna herramienta externa a Python, vamos a usar la libreria httpie de Python. La instalaremos con el comando:\npip install httpiePara insertar nuestro primer libro, ejecutaremos la siguiente sentencia:\n\u003e http POST http://localhost:8000/books/ title=\"mi primer libro\" type=\"Aventuras\" author=\"yo mismo\" \"creation_date\"=\"2019-09-27\" \"number_of_pages\"=15 HTTP/1.1 201 Created Allow: POST, OPTIONS, GET Content-Length: 155 Content-Type: application/json Date: Sun, 29 Sep 2019 18:41:10 GMT Server: WSGIServer/0.2 CPython/3.7.4 Vary: Accept, Cookie X-Frame-Options: SAMEORIGIN { \"author\": \"yo mismo\", \"borrow_date\": null, \"creation_date\": \"2019-09-27\", \"id\": 1, \"number_of_pages\": 15, \"title\": \"mi primer libro\", \"type\": \"Aventuras\", \"user\": null }Como se ve la petici√≥n POST nos devuelve el registro insertado, incluyendo su id, y el c√≥digo HTTP devuelto es un 201 (Created)\nEsta ser√≠a la misma sentencia desde postman:\nPodemos comprobar que el registro se ha insertado correctamente con la sentencia\n\u003e http GET http://localhost:8000/books/ HTTP/1.1 200 OK Allow: POST, OPTIONS, GET Content-Length: 1704 Content-Type: application/json Date: Sun, 29 Sep 2019 18:42:56 GMT Server: WSGIServer/0.2 CPython/3.7.4 Vary: Accept, Cookie X-Frame-Options: SAMEORIGIN { \"author\": \"yo mismo\", \"borrow_date\": null, \"creation_date\": \"2019-09-27\", \"id\": 1, \"number_of_pages\": 15, \"title\": \"mi primer libro\", \"type\": \"Aventuras\", \"user\": null },Terminar diciendo que DJango-Rest dispone de una bonita interfaz para realizar peticiones desde el navegador para ello iremos a la misma URL de antes: http://localhost:8000/books/\nEn pr√≥ximas entradas seguir√© profundizando en esta aplicaci√≥n, a√±adi√©ndole m√°s funcionalidades.\n","description":"","tags":["python - eclipse - django - django-rest"],"title":"Aplicaci√≥n CRUD con DJango-REST.","uri":"/es/7-django/aplicacioncrudendjango/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Restful","content":"En la anterior entrada vimos como lanzar una petici√≥n HTTP contra un servidor externo, pero al lanzarla surgieron algunas dudas. Dos ya fueron resueltas as√≠ que continuemos resolviendo las siguientes.\n3. Y si el servidor devuelve un OK, pero lo devuelto no es un objeto del tipo mandado, ¬ø qu√© pasara ? Como hemos visto cuando se realiza la petici√≥n uno de los par√°metros mandados es el objeto que se espera devolver. Spring creara un objeto del tipo mandado e intentara cargar los variables que lo definen.\nEn el proyecto de ejemplo se trabaja con el objeto Customer que solo tiene dos campos name y address, por lo tanto Spring recoger√° el cuerpo de la respuesta en formato JSON (puede trabajar en otros formatos como XML, pero en este articulo nos ce√±iremos a JSON) e intentara establecer los valores a esos dos campos.\nPara simular este caso en el ejemplo si realizamos esta llamada:\ncurl -s http://localhost:8080/ACCEPTEl servidor lanzara una excepci√≥n pero el c√≥digo HTTP ser√° 202 (ACCEPTED) con lo cual la clase RestTemplate no dar√° ning√∫n error, sin embargo el cuerpo devuelto ser√° algo como esto:\n{\"timestamp\":\"2019-08-05T11:02:18.314+0000\",\"status\":202,\"error\":\"Accepted\",\"message\":\"Don't send me accepts!!\",\"trace\":\"com.profesorp.restTemplate.MyAcceptedException: Don't send me accepts!!..... }Como RestTemplate no encontrara ning√∫n valor para los campos name o address, la salida de nuestro programa ser√° la siguiente:\nHttp Status: 202 ACCEPTED -\u003e Customer(name=null, address=null)Contestando a la pregunta: No pasara nada simplemente los campos del objeto Customer tendr√°n el valor NULL, pues no se llamara a las correspondientes funciones setter.\n4. ¬øC√≥mo podr√≠a tener un registro de lo enviado y recibido por el servidor ? La respuesta esta en la funci√≥n setInterceptors de la clase RestTemplate con ella podemos definir interceptores que ser√°n ejecutados cuando realicemos peticiones.\nEn la funci√≥n createRestTemplateInterceptor se define un RestTemplate a√±adi√©ndole un interceptor.\n@Bean @Qualifier(\"restInterceptor\") public RestTemplate createRestTemplateInterceptor(CustomResponseErrorHandler errorHandler) { RestTemplate restTemplate = new RestTemplate(new BufferingClientHttpRequestFactory(new SimpleClientHttpRequestFactory()));\tList\u003cClientHttpRequestInterceptor\u003e interceptors = new ArrayList\u003c\u003e();\tinterceptors.add(new LoggingRequestInterceptor()); restTemplate.setInterceptors(interceptors); return restTemplate; }La clase donde se define el interceptor es la siguiente:\npublic class LoggingRequestInterceptor implements ClientHttpRequestInterceptor {\t@Override public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException { traceRequest(request, body); final ClientHttpResponse response = execution.execute(request, body);\ttraceResponse(response); return response; } private void traceRequest(HttpRequest request, byte[] body) throws IOException { log.debug(\"===========================request begin================================================\"); log.debug(\"URI : {}\", request.getURI()); log.debug(\"Method : {}\", request.getMethod()); log.debug(\"Headers : {}\", request.getHeaders()); log.debug(\"Request body: {}\", new String(body, \"UTF-8\")); log.debug(\"==========================request end================================================\"); } private void traceResponse(ClientHttpResponse response) throws IOException { log.debug(\"============================response begin==========================================\"); log.debug(\"Status code : {}\", response.getStatusCode()); log.debug(\"Status text : {}\", response.getStatusText()); log.debug(\"Headers : {}\", response.getHeaders()); StringBuilder body=new StringBuilder();; try {\tBufferedReader bufferedReader = new BufferedReader(new InputStreamReader(response.getBody(), \"UTF-8\")); String line = bufferedReader.readLine(); while (line != null) { body.append(line); body.append('\\n'); line = bufferedReader.readLine(); }\t} catch (Exception k) { k.printStackTrace(); } log.debug(\"Response body: {}\", body==null?\"\":body.toString()); log.debug(\"=======================response end=================================================\"); } }En esta clase que debe implementar el interface ClientHttpRequestInterceptor se debe definir la funci√≥n intercept que ser√° llamada cuando se realice la petici√≥n HTTP.\nComo se ve en ella primero escribimos logs con los datos de la petici√≥n, despu√©s se continua el proceso con la sentencia execution.execute recogiendo el objeto ClientHttpResponse del cual se escriben una serie de datos en el log.\nEs importante recalcar que si queremos imprimir el cuerpo del mensaje devuelto por el servidor deberemos utilizar la funci√≥n getBody de la clase ClientHttpResponse la cual devuelve un InputStream . L√≥gicamente si leemos ese stream lo consumiremos, con lo cual si en otra clase se intenta leer esos datos ya no estar√°n disponibles. Por eso si intentamos coger el cuerpo del menaje de la clase ResponseEntity veremos que nos devuelve NULL.\nPara evitar esto al crear la clase RestTemplate le pasamos al constructor una clase BufferingClientHttpRequestFactory. Esa clase permite poder realizar diferentes lecturas del body sin consumirlo, con lo cual ya podremos mostrar el cuerpo del mensaje en el log y luego recogerlo en el ResponseEntity.\n4.1 Practica Ejecutamos el siguiente comando\ncurl -s http://localhost:8080/pruebaEl cual nos produce la siguiente salida:\nHttp Status: 200 OK -\u003e {\"name\":\"Customer prueba\",\"address\":\"Address Customer prueba\"}En el log del cliente obtendremos algo como esto:\n===========================request begin================================================ URI : http://localhost:8080?queryParam=prueba Method : GET Headers : [Accept:\"text/plain, application/json, application/*+json, */*\", Content-Length:\"0\"] Request body: ==========================request end================================================ ============================response begin========================================== Status code : 200 OK Status text : Headers : [Content-Type:\"application/json\", Transfer-Encoding:\"chunked\", Date:\"Tue, Response body: {\"name\":\"Customer prueba\",\"address\":\"Address Customer prueba\"} =======================response end================================================= Consejo Recordar lanzar la aplicaci√≥n con el par√°metro -Dlogging.level.com.profesorp=debug para mostrar los logs del tipo DEBUG.\n5. ¬øMe devolver√° el objeto tipo Customer en el cuerpo de la respuesta aunque no sea OK el estado de esta? Pues depende üòÑ\nComo hemos visto durante los art√≠culos, Si has establecido un ErrorHandler s√≠ te lo devolver√°. En caso contrario no, ya que te saltara una excepci√≥n tipo HttpClientErrorException\nY con esto quedan todas las preguntas respondidas, ¬ø verdad ? üòâ\nPues en pr√≥ximas entradas hablare de como realizar peticiones que no sean tipo GET, poder poner cabeceras y como recibir objetos que sean gen√©ricos\n","description":"","tags":["java","rest","spring"],"title":"La Clase RestTemplate - 2","uri":"/clase-resttemplate-2/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Testing","content":"Como comentaba en el articulo anterior gracias al uso de perfiles es f√°cil personalizar las aplicaciones en Spring Boot.\nUno de los casos mas habituales del uso de perfiles es para testear la aplicaci√≥n. Partiendo del mismo c√≥digo fuente anterior, que os recuerdo esta en https://github.com/chuchip/profilestest vamos a ver el uso de los perfiles en testing.\nMirando el c√≥digo de la clase ProfilesTestsTest.java\n@Profile(\"test\") @SpringBootTest(webEnvironment= WebEnvironment.RANDOM_PORT) @ActiveProfiles(\"test\") @RunWith(SpringRunner.class) public class ProfilesTestsTest { @Value(\"${app.ID}\") int id; @Autowired IRead read; @Autowired Environment env; @Test public void inicio() { String name=read.readRegistry(id); assertEquals(name,\"test\"); String principal=env.getProperty(\"app.principal\",\"NULL\"); assertNotEquals(principal,\"profe\"); String test=env.getProperty(\"app.test\",\"NULL\"); assertEquals(test,\"test\"); } }nos debemos de fijar en la etiqueta @ActiveProfiles(‚Äútest‚Äù) con ella indicamos a Spring que active el perfil test con lo cual ahora solo se procesaran las clases que tengan la etiqueta @Profile(‚Äútest‚Äù) o no tengan ninguna etiqueta @Profile.\nComo se puede ver en el directorio de test,¬†tambi√©n incluimos la clase ReadTestImpl.java que es exactamente igual que la existente en el paquete com.profesorp.profiletest.impl.def pero con la etiqueta @Profile(‚Äútest‚Äù).\nEn el directorio resources de test (profilestest/src/test/resources/) encontramos el fichero application.properties que usara **Spring Boot¬†** cuando se lance el test, pues como hemos comentado ese fichero se ejecuta siempre, sin importar el perfil activo.¬†Sin embargo no procesara el fichero application.properties general.\nPara demostrarlo en el fichero ‚Äú/profilestest/src/main/resources/application.properties‚Äù se ha incluido la linea\nY en ‚Äú/profilestest/src/test/resources/application.properties‚Äù est√°n las siguientes lineas\nEn el test podemos ver como no encuentra la variable de entorno app.principal pero si que encuentra la variable app.test\nY esto es todo por esta entrada. Espero que haya servidor para aclarar un poco m√°s el uso de perfiles (profiles) en Spring Boot.\n¬°¬° Hasta la pr√≥xima !!\n","description":"","tags":["java","profiles","spring boot"],"title":"Uso de perfiles para testear en Spring Boot","uri":"/2019/03/01/uso-de-perfiles-en-testing-en-spring-boot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Webflow","content":"En el articulo anterior http://www.profesor-p.com/2018/10/29/spring-webflow-con-jsp-configuracion/ explicaba como configurar el programa para que Spring WebFlow funcionara. En este articulo explicare como hacer el flujo en si.\nLa p√°gina principal del programa no esta dentro de ning√∫n flujo y sus peticiones son respondidas por Spring MVC, en la clase MyController, la cual podemos encontrar en el paquete profesorp.webflow.controller. Esta clase anotada con la etiqueta @Controller responde en la funci√≥n indice1 a las peticiones de los recursos ‚Äú/‚Äù e ‚Äúindex‚Äù\nAqu√≠ pod√©is ver el c√≥digo:\nComo veis devuelve un objeto **ModelAndView¬†**donde guarda el objeto cliente, la cual es una @entity de la tabla Clientes, que ya vimos en la entrada anterior. La vista devuelta es ‚Äúindex.jsp‚Äù que esta en el directorio webapp/WEB-INF/jsp/\nEn ‚Äúindex.jsp‚Äù encontramos la etiqueta \u003csec:authorize access=‚ÄùisAuthenticated()‚Äù\u003e que esta dentro del paquete spring-security-taglibs. Si el usuario no esta autentificado mostrara la pantalla de login, en caso contrario saludara al usuario¬†y permitir√° realizar el traspaso de dinero.\nAl usar el¬†paquete security, y para evitar ataques CSRF,¬†Spring solo permite realizar peticiones tipo POST,¬†al recurso /logout. Por ello uso la librer√≠a JQuery con la cual creo esa petici√≥n en la funci√≥n de javascript function post(path, parameters)\nEn todas las peticiones tipo POST debemos incluir la variable _csrf.parameterName¬†con el valor _csrf.token para evitar estos mismos ataques CSRF. Si no¬†las ponemos Spring Security no aceptara nuestras peticiones, pues entender√° que es un posible ataque.\nEsta es la pantalla de entrada , solicitando las credenciales.\nY est√°, la pantalla de entrada , una vez el usuario esta registrado.\nSi pulsamos el enlace ‚ÄúTransferencia‚Äù iremos al recurso ‚Äútraspaso‚Äù que estar√° ubicado en la URL http://localhost:8080/webflow/traspaso. Este recurso es tratado por Spring Webflow, por lo cual se cargara el fichero¬†WEB-INF/flows/traspaso/traspaso.xml pues as√≠ lo definimos en la clase WebFlowConfig anteriormente vista.\nTodo fichero XML que defina un webflow deber√° empezar con las siguientes lineas.\nA continuaci√≥n defino la variable traspasoBean con una nueva instancia del objeto profesorp.webflow.controller.TraspasoBean.\nEsta sentencia seria el equivalente al c√≥digo java \u003cstrong\u003etraspasoBean¬†= new profesorp.webflow.controller.TraspasoBean()\u003c/strong\u003e\nSeguidamente. indico que al cargar el flujo de trabajo debe evaluar la expresi√≥n logicaService.getCliente() cuyo resultado debe guardar en la variable cliente, la cual sera¬†de √°mbito flow (flowScope.cliente). Una explicaci√≥n de los √°mbitos la ten√©is en la pagina oficial de Spring (en ingles me temo). Baste decir, de momento que una variable definida dentro del √°mbito flowscope es accesible en todas las paginas que est√©n definidas en nuestro flujo.\nTener en cuenta que para poder acceder al objeto logicaService¬†lo hemos tenido que definir como un Bean en nuestro programa. En este ejemplo lo ten√©is en la clase LogicaService, que muestro a continuaci√≥n.\nA continuaci√≥n indico la primera vista que se debe cargar, que sera el fichero cuentaOrigen.jsp\nCon el par√°metro model especifico¬†las variables que reciba de la vista, deber√°n ser puestas en el objeto traspasoBean.\nComo en la vista¬†definimos la variable cuentaOrigen (en un campo tipo select),y¬†el bean profesorp.webflow.controller.TraspasoBean tiene a su vez la variable cuentaOrigen definida, se llamara a la funci√≥n setCuentaOrigen() de esa clase, con el valor introducido , por el usuario en la vista.\nSi tuvi√©ramos m√°s variables en el formulario que coincidieran con sus correspondientes setters, tambi√©n serian llamadas.\nLa vista, que detallo a continuaci√≥n, es un formulario bastante simple donde se pide el numero de cuenta origen:\nAs√≠ se ve la vista en el navegador\n![](/img/2018/10/Captura-25.png(\nLo primero es ver como la URL a llamar por el formulario es el resultado de la variable ${flowExecutionUrl}. Esta variable es puesta autom√°ticamente por Spring WebFlow y apuntara¬†a la direcci√≥n donde continuara el flujo actual.\nLa variable ‚Äú_eventId‚Äù¬†es la que Spring WebFlow buscara para decidir que acci√≥n llevar a cabo. En este caso le asigno el valor ‚Äúactivate‚Äù que coincide con¬†el valor de la etiqueta transition \u003ctransition on=\"activate\" to=\"importe\"/\u003e¬†Con esto lo que hacemos es configurar que cuando la variable¬†_eventId tenga el valor ‚Äúactivate‚Äù el flujo vaya al ID importe. Por supuesto, el ID deber√° existir en nuestro flujo.\nAclarar que ‚Äúactivate‚Äù es un literal libre, que igual podria ser ‚ÄòMI_SALIDA‚Äò o ‚ÄòSEGUIR‚Äò.\nLo normal, en una vista, es que pueda devolver diferentes valores. As√≠ en¬†la ultima linea donde declaramos un enlace (\u003ca href‚Ä¶‚Äù\u003e) vemos como se llama a **${flowExecutionUrl}¬†**pasando el par√°metro _eventId=cancel . En el caso de que pulsemos ese enlace lo que se ejecutara sera el siguiente c√≥digo que esta al final del fichero traspaso.xml\nEsto es as√≠ porque hemos definido que cualquier evento tipo ‚Äúcancel‚Äù dentro del flujo, llame al ID cancel del que luego hablare.\nLa etiqueta hace que lo que haya dentro se ejecute justo antes de renderizar la vista. En este caso llamara a la funci√≥n logicaService.getCuentasByCliente()y el valor devuelto lo almacenara en flowScope.cuentas\nEste objeto cuentas que es un Array de strings que se usa en la vista para crear el desplegable¬†con las cuentas de origen disponibles, en el c√≥digo \u003cc:forEach items.....\u003e\nLo siguiente define la vista con ID importe, que es donde ira el usuario cuando pulse el bot√≥n siguiente, como hemos definido con las etiquetas \u003ctransition on=\"activate\" to=\"importe\"/\u003e anteriores.\nComo en la anterior vista, los valores introducidos en el formulario ser√°n introducidos en traspasoBean,¬†al incluirse la etiqueta model.\nAntes de mostrar la vista se llama a la funci√≥n traspasoBean.puestoPeriodico() con el valor false debido a la etiqueta on-render.\nSi el valor de la variable ‚Äú_eventId‚Äù es ‚Äúsalir‚Äù el flujo sera dirigido al ID comprobarImporte, pero antes de ir se llamara a la funci√≥n logicaService.hasCredit(traspasoBean). Si esa funci√≥n devuelve true se realizara el salto a comprobarImporte en caso contrario se volvera a mostrar la vista actual, es decir importe.\nLa vista importe esta definida en el fichero importe.jsp del cual pongo un extracto a continuaci√≥n\nResaltar que como la variable periodico esta en un campo checkbox solo sera mandada cuando el usuario seleccione esa opci√≥n, por lo cual si no es marcada, la funcion setPeriodico() no sera llamada, pero no se pondr√° a false la correspondiente variable en el Bean. Es por ello que antes de mostrar la vista, con la etiqueta \u003con-render\u003e se pone a false una variable auxiliar que utilizara el programa para saber que no se ha seleccionado la opci√≥n ‚ÄúTraspaso Peri√≥dico‚Äú\nUna imagen de como se muestra la vista en el navegador.\nEl id comprobarImporte se define a continuaci√≥n,\nEn este estado que es tipo decisi√≥n, se llama a la funci√≥n checkImporte(traspasoBean) del objeto logicaService en caso de que devuelva true se ira al ID periocidad, en caso contrario se volver√° al ID importe . Esta funci√≥n comprueba que el cliente tenga suficiente dinero en la cuenta.\nEl ID periocidad es otro estado tipo decisi√≥n que dependiendo del resultado de la funci√≥n¬†isPeriodico, la cual comprueba si se ha selecionado la opci√≥n ‚ÄúTraspaso Periodico‚Äù en la vista, ira a periodico o a confirmar\nEl ID periodico es una llamada al flujo traspaso_time, al cual se saltara pas√°ndole el objeto traspasoBean debido a la etiqueta input.\nSi ese flujo sale con el ID salir se saltara al ID confirmar\nA continuaci√≥n detallo el contenido del flujo traspaso_time que esta definido en el fichero traspaso_time.xml\nLo primero que declaramos es que debemos recibir un objeto traspasoBean . Si no lo recibieramos el programa fallara.\nEs decir el flujo lo podr√≠amos llamar con la URL: http://localhost:8080/webflow/traspaso_time pero si lo hacemos al no recibir el objeto¬†**traspasoBean¬†** fallara.\nEn el flujo mostramos la vista tiempo y si el event_id es **salir¬†**se saltara al ID salir.\nEste ID es tipo end-state por lo cual¬†se volver√°¬†al anterior¬†flujo con el ID salir.¬†En el flujo traspaso entonces¬†se saltara al ID confirmar, como esta definido por la etiqueta: \u003ctransition on=\"salir\" to=\"confirmar\"\u003e¬†Si el event_id es cancelar tambi√©n volver√° al flujo anterior, pero¬†a trav√©s del ID cancel y por lo tanto se saltara al ID cancel , como se defini√≥ con las etiquetas anteriormente mostradas.\nLa vista tiempo se muestra as√≠ en el navegador.\nPor √∫ltimo la vista confirmar, muestra todos los datos introducidos y solicita la confirmaci√≥n. En caso de darla se ira al ID salir con lo cual saldremos del flujo redirigiendonos al recurso index pasando la variable **transferencia¬†** con el valor ‚Äú1‚Äù. En caso de que en alg√∫n momento hayamos cancelado la transferencia se saldr√° del flujo dirigi√©ndonos a index pero la variable transferencia tendr√° el valor ‚Äú0‚Äù\nEsto se nos mostrara en pantalla una vez hayamos confirmado la transferencia\nY con esto termino esta entrada tan larga, pero donde creo que he explicado bastantes conceptos de WebFlow.\nComo siempre, espero vuestros comentarios y mejoras, con la esperanza de haberme explicado bien.\n¬°¬° Hasta otra, alumnos!!\n","description":"","tags":["bootstrap","java","mvc","seguridad","spring","tomcat","webflow"],"title":"Spring WebFlow con JSP","uri":"/2018/10/30/spring-webflow-con-jsp/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular¬†\u003e¬†Aplicaci√≥n usando Java y Angular¬†\u003e¬†Frontend","content":"Continuando con la entrada donde instalaba Angular, seguimos desarrollando la aplicaci√≥n que detallo en esta p√°gina.\nUna vez tenemos creado el esqueleto de nuestro programa, con el comando ‚Äú**ng new‚Äù ,¬†** entraremos al directorio **src.¬†**En este directorio es donde realmente vamos a trabajar.\nLos dem√°s directorios son donde est√°n las librer√≠as y utilidades que nuestra aplicaci√≥n usara pero que son propias de Angular y nosotros no las tocaremos (al menos en este ejemplo).\nPrimero vamos a explicar los pasos que sigue Angular para ejecutar nuestra reci√©n creada aplicaci√≥n.\nCuando ejecutamos el comando ‚Äúng serve ‚Äìopen‚Äù desde nuestro directorio yagesclient,Angular, una vez que ha compilado, comprobado dependencias y otra serie de tareas, en las que no voy a entrar, lee el fichero src/main.ts, el cual detallo a continuaci√≥n.\nsrc/main.ts\nEn este fichero se importan (import)¬†es decir, se cargan¬†una serie de ficheros para despu√©s arrancar nuestra aplicaci√≥n. con la ultima linea:\nComo se puede intuir este comando ejecuta una funci√≥n, a la que se le pasa el par√°metro¬†AppModule. No voy a entrar a explicar los detalles , pues se escapa al √°mbito de este curso, lo que voy a¬†explicar es donde definimos ese par√°metro¬†AppModule¬†.\nLa clave esta en la linea:\nAh√≠ importamos ese par√°metro,¬†especificando¬†que lo debe cargar del fichero ‚Äú./app/app.module.ts‚Äù. La extensi√≥n¬†ts¬†(TypeScript) la pone Angular pues busca un fichero de ese tipo, pero nosotros no debemos ponerlo.\nEn este¬†fichero est√°n definidos los¬†m√≥dulos de nuestra aplicaci√≥n.\nEl contenido del fichero es el siguiente:\nsrc/app/app.module.ts\nEste fichero define un modulo, porque as√≠ se lo especificamos a¬†Angular¬†con la etiqueta¬†@NgModule. El modulo se llamara¬†AppModule, que no deja de ser una clase u objeto, que exportamos a la vez que creamos,¬†con la sentencia:\nEsta clase **AppModule¬†**es el objeto que import√°bamos en nuestro anterior fichero con la linea import { AppModule } from ‚Äò./app/app.module‚Äô¬†El nombre de la clase podr√≠a haber sido perfectamente **miMaravillosaClase¬†**con lo cual habr√≠amos puesto:\nY en el import seria **import { miMaravillosaClase¬†} from ‚Äò./app/app.module‚Äô\n**\nLo que quiero resaltar es que el nombre de la clase¬†**no¬†**debe coincidir con el del fichero ni tiene porque acabar en Module, sin embargo, por claridad en el c√≥digo y buenas practicas los m√≥dulos siempre se terminan con Module y coincide el nombre del modulo con la del fichero.\nVolviendo al fichero /app/app.module.ts, centr√©monos en el siguiente¬†import.\nDonde importamos el componente¬†**AppComponent .¬†**Este¬†_componente esta definido en el fichero¬†_‚Äò./app.component.ts‚Äô\nsrc/app/app.component.ts\nAqu√≠ definimos un¬†componente (obs√©rvese la etiqueta¬†**@Component)¬†**que sera una clase llamada¬†AppComponent anteriormente importada.\nCon la etiqueta¬†selector indicamos como llamaremos a este componente en nuestros fichero HTML (en la parte de la vista, vamos). Es decir, se llamara app-root.\nCon¬†templateUrl indicaremos el fichero html a cargar cuando pongamos la etiqueta¬†app-root en algun otro fichero html que Angular ya haya cargado (index.html en nuestro ejemplo). Con styleUrls indicaremos la hoja de estilo a cargar para el anterior fichero html.\nUn¬†componente en angular no es sino una objeto que nosotros definimos. Ese objeto tendr√° un c√≥digo HTML, su hoja de estilos (CSS) y por supuesto JavaScript.\nNuestra aplicaci√≥n, como vemos,¬†ya tiene su primer¬†_componente¬†_creado, el objeto¬†AppComponent, y este componente es usado por el fichero¬†index.html, del cual ense√±amos una versi√≥n simplificada a continuaci√≥n.\n/src/index.html\nComo se puede ver es un fichero HTML¬†casi normal. Lo √∫nico que nos debe llamar la atenci√≥n es¬†la etiqueta:\n. ¬ø Os suenan ?. Exacto, son las que hemos definido con el par√°metro¬†selector: ‚Äòapp-root‚Äô.\nResumiendo, cuando Angular ejecute nuestra aplicaci√≥n cargara el fichero index.html y cuando encuentre las etiqueta sabr√° que debe incluir el componente definido en el fichero src/app/app.component.ts.\nLo que incrustara sera el contenido del fichero html definido en la anteriormente citada etiqueta templateUrl, ademas de instanciar (crear) el objeto¬†AppComponent.\nSin entrar en detalles, para ver la relaci√≥n entre la clase y el fichero HTML, o dicho de otra manera, la relaci√≥n vista / controlador, obs√©rvese que dentro de la clase AppComponent se crea la variable¬†title asign√°ndole¬†el valor ‚ÄùCliente de Aplicacion de prueba‚Äò. Como en el fichero src/app.component.html tenemos solo la siguiente linea\nEl c√≥digo¬†del fichero index.html sera sustituido por:\nY con esto termino esta entrada, en la pr√≥xima hablare de las rutas. Espero haberme explicado bien. En caso contrario no dud√©is en realizar todas las preguntas necesarias.\n","description":"","tags":["angular","angular 6","frontend","html"],"title":"Angular - Inicializando","uri":"/2018/09/14/aplicacion-en-angular-inicializando/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular¬†\u003e¬†Aplicaci√≥n usando Java y Angular¬†\u003e¬†Backend","content":"En esta segunda parte voy a empezar a explicar como hacer la parte del servidor, usando, como dije en la primera parte de este articulo utilizare¬†JAVA 8, apoy√°ndome en el framework Spring, versi√≥n 5.\nEsta aplicaci√≥n la he realizado con NetBeans 9, usando Tomcat 9 como servidor de aplicaciones. La pod√≠a haber realizado usando Spring Boot, lo que habr√≠a realizado m√°s f√°cilmente y con menos configuraci√≥n pero he querido hacerlo con Tomcat como ejercicio.\nEsta el c√≥digo fuente en: https://github.com/chuchip/yagesserver\nEstos ser√°n los archivos usados en mi aplicaci√≥n:\nLas dependencias, aparte de las b√°sicas de Spring, son tener las siguientes librer√≠as , de H2 Database e Hibernate.\nPara m√°s detalles y otras librer√≠as menores, mirar el fichero pom.xml del proyecto.\nEn este ejemplo no uso¬†anotaciones XML, , todo se hace con anotaciones Java. Esta es el fichero con que se configura la base de datos.\nLa configuraci√≥n es una t√≠pica para cualquier base de de datos. Lo √∫nico destacable es el uso de la clase EmbeddedDatabaseBuilder , en la funci√≥n dataSource. Esta clase es muy √∫til para crear una base de datos embebida del tipo H2, HSQL o incluso DERBY. Como se ve en el c√≥digo el uso es tan simple como especificar el tipo de base de datos, y despu√©s a√±adir los scripts necesarios (en este caso el de creaci√≥n de las tablas y el de carga de datos). Esto nos creara un objeto EmbeddedDatabase que implementa el interface DataSource. Observerse que¬†los ficheros create-db.sql¬†e insert-db.sql, contienen sentencias SQL puras.**\n**\nEstos dos ficheros, deber√°n estar ubicados en la carpeta de resources (es decir, en el classpath)\nUna vez que tenemos nuestro objeto DataSource ya solo resta crear nuestro EntityManager en la funci√≥n entityManagerFactory, apoy√°ndonos en las dem√°s funciones de la clase.\nAhora creare las clases que representan los objetos de la base de datos, estos objetos est√°n en la carpeta:\nImplementando nuestras tablas **como objetos. **\nEn el paquete yages.yagesserver.model¬†tendremos las siguientes clases:\nCalendario.java CalendarioKey.java\nComo se puede ver son dos simples POJOS, con una serie de anotaciones para su uso con JPA.\nSolo destacar el uso de que como la tabla Calendario tiene un indice multiple, haremos uso de la anotaci√≥n EmbebedId de tal manera que la clase Calendario¬†sera una @Entity y la clase CalendarioKey , que tendra los campos mes y ano (a√±o üòÄ ) sera la que tenga el indice y estara marcada como¬†@Embeddable.\nEn el paquete yages.yagesserver.dao creare mi repositoio crud con el siguiente interface:\nPara mas datos sobre este interface que nos hace la vida tan f√°cil, pod√©is mirar el siguiente articulo de mi p√°gina.\nEn la clase CalendarioRepositorioService creo mi clase auxiliar que hace uso del repositorio.\nObservese como anoto la clase¬†con la etiqueta @Service y @Transacional. Despues inyectamos el interface CalendarioRepository que es el que usare en las dos unicas funciones que tiene esta clase.\nLa tabla histVentas es pr√°cticamente igual que la tabla calendario, tambi√©n con un indice m√∫ltiple y la configuraci√≥n es b√°sicamente la misma, por lo cual no creo necesario explicarla.\nY por hoy ya vale. En la pr√≥xima entrada, veremos como implementar las peticiones REST\n¬°¬° Hasta pronto!!\n","description":"","tags":["java","jndi","json","rest","spring","spring boot","tomcat"],"title":"Backend (II)","uri":"/2018/09/03/aplicacion-en-spring-rest-y-angular-2-parte/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Testing","content":"En este art√≠culo muestro diferentes maneras de testear una aplicaci√≥n basada con SpringBoot.\nLa URL del proyecto de ejemplo es esta: https://github.com/chuchip/demoSpringTest\nEste programa tiene un simple controlador y una conexi√≥n con MongoDB. En el ejemplo uso una conexi√≥n a Atlas. Si no conoces esta magnifica herramienta, te animo a que veas est√° pagina y levantes tu propia base de datos en la nube: https://cloud.mongodb.com\nEste programa realiza los siguientes tipos de test:\nDemoSpringTestApplicationTests que no usa Mockito y es un test completo\nLevanta una instancia de MongoDB embebida para realizar las pruebas y realiza las llamadas a nuestro controlador usando TestRestTemplate. En este caso las llamadas son reales, es decir se conecta por HTTP y el test es el m√°s completo posible pues pasa por todas las partes de nuestro programa.\nMockMvcTestApplication\nLas peticiones web son realizadas a trav√©s de MockMVC y por lo tanto vamos a la URL del controlador. Se levanta una instancia embebida de MongoDB. Tambi√©n es un test completo.\nMockitoTestApplication:\nEs el test mas simple y tambi√©n el m√°s r√°pido. Usando Mockito no se levanta la aplicaci√≥n de SpringBoot ni usa MongoDB. Las peticiones al controlador se hacen llamando a las funciones, por lo cual no se comprueban las URL.\nMockitoWebTestApplication:\nLanza la aplicaci√≥n entera, es decir se levanta el servidor web pero usamos Mockito para crear el controlador y el repositorio de MongoDB. La base de datos en este caso se levanta pero no la usamos ya que mockeamos el repositorio.\nNo os voy a dar mucho la chapa de como funcionan las diferentes clases, he preferido comentar el c√≥digo que creo que se explica el mismo y dejar, al que este interesado, que mire y juegue.\n","description":"","tags":["java","springboot","mockito","junit","mvc","test"],"title":"Testeando Spring","uri":"/spring/testeando-tu-aplicacion-web/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Restful","content":"Esta es la tercera y √∫ltima entrada sobre la clase RestTemplate.\nPuedes ver las anteriores entradas en Trabajando con la clase RestTemplate y en La clase RestTemplate-2.\nEn esta ocasi√≥n hablare sobre las funciones m√°s utilizadas en esta clase y como usarlas.\nPara m√°s detalles visita la pagina oficial de Spring https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html.\nAntes de enumerar como realizar las diferentes tipos de peticiones insistir√© en que c siempre podremos recibir directamente el cuerpo el mensaje o un ResponseEntity. Como comente anteriormente siempre es mejor recibir el ResponseEntity pues de otra manera no tendremos informaci√≥n sobre el resultado de la petici√≥n. Para recibir el cuerpo podremos usar las funciones tipo getForObject, postForObject, etc.\n1. Peticiones GET Este tipo de petici√≥n es la m√°s sencilla y en las anteriores entradas ya se han realizado varias.\nA√±adir que tambi√©n disponemos de la funci√≥n\npublic \u003cT\u003e ResponseEntity\u003cT\u003e getForEntity(String url, Class\u003cT\u003e responseType, Map\u003cString,?\u003e uriVariables) throws RestClientExceptionEn ella, podremos pasar un objeto Map\u003cString,?\u003e para hacer sustituciones sobre la URL.\nEs decir si la URL mandada, como en el proyecto de ejemplo es: http://8080/server?queryParam={queryParam} mandaremos un Map con el valor deseado para la clave queryParam.\nMap\u003cString,String\u003e sustitute=new HashMap\u003c\u003e(); sustitute.put(\"queryParam\",path);2. Peticiones POST La √∫nica diferencia con la anterior petici√≥n es que deberemos incluir el objeto a enviar. Ese objeto puede ser del tipo HttpEntity si necesitamos incluir cabeceras en la petici√≥n.\nHttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON); headers.set(\"my-id\", \"profe-test\"); HttpEntity\u003cCustomer\u003e httpEntity = new HttpEntity\u003c\u003e(customer,headers); ResponseEntity\u003cString\u003e responseEntity = restTemplateInterceptor.postForEntity( localUrl, httpEntity,String.class);En el proyecto de ejemplo si ejecutamos lo siguiente.\n\u003e curl -XPOST http://localhost:8080/client/ -H \"content-type: application/json\" -d '{\"name\": \"Profe\",\"address\":\"Spain\"}' Http Status: 200 OK -\u003e {\"name\":\"Profe\",\"address\":\"Spain\"}En los logs del programa veremos:\nClient - Received custom request type POST. Customer: Customer(name=Profe, address=Spain) ===========================request begin================================================ URI : http://localhost:8080 Method : POST Headers : [Accept:\"text/plain, application/json, application/*+json, */*\", Content-Type:\"application/json\", my-id:\"profe-test\", Content-Length:\"34\"] Request body: {\"name\":\"Profe\",\"address\":\"Spain\"} ==========================request end================================================ ============================response begin========================================== Status code : 200 OK Status text : Headers : [Content-Type:\"application/json\", Transfer-Encoding:\"chunked\", Date:\"Tue, Response body: {\"name\":\"Profe\",\"address\":\"Spain\"} =======================response end=================================================3. Otras peticiones. La clase RestTemplate tiene funciones para realizar cualquier tipo de petici√≥n. As√≠ si deseamos realizar una petici√≥n tipo put podremos utilizar.\npublic void put(URI url, @Nullable Object request) throws RestClientExceptionSi la petici√≥n a realizar tiene que ser tipo delete podremos utilizar\npublic void delete(String url) throws RestClientExceptiony as√≠ con todos los tipos de peticiones como patch, head, etc.\n4. Peticiones avanzadas con Exchange Sin embargo hay algunos casos donde no tendremos la combinaci√≥n necesaria para ejecutar una petici√≥n. Por ejemplo, si deseamos realizar una petici√≥n tipo get incluyendo cabeceras en la petici√≥n no podremos usar la funci√≥n getForEntity. Para esos casos disponemos de la funci√≥n exchange.\npublic \u003cT\u003e ResponseEntity\u003cT\u003e exchange(RequestEntity\u003c?\u003e requestEntity, Class\u003cT\u003e responseType) throws RestClientExceptionEsta funci√≥n siempre recibe un objeto HttpEntity donde podremos especificar el tipo de petici√≥n (POST,GET, etc), incluir cabeceras y por supuesto el objeto a mandar.\nHay diversas variantes de esta funci√≥n para cubrir diferentes situaciones.\n5. Recibir contenedores de objetos gen√©ricos. Si el servidor debe devolver un contenedor de objetos gen√©rico, como puede ser un List\u003cT\u003e o un Map \u003cT,R\u003e no podremos especificar el objeto a devolver como hemos visto hasta ahora.\nSupongamos que el servidor devuelve una lista de Strings. En java no se puede poner List\u003cString\u003e.class pues nos dar√° un error de sintaxis. Tampoco deber√≠amos escribir nuestro c√≥digo as√≠:\nResponseEntity\u003cList\u003cString\u003e\u003e myObject=restTemplate.getForEntity(url,List.class);pues se nos quejara de que hemos especificado que vamos a recibir un objeto List y no un objeto List\u003cString\u003e\nPor supuesto podr√≠amos poner lo siguiente:\nResponseEntity\u003cList\u003e myObject=restTemplate.getForEntity(url,List.class);pero nos saldr√° un aviso de que en List deber√≠amos especificar el tipo a recibir y nos puede dar problemas cuando Spring intente convertir el objeto JSON recibido.\nPara evitar este problema se debe utilizar la siguiente llamada.\npublic \u003cT\u003e ResponseEntity\u003cT\u003e exchange(RequestEntity\u003c?\u003e requestEntity, ParameterizedTypeReference\u003cT\u003e responseType) throws RestClientExceptionEn la clase ParameterizedTypeReference especificaremos el objeto a devolver.\nEn la propia documentaci√≥n de Spring hay un excelente ejemplo que clarifica la llamada.\nMyRequest body = ... RequestEntity request = RequestEntity .post(new URI(\"https://example.com/foo\")) .accept(MediaType.APPLICATION_JSON) .body(body); ParameterizedTypeReference\u003cList\u003cMyResponse\u003e\u003e myBean = new ParameterizedTypeReference\u003cList\u003cMyResponse\u003e\u003e() {}; ResponseEntity\u003cList\u003cMyResponse\u003e\u003e response = template.exchange(request, myBean);Como se ve, el truco es crear un objeto que extienda de la clase ParameterizedTypeReference (la cual es abstracta) y especificar el tipo del objeto a devolver.\nY con esto doy por terminada la serie de art√≠culos sobre RestTemplate.\nRecomiendo mirar todas las funciones de esta clase en la documentaci√≥n oficial de Spring donde estan todas las funciones de las que he hablado y algunas m√°s que si bien son √∫tiles no he tratado en esta serie, como puede ser la funci√≥n public void setMessageConverters(List\u003cHttpMessageConverter\u003c?\u003e\u003e messageConverters) para especificar los conversores a usar.\nUn saludo y hasta la pr√≥xima entrada.\n","description":"","tags":["java","rest","spring"],"title":"La Clase RestTemplate - 3","uri":"/clase-resttemplate-3/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular¬†\u003e¬†Aplicaci√≥n usando Java y Angular¬†\u003e¬†Frontend","content":"Una vez he explicado en la anterior entrada¬†como inicializa Angular la aplicaci√≥n, voy a explicar como hacer para que esta pueda aceptar par√°metros a trav√©s de la URL introducida en el navegador. B√°sicamente, lo que deseo hacer es que, suponiendo que nuestra aplicaci√≥n este corriendo en http://localhost:4200/ (es la direcci√≥n por defecto en la que escucha Node.js cuando lo lanzamos con el comando ng serve¬†), si vamos a la direcci√≥n http://localhost:4200/2018¬†nos muestre las ventas del ejercicio 2018. A su vez, si vamos a la direcci√≥n¬†http://localhost:4200/2018/3 nos deber√° mostrara los datos del ejercicio 2018 y en el detalle los datos del mes 3. Es decir, el primer n√∫mero sera el ejercicio y el segundo el mes. Si no se pone el segundo par√°metro iremos al mes 1 del ejercicio mandado. En el caso de no poner ning√∫n par√°metro, el programa nos preguntara el ejercicio con el correspondiente formulario.\nEn Angular, las rutas se definen creando un fichero TypeScript,¬†al que las buenas normas, nos aconsejan llamar app-routing.module.ts. Este fichero se dejara en el directorio src/app/.\nVeamos el fichero creado en nuestra aplicaci√≥n:\nconst routes: Routes = [ {path: ‚Äò:year‚Äô, component: DatosEjercicioComponent }, {path: ‚Äò:year/:month‚Äô, component: DatosEjercicioComponent } ];\n@NgModule({ imports: [ CommonModule, RouterModule.forRoot(routes) ], exports: [ RouterModule ], declarations: [] })\nexport class AppRoutingModule { }\nComo se ve, lo primero tenemos una serie de imports que necesitaremos.¬†A continuaci√≥n declaramos una variable, a la que llamamos **routes¬†** (le podriamos haber llamado mis_rutitas_chulis pero es por ser serios üòõ ) y que es un array de objetos tipo¬†Routes .¬†En esa variable es donde vamos a definir nuestras rutas.\nAs√≠, el primer elemento del array tiene el elemento path cuyo valor es ‚Äúyear‚Äù, y el elemento component cuyo valor es: DatosEjercicioComponent. Esto, Angular lo traducir√° por: cuando la URL tenga un √∫nico par√°metro (year) carga el componente¬†DatosEjercicioComponent.¬†El especificar que es un par√°metro lo hacemos con los dos puntos (‚Äú:‚Äù) antes de la palabra :year. Y el nombre de esa variable podremos capturarla y utilizarla en nuestro componente DatosEjercicioComponent.\nEn el caso de que la linea fuera:\nAngular cargar√≠a el componente indicado cuando fu√©ramos a la ruta http://localhost:4200/paco . Ojo, si la direcci√≥n fuera, otra, como http://localhost:4200/paco/el_guapo no funcionaria.\nAclarar, ademas, que DatosEjercicioComponent es el componente que hemos definido en¬†la linea import {DatosEjercicioComponent} from ‚Äò./datos-ejercicio/datos-ejercicio.component‚Äô. Si no tuvieramos ese import Angular nos dar√≠a un error.\nLa carga de la variable route, en el¬†modulo de rutas de Angular se hace con la linea: RouterModule.forRoot(routes)\nHay maneras de cargar diferentes rutas para una misma aplicaci√≥n, pero no vamos a hablar de ello en este curso.\nPara especificar que debe cargar el componente marcado por la ruta, debemos incluir en el c√≥digo HTML la siguiente etiqueta: . Esa etiqueta incrustara el correspondiente componente de la ruta, como hacia la etiqueta con el componente AppComponent en la anterior entrada.\nAhora veamos parte de nuestra clase datos-ejercicio.component.ts\nComo vemos, lo primero es importar los componentes para tratar rutas. Despu√©s especificamos que nuestra clase es del tipo¬†componente con la etiqueta @Component para despu√©s definirla.\nLo primero que encontramos es la palabra constructor, con esa palabra definimos un tipo de funci√≥n especial dentro de nuestra clase que sera llamada cuando el objeto sea creado. En nuestro ejemplo, cuando Angular encuentre la etiqueta y deba cargar nuestra clase, lo primero que har√° sera ejecutar el c√≥digo existente en esa funci√≥n.\nEn este caso, como veis, no hay nada dentro de la funci√≥n, sin embargo si que recibe una serie de par√°metros. Esas variables estar√°n disponibles dentro de nuestra clase, a nivel global. Eso es una caracter√≠stica de TypeScript, las variables recibidas en un constructor estar√°n disponibles para toda la clase y no solo dentro del constructor como ocurre en todos los dem√°s tipos de funciones.\nEn la funci√≥n ngOnInit, se le asigna a la variable global year el valor recibido por el componente de la ruta. Observ√©se el s√≠mbolo m√°s (+) . Esto convertir√° el texto recibido en un n√∫mero.\nLa funci√≥n ngOnInit es una funci√≥n especial de Angular y sera llamada una vez el componente a sido construido (o sea, despu√©s de llamar al constructor), pero antes de incrustarlo (por as√≠ decirlo) en la pantalla dentro del c√≥digo HTML. Hay otra serie de funciones especiales que pod√©is consultar en la pagina oficial de Angular.\nY con esto termino esta entrada hablando sobre las rutas en Angular. Pod√©is profundizar m√°s en este tema en la documentaci√≥n oficial de Angular¬†o visitando este otro excelente manual https://academia-binaria.com/paginas-y-rutas-angular-spa/\n","description":"","tags":["angular","angular6","curso","routes"],"title":"Angular ‚Äì Rutas","uri":"/2018/09/16/aplicacion-en-angular-rutas/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†J2EE","content":"El reci√©n salido NetBeans 9, es un excelente IDE, con soporte para Java 10 y 11, y con otra serie de caracter√≠sticas muy interesantes. Sin embargo, por temas de licencias con Oracle que es el due√±o del antiguo NetBeans, solo tiene soporte para¬†Java Standard Edition, no pudiendo, en teor√≠a, hacer aplicaciones para Java EE.\nPero es solo en teoria, pues NetBeans 9, mantiene la compatibilidad con la versi√≥n 8.2, incluso a nivel de plugins. As√≠ que podemos a√±adir las fuentes de la versi√≥n anterior y podremos crear aplicaciones Java EE.\nEso es tan simple como ir al men√∫ Tools y elegir la opci√≥n Plugins.¬†En la ventana de plugins, iremos a la pesta√±a settings y pulsaremos el bot√≥n Add. El cual nos mostrara la siguiente ventana:\nAh√≠ pondremos rellenaremos los 2 campos, de esta manera:\nName: NetBeans 8.2\nURL: http://updates.netbeans.org/netbeans/updates/8.2/uc/final/distribution/catalog.xml.gz\nDespu√©s, volveremos de darle al bot√≥n OK, volveremos a a√±adir una nueva entrada con estos datos:\nName: Plugin Portal\nURL: http://plugins.netbeans.org/nbpluginportal/updates/9.0/catalog.xml.gz\nLa pagina debe quedar como la siguiente.\nA partir de ah√≠, ya veremos que nos aparecen como disponibles muchos m√°s plugins, entre los que veremos Java EE Base. Una vez instalado este plugin ya podremos realizar nuestras aplicaciones Java EE.\n¬°¬°¬° A seguir estudiando!!!\n","description":"","tags":["java","Java ee","netbeans9","tomcat"],"title":"Desarrollando aplicaciones Java EE en NetBeans 9","uri":"/2018/09/05/desarrollando-aplicaciones-java-ee-en-netbeans-9/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular¬†\u003e¬†Aplicaci√≥n usando Java y Angular¬†\u003e¬†Backend","content":"En esta entrada, continuare con la parte servidor, que ya comenc√© en el articulo anterior.\nVoy a desarrollar la parte donde se responden a las peticiones REST. Para el que no sepa que es eso de REST, pod√©is empezar leyendo este articulo de la wikipedia, pero os podeis quedar con la idea de que es como una petici√≥n web normal, solo que en vez de trabajar con paginas HTML enteras, se trabaja con intercambio de datos m√°s o menos en crudo.\nEn este ejemplo, el codigo que trata esas peticiones esta en la clase: YagesController\nCon solo este c√≥digo vamos a ser capaces de responder a las peticiones.\nLo primero es anotar la clase como del tipo @RestContoller. Despu√©s especificamos la ruta que este controlador debe responder. Eso lo hago con la anotaci√≥n @RequestMapping(‚Äú/rest‚Äù). Eso har√° que todas las peticiones que vayan a la URL¬†MIDOMINIO/MICONTEXTO/rest sean tratadas por esta clase.\nComo dije anteriormente un servidor REST, atiende peticiones HTTP, como son las que se utilizan habitualmente en un navegador web, y como cualquier petici√≥n web, siempre debe haber una URL (o direcci√≥n) de la p√°gina que debemos visitar. As√≠, cuando visitamos Google, en nuestro navegador ponemos la direcci√≥n: http://www.google.com. Pues bien, si nuestro servicio REST responde, por ejemplo en la pagina www.profesor-p.com, para interactuar con √©l deber√≠amos hacer una petici√≥n web (es decir visitar la pagina web) : http://www.profesor-p.com/rest/LO_QUE_SEA\n¬ø Y que es entonces eso de MI_CONTEXTO ? . Bueno, es muy com√∫n que en un servidor de aplicaciones (Tomcat, por ejemplo) haya varias aplicaciones corriendo al mismo tiempo, sobre todo, para optimizar recursos. De esta manera si tenemos un servidor de Tomcat corriendo en la direcci√≥n www.servidor-profesorp.com, cuando queramos acceder a la aplicaci√≥n de contabilidad pondremos: www.servidor-profesorp.com/contabilidad y si queremos acceder a la aplicaci√≥n de nominas iremos a www.servidor-profesorp.com/nominas y as√≠ con las diferentes aplicaciones. Es decir todas las peticiones de la aplicaci√≥n web de contabilidad responder√°n bajo el contexto de www.servidor-profesorp.com/contabilidad y todas las peticiones de la aplicaci√≥n nominas responder√°n bajo el contexto de **www.servidor-profesorp.com/**nominas. A todos los efectos, la idea es como cuando se ejecuta una aplicaci√≥n¬†de escritorio en Windows, como puede ser Word, Excel o el Bloc de Notas, cada aplicaci√≥n del escritorio tiene su propia ventana, pues en una aplicaci√≥n web, cada¬†una tiene su contexto o directorio donde responde a las peticiones.\nAclarar, que hay veces, que el¬†contexto puede no existir en el caso de que solo tengamos una aplicaci√≥n corriendo en esta direcci√≥n web o bien, porque es la direcci√≥n principal y no haga falta ponerla. En esos casos las peticiones REST ser√°n respondidas en MIDOMINIO/rest.\nPara el resto del articulo vamos a suponer que nuestra aplicaci√≥n esta respondiendo en la URL http://localhost:8080/yagesserver que es donde normalmente se realizan las pruebas. Localhost, como todo el mundo sabe, es la direcci√≥n interna¬†del servidor (que sera probablemente tu ordenador personal en este ejemplo) donde se esta corriendo el programa. Y yaggesserver es el contexto donde responder√° la aplicaci√≥n.\nY como un ejemplo, vale m√°s que mil palabras, aqu√≠ vemos un ejemplo de la una petici√≥n REST, haciendo uso de la funci√≥n getAno() de la clase YagesController.\nY como esta entrada me esta quedando un poco larga, continuare con ella en un pr√≥ximo articulo.\n¬°¬° A seguir estudiando !!\n","description":"","tags":["java","rest","spring","tomcat"],"title":"Backend  (III)","uri":"/2018/09/04/aplicacion-en-spring-rest-y-angular-3a-parte/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Restful","content":"En esta ocasi√≥n hablare de la clase WebClient de SpringBoot.\nEl proyecto de ejemplo esta disponible en: https://github.com/chuchip/webClientExample\nEsta clase seria la equivalente a RestTemplate pero para realizar peticiones as√≠ncronas.\nPara poder usar esta clase debemos poner estas dependencias en nuestro fichero maven\n\u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-webflux\u003c/artifactId\u003e \u003c/dependency\u003eEsto es as√≠ porque debemos usar WebFlux el cual esta disponible con la versi√≥n 5.0 de Spring. Esta versi√≥n de Spring requiere que usemos al menos Java 8.0.\nCon WebFlux el cual esta basado en el proyecto Reactor podemos crear aplicaciones reactivas. Este tipo de aplicaciones se caracteriza porque las peticiones no son bloqueantes y porque se utiliza ampliamente la programaci√≥n funcional\nPara entender este articulo hay que tener ciertas nociones sobre como funciona Reactor y la clase Mono . Aunque si has utilizado Streams en Java puedes pensar que un objeto Mono es como un Stream que puede emitir un valor o un error.\nPero no voy a profundizar en estos temas que se escapan al √°mbito de este articulo, ser√° suficiente con decir que gracias a la clase WebClient podremos realizar varias llamadas en paralelo a uno o varios servidores, de tal manera que si a cada llamada le cuesta 2 segundos responder y realizamos 5 llamadas, podremos conseguir tener todas las respuestas en poco m√°s de 2 segundos, en vez de los 10 que necesitar√≠amos habitualmente.\nLlamadas en Paralelo En el programa de ejemplo he creado una parte servidora y otra cliente. La parte servidora se levantara en el puerto 8081 y la parte cliente en el puerto 8080 que es el que tiene por defecto las aplicaciones de Spring Boot.\n@SpringBootApplication public class WebServerApplication { public static void main(String[] args) { new SpringApplicationBuilder(WebServerApplication.class). properties(Collections.singletonMap(\"server.port\", \"8081\")).run(args); } }Si realizamos una petici√≥n REST a la URL http://localhost:8080/client/XXX ejecutaremos la funci√≥n testGet de la clase ClientController que detallo a continuaci√≥n:\n@RestController() @RequestMapping(\"/client\") @Slf4j public class ClientController { final String urlServer=\"http://localhost:8081\"; @GetMapping(\"/{param}\") public Mono\u003cResponseEntity\u003cMono\u003cString\u003e\u003e\u003e testGet(@PathVariable String param) { final long dateStarted = System.currentTimeMillis(); WebClient webClient = WebClient.create(urlServer+\"/server/\"); Mono\u003cClientResponse\u003e respuesta = webClient.get().uri(\"?queryParam={name}\", param).exchange(); Mono\u003cClientResponse\u003e respuesta1 = webClient.get().uri(\"?queryParam={name}\",\"SPEED\".equals(param)?\"SPEED\":\"STOP\").exchange(); Mono\u003cResponseEntity\u003cMono\u003cString\u003e\u003e\u003e f1 = Mono.zip(respuesta, respuesta1) .map(t -\u003e { if (!t.getT1().statusCode().is2xxSuccessful()) { return ResponseEntity.status(t.getT1().statusCode()).body(t.getT1().bodyToMono(String.class)); } if (!t.getT2().statusCode().is2xxSuccessful()) { return ResponseEntity.status(t.getT2().statusCode()).body(t.getT2().bodyToMono(String.class)); } return ResponseEntity.ok().body(Mono.just( \"All OK. Seconds elapsed: \" + (((double) (System.currentTimeMillis() - dateStarted) / 1000)))); }); return f1; }Como se ve es un simple controlador donde realizamos dos llamadas tipo get a la URL http://localhost:8081. En la primera llamada se pasa como par√°metro lo recibido en la variable param. En la segunda se pasa la cadena ‚ÄúSTOP‚Äù si param es diferente de SPEED.\nEl servidor que esta escuchando en el puerto 8081 al recibir como par√°metro el texto STOP realiza un sleep durante 5 segundos.\nComo he dicho, las llamadas al servidor se realizan usando la clase WebClient . Para ello, al crear la clase especificamos la URL base donde queremos llamar.\nWebClient webClient = WebClient.create(urlServer+\"/server/\");Despu√©s ejecutamos la llamada del tipo GET al servidor, pas√°ndole el par√°metro queryParam. Por fin, con la llamada a exchange recibiremos un objeto Mono que contiene una clase ClientResponse la cual ser√≠a equivalente a la clase ResponseEntity de RestTemplate. Es decir, contendr√° el c√≥digo HTTP devuelto por el servidor, el cuerpo y las cabeceras.\nMono\u003cClientResponse\u003e respuesta = webClient.get().uri(\"?queryParam={name}\", param).exchange();Un momento, ¬øhe dicho que ejecutaremos?. Pues he mentido. Realmente solo se ha declarado lo que queremos hacer. Precisamente la gracia de la programaci√≥n reactiva es que hasta que alguien no se subscribe a una petici√≥n nada se ejecuta, por lo cual la petici√≥n al servidor no se ha realizado todav√≠a.\nEn la siguiente l√≠nea declaramos la segunda llamada al servidor:\nMono\u003cClientResponse\u003e respuesta1 = webClient.get().uri(\"?queryParam={name}\",\"SPEED\".equals(param)?\"SPEED\":\"STOP\").exchange();Finalmente creamos un objeto Mono que ser√° el resultado de los dos anteriores, usando la funci√≥n zip .\nUsando la funci√≥n map devolveremos un objeto ResponseEntity con el c√≥digo HTTP igual a OK si las dos llamadas han respondido con un 2XX o bien el c√≥digo HTTP devuelto por el servidor y el mensaje devuelto\nAl ser WebClient reactivo las dos llamadas se realizan simult√°neamente y por lo tanto veremos que aunque hagamos la llamada curl http://localhost:8080/client/STOP que realizara sendas llamadas al servidor con el texto STOP con lo cual cada llamara costara 5 segundos, la respuesta de ambos la tendremos disponible en poco m√°s de 5 segundos.\nAll OK. Seconds elapsed: 5.092LLamada tipo POST En la funci√≥n testURLs hay un ejemplo de una llamada usando POST.\nEsta funci√≥n recibe en el cuerpo un Map que luego se meter√° en las cabeceras de la petici√≥n. Adem√°s este map ser√° mandado en la petici√≥n POST que se har√° al servidor.\n@PostMapping(\"\") public Mono\u003cString\u003e testURLs(@RequestBody Map\u003cString,String\u003e body, @RequestParam(required = false) String url) {\tlog.debug(\"Client: in testURLs\"); WebClient.Builder builder = WebClient.builder().baseUrl(urlServer). defaultHeader(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON_VALUE); if (body!=null \u0026\u0026 body.size()\u003e0 ) { for (Map.Entry\u003cString, String\u003e map : body.entrySet() ) { builder.defaultHeader(map.getKey(), map.getValue()); } } WebClient webClient = builder.build();\tString urlFinal; if (url==null) urlFinal=\"/server/post\"; else urlFinal=\"/server/\"+url; Mono\u003cString\u003e respuesta1 = webClient.post().uri(urlFinal).body(BodyInserters.fromObject(body)).exchange() .flatMap( x -\u003e { if ( ! x.statusCode().is2xxSuccessful()) return Mono.just(\"LLamada a \"+urlServer+urlFinal+\" Error 4xx: \"+x.statusCode()+\"\\n\"); return x.bodyToMono(String.class); });\treturn respuesta1;\t}\tPara insertar el cuerpo del mensaje usaremos la clase auxiliar BodyInserters si el mensaje estuviera en un objeto Mono se podr√≠a usar este c√≥digo:\nBodyInserters.fromPublisher(Mono.just(MONO_OBJECT),String.class);Al realizar un flatMap capturaremos la salida del objeto ClientResponse y devolveremos un objeto Mono con la cadena que deseamos devolver. La funci√≥n flatMap aplanara ese objeto Mono recogiendo el String que hay en su interior y es por ello que recibiremos un Mono\u003cString\u003e y no un Mono\u003cMono\u003cString\u003e\u003e como pasar√≠a su us√°ramos la funci√≥n map.\nRealizando la siguiente llamada\n\u003e curl -s -XPOST http://localhost:8080/client -H 'Content-Type: application/json' -d'{\"aa\": \"bbd\"}'Obtendremos la salida siguiente:\nthe server said: {aa=bbd} Headers: content-length:12 Headers: aa:bbd Headers: accept-encoding:gzip Headers: Content-Type:application/json Headers: accept:*/* Headers: user-agent:ReactorNetty/0.9.0.M3 Headers: host:localhost:8081Esta salida es producida por la funci√≥n postExample del servidor.\n@PostMapping(\"post\") public ResponseEntity\u003cString\u003e postExample(@RequestBody Map\u003cString,String\u003e body,ServerHttpRequest request) { String s=\"the server said: \"+body+\"\\n\"; for (Entry\u003cString, List\u003cString\u003e\u003e map : request.getHeaders().entrySet()) { s+=\"Headers: \"+map.getKey()+ \":\"+map.getValue().get(0)+\"\\n\";\t}\treturn ResponseEntity.ok().body(s); }Observar que al estar utilizando la librer√≠a WebFlux que no es totalmente compatible con javax.servlet debemos recibir un objeto ServerHttpRequest para recoger todas las cabeceras en crudo. El equivalente en una aplicaci√≥n no reactiva ser√≠a un objeto HttpServletRequest\nSi ejecutamos la sentencia:\ncurl -s -XPOST http://localhost:8080/client?url=aa -H 'Content-Type: application/json' -d'{\"aa\": \"bbd\"}'El cliente intentara llamar a http://localhost:8081/server/aa lo cual provocara un error y recibiremos la siguiente salida:\nhttp://localhost:8081/server/aa Called. Error 4xx: 404 NOT_FOUNDY esto es todo sobre la clase WebClient de momento ;-) . En pr√≥ximos art√≠culos seguir√© hablando de programaci√≥n reactiva.\n","description":"","tags":["webflux","reactor","java","rest","spring"],"title":"La clase WebClient","uri":"/webclient/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular¬†\u003e¬†Aplicaci√≥n usando Java y Angular¬†\u003e¬†Backend","content":"Continuo con la serie de art√≠culos explicando una aplicaci√≥n donde la parte de servidor esta creada con Java, apoy√°ndose en el framework Spring y la parte del cliente usara Angular. Para la comunicaci√≥n entre la aplicaci√≥n usare peticiones REST, por supuesto utilizando el protocolo JSON.\nEn la anterior entrada¬†empece a explicar como se desplegar√≠a la aplicaci√≥n y en que URLs se procesar√≠an las diferentes peticiones. Ahora explicare como funcionan las diferentes peticiones.\nEn la clase **YagesController¬†**es donde se hace toda la magia üòâ\nComo ya comente, lo primero es la anotaci√≥n¬†@RestController, que le dice a Spring que nuestra clase va a procesar peticiones tipo REST. A continuaci√≥n, la anotaci√≥n¬†@RequestMapping(‚Äú/rest‚Äù) especifica que debe responder a las peticiones que vayan a la URL **/rest¬†**\nComo dije en la entrada anterior, por claridad en los ejemplos vamos a suponer que nuestra aplicaci√≥n responde en la direcci√≥n (URL) : http://localhost:8080/yagesserver . Aclarar, que el 8080 es el puerto donde escuchara y¬†yagesserver es el directorio o contexto base donde estar√° nuestra aplicaci√≥n.\nLa clase¬†define un √∫nico objeto tipo¬†**YagesBussines¬†**a trav√©s del sistema de inyecci√≥n de Spring y tiene dos funciones, que explico a continuaci√≥n:\nFunci√≥n:¬†getAno Como se ve, la funci√≥n esta anotada con la directiva¬†@RequestMapping. Con esta directiva vamos a especificar que direcci√≥n (dentro de /rest/ )¬†vamos a tratar en esta funci√≥n. As√≠, en este caso le decimos que vamos a procesar aquellas peticiones que tengan un solo par√°metro y, que ademas,¬†la petici√≥n sea del tipo GET. Tambi√©n especificamos que la respuesta a la petici√≥n sera del tipo¬†application/json.\nEs decir, el esta funci√≥n sera llamada ( y su c√≥digo ejecutado ) cuando hagamos una petici√≥n del tipo http://localhost:8080/yagesserver/rest/2018¬†. Aclarar que no sera llamada si el numero de par√°metros no es exactamente uno. Por ejemplo esta petici√≥n¬†http://localhost:8080/yagesserver/rest/2018/2 no sera tratada ya que recibe dos par√°metros¬†(2018 y 2).\nCuando definimos la funci√≥n, se a√±ade la anotaci√≥n¬†@PathVariable que indica que la variable puesta a continuaci√≥n deber√° contener el par√°metro de la URL. As√≠ en la petici√≥n¬†**http://localhost:8080/yagesserver/rest/2018¬†**nuestra variable anoId¬†tendr√° el valor 2018. L√≥gicamente, esto obliga a que el par√°metro sea del tipo entero, pues hemos definido que nuestra variable anoId es del tipo¬†int.\nEsta funci√≥n, devuelve un objeto¬†VentasAnoBean que esta definida en la siguiente clase:\nComo se ve, la clase es una simple clase POJO, con unas variables, accesibles a trav√©s de sus correspondientes m√©todos getter, que la librer√≠a Lombok, a trav√©s de la anotaci√≥n @Data creara. Teneis mas detalles de la librer√≠a¬†Lombok en otra entrada de mi pagina.\nAl haber¬†especificado que debe devolver un objeto con la codificaci√≥n¬†_json,¬†_Spring, apoy√°ndose en las librer√≠as¬†de¬†**jackson,¬†**devolver√° la correspondiente cadena de texto, formateada adecuadamente. No voy a hablar de como¬†se codifica o descodifica una cadena JSON¬†en esta entrada y realmente tampoco nos importa. De eso ya se encargaran las correspondientes librer√≠as. Lo que importa es que esta funci√≥n un objeto del tipo VentasAnoBean¬†en un formato que luego una aplicaci√≥n cliente va a saber reconstruir.\nAqu√≠ se ve una captura de pantalla de como accediendo a la URL:\n**http://localhost:8080/yagesserver/rest/2018¬†**es devuelto un objeto VentasAnoBean, que incluye un array de objetos tipo _ventasMes,¬†_y las variables kilosVentaAct, impVentaAct, kilosVentaAnt, impVentaAnt,gananciaAct y gananciaAnt.\nSi usamos el comando curl, para hacer la petici√≥n HTTP, veremos que la salida, en crudo,¬†seria la siguiente:\nFunci√≥n: getSemanas En esta funci√≥n se van a tratar todas aquellas peticiones como la siguiente¬†**localhost:8080/yagessever/rest/2018/2¬†**es decir, aquellas que tengan dos parametros.\nEsto se especifica por la anotaci√≥n¬†@RequestMapping donde especificamos que el valor debe ser _‚Äú/{anoId}/{mesId}‚Äù,¬†_despues, en la declaraci√≥n de nuestra funci√≥n, especificamos en que variables deben ser introducidos los par√°metros de la URL. As√≠, el primer par√°metro sera introducido en la variable anoId y el segundo, en la variable mesId.\nEsta funci√≥n devuelve un Array de objetos tipo VentasSemanaBean, que no es sino un simple POJO definido en la siguiente clase:\nSi realizamos una petici√≥n, usando curl, obtendremos la siguiente salida:\nEn la ultima entrada¬†de la parte servidor, explicare como se consiguen los objetos¬†VentasMesBean y¬†VentasAnoBean.\n¬°¬° Hasta pronto !!\n","description":"","tags":["java","json","rest","spring","tomcat"],"title":"Backend (IV)","uri":"/2018/09/05/aplicacion-en-spring-rest-y-angular-4a-parte/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular¬†\u003e¬†Aplicaci√≥n usando Java y Angular¬†\u003e¬†Backend","content":"En esta ultima parte de la parte servidor hablare de como se crean los objetos que en el anterior articulo se devolv√≠an.\nEstos objetos eran del tipo _VentasAnoBean¬†_y un ArrayList de _VentasSemanaBean.¬†_Para conseguirlos se llamaban a sendas funciones en¬†la clase **YagesBussines,¬†**que eran las que constru√≠an esos objetos.\nEmpezare describiendo la clase\nLo primero, marcamos nuestra clase como @Component para que Spring la cree y este disponible para inyectarla en otras clases. De otra manera nuestra clase¬†_YagesController¬†_ no podr√≠a usarla.\nAhora inyectamos los diferentes objetos que vamos a usar, incluyendo el objeto jdbc que es de tipo¬†JdbcOperations .¬†Para que Spring pueda crear ese objeto debemos tener la funci√≥n¬†jdbcTemplate, que, usando la variable¬†dataSource¬†. devolver√° un objeto tipo JdbcTemplate el cual implementa el interface¬†JdbcOperations para usarlo en la variable¬†jdbc, ya que la funci√≥n esta¬†marcarla con la anotaci√≥n @Bean y eso har√° que Spring sepa de donde sacar un objeto tipo JdbcOperations.\nFunci√≥n:¬†getVentasAno La funci√≥n¬†getVentasAno, simplemente llama a la funci√≥n¬†**getKilosPorMes,¬†**la cual devuelve una lista de objectos tipo¬†VentasMesBean (List),¬†para despu√©s ir a√±adi√©ndolo al objeto tipo VentasAno.\nObs√©rvese que la funci√≥n comprueba si el acumulado de kilos de venta,¬†a trav√©s de la funci√≥n getKilosVentaAct(), es igual a cero. Si es cero, lanza una excepci√≥n del tipo¬†VentasNotFoundException\nEsa excepci√≥n se define en el paquete yages.yagesserver.bussines.\nLo destacable de esta clase es la anotaci√≥n¬†@ResponseStatus, la cual har√° que cuando se lance, a trav√©s de una sentencia _throw,¬†_sea capturada por Spring de tal manera que la respuesta a la peticion HTTP sea lo indicado, en este caso un¬†HttpStatus.NOT_FOUND (el tipico 404: P√°gina no encontrada). De esta manera si la consulta no devuelve ning√∫n dato en vez de devolver un null, devolveremos un mensaje de error para que el cliente pueda tratarlo m√°s f√°cilmente.\nEn otras palabras, cuando se lance una excepci√≥n del tipo VentasNotFoundException el cliente recibir√° un error del tipo 404 (NOT FOUND).\nLa funci√≥n¬†getKilosPorMes, realiza una serie de consultas a trav√©s de¬†_jdbc.¬†_\nObs√©rvese el uso intensivo de sentencias¬†_lamba.¬†_ Os recuerdo que ten√©is un par de entradas sobre como este tema aqu√≠ y aqu√≠\nEsta funci√≥n consulta primero todas las ventas del a√±o mandado, meti√©ndolas en un objeto List, despu√©s hace la misma consulta sobre el a√±o anterior al mandado, metiendo el resultado en otro objeto List. Despu√©s recorre la primera lista a, con la funci√≥n forEach, y si existe el mismo mes en el segundo objeto, establece los par√°metros del a√±o anterior en el primer objeto VentasMesBean. Por ultimo devuelve la lista de objetos (List)\nFunci√≥n: getDatosSemana Esta funci√≥n es la llamada cuando queremos buscar los datos de venta de un a√±o y semana. Ofreciendo, semana por semana, los datos del periodo solicitado.\nNo es mi idea explicar paso a paso la l√≥gica de esta funci√≥n solo incidir en el uso de JPA, usando la clase CalendarioRepositorioService, que se limita a usar la clase generada automagicamente por Spring, la cual implementara el interface CalendarioRepository.\nEl c√≥digo por si est√°is interesados en curiosear como se buscan los datos lo ten√©is en mi pagina de GitHub\nY con esto termino las entradas, explicando la parte servidor de esta aplicaci√≥n.\nEspero que haya sido de utilidad y no os perd√°is las siguientes sobre como hacer la parte cliente con Angular.\n¬°¬° Hasta pronto !!\n","description":"","tags":null,"title":"Backend (V)","uri":"/2018/09/06/aplicacion-en-spring-rest-y-angular-5a-parte/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Base","content":"Cuando se hacen aplicaciones empresariales, lo normal es que, como m√≠nimo, primero se desplieguen en un entorno de pruebas y despu√©s¬†en el entorno de producci√≥n. Cada entorno de pruebas tendr√° diferentes bases de datos, diferentes URLs y toda una serie de par√°metros espec√≠ficos, con el fin de que una aplicaci√≥n en desarrollo no acceda nunca a datos reales.\nEstableciendo perfiles en la aplicaci√≥n Spring provee una manera sencilla de gestionar esta situaci√≥n haciendo uso de los perfiles.\nHay varias maneras de establecer el perfil a utilizar por una aplicaci√≥n:\nPas√°ndolo como variable de entorno en JAVA. Por ejemplo:¬†‚Äújava -jar -Dspring.profiles.active=MI_PROFILE application.jar‚Äù Pas√°ndolo como un argumento al programa. ‚Äújava -jar application.jar ‚Äìspring.profiles.active=MI_PROFILE‚Äù Especificarlo con una anotaci√≥n en el propio programa, en la etiqueta @SpringBootTest, pasandole el parametro ‚Äúspring.profiles.active‚Äù. Muy √∫til para prueba unitarias.@SpringBootTest(‚Äúspring.profiles.active=test‚Äù) Con la anotaci√≥n @ActiveProfiles@ActiveProfiles(‚ÄúMI_PROFILE‚Äù) Creando Beans En el ejemplo que esta disponible en https://github.com/chuchip/profilestest se pueden ver como una aplicaci√≥n saca diferentes mensajes y accede a diferentes datos seg√∫n el perfil establecido.\nEl proyecto es una simple aplicaci√≥n web, que accede a una base de datos H2, mostrando diferentes datos seg√∫n el perfil. Para crear el proyecto simplemente hay que a√±adir las siguientes dependencias: JPA, H2 y WEB\nEmpezando por la clase principal veremos como definir diferentes beans dependiendo del perfil.\n@SpringBootApplication @Configuration public class ProfilesTests { @Autowired private Environment environment; public static void main(String[] args) { SpringApplication.run(ProfilesTests.class, args); } @Bean @Profile(\"test\") IWrite getWriterTest() { return new WriteImpl(\"..test.. \"+getProfile());\t} @Bean @Profile(\"default\") IWrite getWriterDefault() { return new WriteImpl(\"..default.. \"+getProfile());\t} @Bean @Profile(\"other\") IWrite getWriterOther() { return new WriteImpl(\"..other.. \"+getProfile());\t} String getProfile() { if (environment.getActiveProfiles()==null) return \"default\"; String[] profiles=environment.getActiveProfiles(); return profiles.length\u003e0?profiles[0]:\"default\"; } } En las funciones getWriterXXX, se devuelve siempre un bean que implementa el interface IWrite. La definici√≥n de este interfaz es muy simple, como se puede ver en el siguiente c√≥digo:\npublic interface IWrite { public void writeLog(String log); public String getProfile(); } Y su implementaci√≥n en la clase WriteImpl es tambi√©n muy sencilla:\npublic class \u003cstrong\u003eWriteImpl\u003c/strong\u003e implements IWrite{ private String profile; public WriteImpl(String profile) { this.profile=profile; } public String getProfile() { return profile; } @Override public void writeLog(String log) { System.out.println(\"Profile: \"+profile+\" -\u003e \"+ log); } } Volviendo a la clase principal, se ve que la funci√≥n getWriterTest() instancia un objeto WriteImpl, pasando al constructor el literal ..test.. y lo devuelto por la funci√≥n getProfile(), la cual devuelve un String con el perfil activo.\nLa funci√≥n getWriterDefault() hace lo mismo que la anterior pero instanciando un objeto WriteImpl al cual en el constructor se le pasa el literal ..default..y lo devuelto por la funci√≥n getProfile(). Y lo mismo con la funci√≥n getWriterOther() pero pasando el literal ..other..\nLo importante de estas funciones es la anotaci√≥n @Bean con la cual le decimos a Spring que cuando en alguna parte del c√≥digo se deba inyectar el objeto devuelto en esa funci√≥n que ejecute esta funci√≥n para conseguirlo.\nUn poco de teor√≠a Cuando Spring encuentre una anotaci√≥n @Autowired con un objeto tipo IWrite como ocurre en el siguiente c√≥digo:\n@Autowired IWrite out;\tbuscara de alguna manera un objeto que implemente ese interface o que se llame igual que el objeto en si.\nAs√≠, para conseguir el objeto, Spring tiene dos opciones:\nBuscar dentro del proyecto una class que se llame IWrite o una clase que implemente el interfaz IWrite que este anotada con la etiqueta @Component Buscar dentro de una clase anotada con la etiqueta @Configuration una funci√≥n anotada con @Bean y que devuelva un objeto de ese tipo. Se pueden dar varios casos en este momento:\nEncuentra un objeto y lo usa. No encuentra un objeto con lo cual da un error y la aplicaci√≥n no se ejecutara. Encuentra m√°s de un objeto y como no sabe con cual quedarse da un error y la aplicaci√≥n no se ejecuta. Como se puede ver, en el c√≥digo hay tres funciones que devuelven un objeto tipo IWrite, con lo cual Spring dar√≠a un error, para evitarlo a√±adimos la etiqueta @Profile . De esta manera si el perfil de la aplicaci√≥n no coincide con el literal dentro de @Profile esa funci√≥n ser√° ignorada. Y como se puede ver, cada funci√≥n tiene su propia anotaci√≥n @Profile con lo cual Spring solo tratara una de ellas.\nDestacar que si lanzamos la aplicaci√≥n sin especificar ning√∫n perfil, Spring elige el perfil default.\nPor supuesto, si lanz√°ramos la aplicaci√≥n con un perfil que no fuera default,test o other la aplicaci√≥n fallar√≠a, al no encontrar ning√∫n objeto que implemente el interfaz IWrite\nCreando Componentes Para tener un ejemplo del caso en que Spring deba buscar una clase, en el proyecto de ejemplo se puede ver como se define el interfaz IRead el cual es implementado por la clases ReadDefImpl y ReadOtherImpl.\nObservar como ambas clases tienen las anotaciones @Component y @Profile antes de la definici√≥n de la clase. L√≥gicamente en una clase la etiqueta @Profile tiene el par√°metro default y en otra el par√°metro es other.\nEsta es la clase ReadDefImpl\n@Component @Profile(\"default\") public class \u003cstrong\u003eReadDefImpl\u003c/strong\u003e implements IRead{ @Autowired ProfileRepository customerRepository; @Autowired IWrite out; public String readRegistry(int id) { out.writeLog(\"entry in ReadImpl\" ); Optional\u003cProfileEntity\u003e registroOpc=customerRepository.findById(id); if (!registroOpc.isPresent()) { System.out.println(\"Customer \"+id+\" NOT found\"); return null; } ProfileEntity registro=registroOpc.get(); out.writeLog(\"Name customer \"+id+\" is: \"+registro.getName()); return registro.getName(); } } Y as√≠ empieza la clase ReadOtherImpl\n@Component @Profile(\"other\") public class \u003cstrong\u003eReadOtherImpl\u003c/strong\u003e implements IRead{ El cuerpo es de la clase es exactamente igual que la de la clase ReadDefImpl\nLeyendo ficheros de propiedades El c√≥digo de la clase ProfilesController es el siguiente:\n@RestController public class ProfilesController { @Autowired IRead read; @Value(\"${app.ID}\") int id; @Autowired IWrite write; @GetMapping(\"/hello\") public String get(@RequestParam(value=\"name\",required=false) String name) { return \"Hello \"+(name==null?\"SIN NOMBRE\":name)+ \"\u003cbr\u003e\u003cbr\u003e The name of the profile number:\"+ id+\" in the database H2 is: \"+read.readRegistry(id)+ \"\u003cbr\u003e The profile used in the application is : \"+write.getProfile(); } } En esta clase podemos ver, la anotaci√≥n @Value(‚Äú${app.ID}‚Äù) con ella lo que le estamos diciendo a Spring es que inicialice la variable que hay a continuaci√≥n ( ‚Äúid‚Äú) con el valor que encuentre en un fichero de properites. Como no especificamos ninguno buscara dentro de application.properties y encontrara la siguiente l√≠nea:\napp.ID=1 con lo cual la variable id tendr√° el valor 1\nPero si nos fijamos en nuestro proyecto adem√°s del fichero application.properties tambi√©n tenemos un fichero llamado application-other.properties, esto es porque Spring en el caso de que el perfil sea other buscara primero el fichero application-other.properties para establecer las propiedades.\nDe esta manera, cuando el perfil sea other leer√° el fichero application-other.properties y encontrara la l√≠nea:\napp.ID=2 con lo cual la variable id tendr√° el valor 2\nEs importante recalcar que el fichero application.properties se leer√° y procesara siempre, independientemente del perfil elegido, pero luego se buscara el del perfil activo. Si no queremos que lea ese fichero, una soluci√≥n seria renombrar el fichero a application-default.properties con lo cual solo se usar√≠a con el perfil default.\nProbando la aplicaci√≥n Para probar la aplicaci√≥n en Eclipse podremos crear dos configuraciones. Una para el perfil default donde podemos ver que no especificamos ning√∫n perfil con lo cual Spring asignara el perfil default y otra para el perfil other La del perfil default escuchara en el puerto 8080 y la de other en el 8081. Eso esta especificado con la l√≠nea server.port=8080 en el fichero application.properties y con la l√≠nea server.port:8081en el fichero application-other.properties\nComo se puede ver en las siguientes pantallas, la llamada a http://localhost:8080/hello?name=profesor devuelve la siguiente salida: Se puede ver como el valor de la variable id es 1 y como lee en la base de datos H2, el valor del registro correspondiente.\nEn la salida est√°ndar veremos el siguiente texto:\nProfile: ..default.. default -\u003e entry in ReadImpl Profile: ..default.. default -\u003e Name customer 1 is: default Si llamamos a http://localhost:8081/hello?name=profesor, veremos la siguiente salida en el navegador:\nEn la salida est√°ndar veremos el siguiente texto:\nEn el articulo siguiente pod√©is ver el uso de los perfiles para testear la aplicaci√≥n con JUnit\nHasta entonces, ¬°¬° que la curiosidad no os abandone üòâ !!\n","description":"","tags":["java","profiles","spring boot"],"title":"Perfiles en Spring Boot","uri":"/2019/02/28/perfiles-en-spring-boot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Database","content":"En una entrada anterior, puse un ejemplo de como usar expresiones Lambas, como me parece que es un tema interesante, este de la programaci√≥n funcional, voy a insistir en este tema.\nUna cosa¬†muy com√∫n en Java es¬†tener que pesarle como argumento a una funci√≥n externa, una objeto que implemente una funci√≥n donde nosotros pondremos el c√≥digo a ejecutar en nuestra¬†aplicaci√≥n.\nUn ejemplo practico es en el uso de¬†la clase¬†JdbcOperations, que es utilizada por Spring para poder realizar operaciones JDBC, la cual tiene la funci√≥n:¬†T¬†query(java.lang.String¬†sql, java.lang.Object[]¬†args, ResultSetExtractor rse) throws DataAccessExceptionLo que hay que entender es que como funciona realmente esta funci√≥n **query¬†**. Esta funci√≥n necesita tres parametros:\nsentencia SQL¬†a ejecutar,¬†Argumentos de la sentencia SQL Clase ResultSetExtractor donde nuestro programa har√° algo con los resultados obtenidos. As√≠, voy a suponer que queremos realizar una consulta sobre una tabla, buscando el nombre de un usuario, a trav√©s de su identificador. La tabla¬†**usuarios,¬†**tendr√≠a solo estos dos campos:\nidentificador, que seria un varchar de 15 caracteres (un texto para los que no conocen SQL) nombre, que seria otro de varchar¬†de 50 caracteres (otro texto, vamos). Es decir queremos buscar, el nombre de un usuario, sabiendo su identificador. La sentencia SQL para realizar esta b√∫squeda seria\nLa interrogaci√≥n final hace referencia al par√°metro que pasaremos, es decir el identificador del usuario.\nPor lo tanto, en nuestro programa pondremos una sentencia, como la siguiente:\njdbc.query(\"select nombre from usuarios where identificador = ?\", new[] { \"usuario1\" },¬†OBJETO_RESULTSETEXTRACTOR)El par√°metro¬†**new Object[] { ‚Äúusuario1‚Äù }¬†**simplemente crea un array de Objetos con los diferentes par√°metros que necesitara nuestra sentencia SQL. En este caso solo necesita un par√°metro que es el identificador del usuario. Vamos a buscar el usuario que tiene como identificador¬†usuario1.\nY nos queda por definir el objeto del tipo¬†ResultSetExtractor, donde interactuaremos con los resultados de nuestra sentencia SQL.\nEse tipo de objeto esta definido en el interface ResultSetExtractor el cual solo tiene una funci√≥n, que detallo a continuaci√≥n:\nT¬†mapRow(java.sql.ResultSet¬†rs, int¬†rowNum) throws java.sql.SQLExceptionAntes de Java 1.8, deber√≠amos crear una clase que implemente el interfaz¬†ResultSetExtractor. Esa clase seria algo as√≠ como:\nclass miResultSetExtractor implements¬†ResultSetExtractor { @Override public T¬†mapRow(java.sql.ResultSet¬†rs, int¬†rowNum) throws java.sql.SQLException { System.out.println(\"El nombre del Usuario es: \"+rs.getString(\"nombre\")); // \u003cstrong\u003eCODIGO A EJECUTAR\u003c/strong\u003e } }Y ejecutar√≠amos la llamada a la funci√≥n query de esta manera:\nTambi√©n podr√≠amos crear una clase abstracta, a la hora de llamar a la funci√≥n¬†**query,¬†** con una sentencia como esta:\nEl caso es que tenemos que poner un mont√≥n de c√≥digo auxiliar¬†cuando nosotros solo quisi√©ramos poner nuestro System.out.println.\nY ahora es cuando viene al rescate las expresiones Lamba.\nLa expresi√≥n lambda se compone de dos partes. Los par√°metros a mandar y el c√≥digo a ejecutar.\nAs√≠, nosotros mandaremos dos parametros:¬†**param1¬†**y param2. (le podriamos haber puesto los nombres que quisieramos)\nComo se ve, no hay que especificar de que tipo son esos par√°metros, Java, se encargara de eso. Te estar√°s preguntado, pero, ¬ø como funciona esto ?.\nBueno, en primer lugar, Java, cuando compile nuestro c√≥digo buscara que que objeto debe crear, dependiendo del par√°metro esperado por la funci√≥n¬†**jdbc.query().¬†**Vera que espera un objeto que implemente el interface¬†**ResultSetExtractor¬†**y comprobara que ese interface solo tiene una funci√≥n, por lo cual, sabr√° f√°cilmente que par√°metros se tipo de objetos se deben pasar como objetos.\nEs por eso que solo se pueden aplicar este tipo de expresiones lambda cuando el interface implemente una √∫nica funci√≥n.\nUna vez que Java, sabe que objetos debe pasar, el sustituir√° nuestras variables¬†**param1¬†**y **param2¬†**y las usara en el cuerpo de nuestra expresi√≥n Lambda. Por ello ahora nuestro c√≥digo:¬†**System.out.println(‚ÄúEl nombre del Usuario es: ‚Äú+param1.getString(‚Äúnombre‚Äù))¬†**cogera la variable¬†**param1¬†**y la usara sabiendo que es un objeto tipo ResultSet. Observar que aunque la variable param2, no la usamos en nuestro c√≥digo, debemos definirla igualmente.\nEspero haberme explicado bien, y no dud√©is en preguntar o seguirme en mi cuenta de twitter.\n¬° Hasta la pr√≥xima !!\n","description":"","tags":null,"title":"Lambdas en JDBC Data","uri":"/2018/08/22/acceso-a-base-de-datos-con-jdbc-spring/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Base","content":"Creo que Aspect Oriented Programing (AOP) no es muy conocido. Spring lo usa mucho y, a menudo, cuando pones etiquetas en tu c√≥digo, Spring usar√° AOT.\nNo quiero explicar que es AOP porque hay mucha documentaci√≥n al respecto. En este art√≠culo, quiero darte algunos ejemplos y casos en los que el uso de AOP podr√≠a mejorar tu c√≥digo. Quiero mostrarte una nueva herramienta para programar. Veamos si puedo hacerlo.\nEn primer lugar, te estar√°s preguntando, ¬øpor qu√© deber√≠a usar AOP? ¬øQu√© lo diferencia?\nBueno, lo m√°s destacable de AOP es que te permite ejecutar tu propio c√≥digo cuando un c√≥digo externo va a ser ejecutado.\nPero antes de que puedas hacer esta magia en tu c√≥digo debes incluir las dependencias necesarias en tu proyecto. S√≥lo tienes que a√±adir estas l√≠neas a tu archivo pom.xml (estamos hablando de maven, ¬øverdad?)\n\u003cdependencia\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-aop\u003c/artifactId\u003e \u003c/dependencia\u003eEn nuestro ejemplo, digamos que tenemos este archivo java:\n@Service public class TestServiceImpl implements TestService{ @Override public void doSomething() { log.info(\"Here, I'll do something\"); } @Override public void doSomethingMore() { log.info(\"Here, I'll do something More\"); } @Override public String doSomethingWithParams(String param1) { log.info(\"I've received the param `{}` \",param1); return \"\\nI've received the param '\"+param1+\"'\"; } }Ahora, imagina que quieres tomar el control cuando la funci√≥n ‚ÄúdoSomething‚Äù es llamada. ¬øNo ser√≠a genial si pudieras escribir c√≥digo para que cuando esta funci√≥n sea llamada, tu propio c√≥digo tambi√©n se ejecute?.\nOk, eso es lo que AOP te permite hacer.\nVeamos el caso m√°s simple. ¬øQuieres escribir un log cuando la funci√≥n ‚ÄúdoSomething‚Äù es llamada?. F√°cil. Escribe una clase como esta:\nimport org.springframework.stereotype.Component; import org.aspectj.lang.annotation.Aspect; @Aspect @Component @Slf4j public class LogAspect { @Before(\"execution(* com.profesorp.springaop.service.TestService.doSomething(..))\") public void logAll() { log.info(\"I'm the Aspect logAll\"); } }S√≠, eso es todo.\nNecesitas escribir una clase con las etiquetas ‚Äú@Component‚Äù y ‚Äú@Aspect‚Äù y luego, crear una funci√≥n con la etiqueta @Before(\"execution(* com.profesorp.springaop.service.TestService.doSomething(..))\")\nAhora, cuando el c√≥digo llame a la funci√≥n ‚ÄúdoSomething‚Äù el c√≥digo de la funci√≥n ‚ÄúlogAll‚Äù se ejecutar√° antes que el c√≥digo de ‚ÄúdoSomething‚Äù.\nUtilizaremos la etiqueta ‚Äúbefore‚Äù cuando necesitemos ejecutar c√≥digo antes de que se ejecute el c√≥digo de destino. La palabra ‚Äúexecution‚Äù es obvia, ¬øverdad? Exacto, lo que viene despu√©s ser√° la clase con la que queremos interactuar. En este caso, el primer ‚Äú*‚Äù indica que la funci√≥n puede devolver cualquier cosa, despu√©s se prondr√° el nombre de la clase y entre los corchetes, pones ‚Äú..‚Äù para indicar que el n√∫mero de argumentos puede ser cualquiera.\nPero, el poder viene con la etiqueta \" @Around\" . Con esta etiqueta no s√≥lo puedes ser un espectador, puedes ser un jugador.\nDigamos que queremos ejecutar alg√∫n c√≥digo cuando la funci√≥n ‚ÄúdoSomethingWithParams‚Äù es llamada pero, tambi√©n quieres, ver el par√°metro con que fue llamada, cambiar el valor del par√°metro o, incluso, ¬øpor qu√© no?, cancelar la llamada. Y, recuerda, no quieres (o puedes) tocar el c√≥digo de la funci√≥n ‚ÄúdoSomethingWithParams‚Äù.\nVale. Hag√°moslo. En la clase anterior ‚ÄòLogAspect‚Äô vamos a incluir este c√≥digo:\n@Around(\"execution(public * com.profesorp.springaop.service.TestService.*(..))\") public Object takeControl(ProceedingJoinPoint proceedingJoinPoint) throws Throwable { Object[] args =proceedingJoinPoint.getArgs(); log.info(\"Number of Args of function: {} \",args.length); if (args.length==1) { if ( \"skip\".equals(args[0].toString())) { log.info(\"I'm going to skip the call of Args of function: {} \", args.length); return \"Skip in aspect!\"; } if ( \"add\".equals(args[0].toString())) { Object result=proceedingJoinPoint.proceed(new Object[] {\"You've sent the string add \"}); log.info(\"Executed target added 'add'\"); return result; } } Arrays.stream(args).forEach(arg -\u003e log.info(\"Arg of the function: {}\",arg.toString())); Object result=proceedingJoinPoint.proceed(); if (result==null) log.info(\"There is not result\"); else log.info(\"Result of join is {}\",result.toString()); return result; }En este caso, quiero hacer algo cuando se llama a alguna funci√≥n ‚Äòpublic‚Äô de la clase ‚Äúcom.profesorp.springaop.service.TestService‚Äù.\nObserva que la funci√≥n ‚ÄòtakeControl\" recibe el objeto ‚ÄòProceedingJoinPoint‚Äô. La clase ‚Äòorg.aspectj.lang.ProceedingJoinPoint‚Äô es la que vamos a utilizar para la ‚Äòmagia‚Äô.\nEn primer lugar, uso la funci√≥n ‚ÄúgetArgs()‚Äù para obtener el n√∫mero de par√°metros que la funci√≥n fue llamada. Si el n√∫mero de argumentos es uno, y es ‚Äòskip\" entonces devuelvo la cadena ‚ÄúSkip in aspect!‚Äù. Hay una cosa importante aqu√≠: la funci√≥n ‚ÄòdoSomethingWithParams‚Äô no se ejecutar√° y el objeto devuelto ser√° ‚ÄòSkip in aspect!‚Äô.\n¬øEst√°s un poco confundido? No te preocupes. Perm√≠tanme tratar de explicarlo mejor.\nSupongamos, que tienes este controlador:\n@RestController @RequiredArgsConstructor @Slf4j public class TestController { final TestService service; @GetMapping(\"something/{param1}\") public String doSomethingWithParam(@PathVariable String param1) { String var1= service.doSomethingWithParams(param1); return STR.\"I called doSomethingWithParams with param1 '\\{param1}' and it returned: '\\{var1}'\"; } }jAhora, cuando se llama a este endpoint, la l√≠nea ‚Äúservice.doSomethingWithParams(param1)‚Äù se ejecutar√° y el resultado de la ejecuci√≥n se almacena en la cadena ‚Äúvar1‚Äù, ¬øcorrecto?\nOk, entonces el valor de ‚Äúvar1‚Äù ser√°: ‚ÄòSkip in aspect!‚Äô.\nComo hemos dicho, se puede cambiar el valor utilizado para llamar a la funci√≥n de destino. En nuestro ejemplo, si enviamos la cadena ‚Äòadd‚Äô usaremos la funci√≥n ‚Äòproceed‚Äô de ‚ÄòproceedingJoinPoint‚Äô para ejecutar la funci√≥n con nuestros propios par√°metros.\nTe recomiendo que clones mi repositorio donde podr√°s encontrar todo el c√≥digo que has visto en este art√≠culo. Visita: https://github.com/chuchip/springAop Encontrar√°s m√°s ejemplos y aprender√°s m√°s cosas interesantes sobre AOP.\nUna √∫ltima cosa: En algunos ejemplos, puede que veas algo parecido a este c√≥digo:\n@Pointcut(\"execution(public * com.profesorp.springaop.service.TestService.*(..))\") public void pointCut1(){ log.info(\"This, in pointCut1, is never executed.\"); } @Around(\"pointCut1()\") public Object aroundPoint1(ProceedingJoinPoint proceedingJoinPoint) throws Throwable { ... }No te preocupes. En este caso, la etiqueta ‚Äú@Pointcout‚Äù se utiliza porque, probablemente usted quiere tener m√°s que s√≥lo una funci√≥n para esa clase, por lo que, ahora puede utilizar ‚Äú@Around‚Äù, ‚Äú@Before‚Äù , etc, con el nombre de la funci√≥n de su PointCut. Es s√≥lo una manera de escribir menos c√≥digo algunas veces.\nGracias por leer este art√≠culo y espero que te haya resultado interesante.\n","description":"","tags":["aot","java","spring"],"title":"AOT en Spring","uri":"/springboot/aot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Base","content":"Una vez que tenemos nuestra fant√°stica aplicaci√≥n realizada con Spring lo normal es que queramos ver como se va comportando. Para ello, la manera m√°s f√°cil es escribir mensajes dentro de la aplicaci√≥n, explicando por que funciones entra, como se toman las decisiones y, en general, como se va comportando.\nRedirigiendo la salida. Spring Boot, como cualquier aplicaci√≥n, por defecto sacara todos los mensajes por la salida est√°ndar y/o errores, pero a menudo deseamos guardar esos mensajes en un fichero. Para ello hay varias opciones. La primera y mas obvia es redirigir salida est√°ndar y errores a un fichero. As√≠, en Linux y/o Windows, podr√≠amos ejecutar nuestra aplicaci√≥n de esta manera:\njava -jar APP.JAR \u003e PATH/FICHERO.LOG 2\u003e\u00261\nEsto, obviamente funciona, pero tendremos que mirar en el fichero generado para ver como va todo, sin posibilidad de ver inmediatamente en nuestra consola como ha ido el proceso reci√©n lanzado.\nSi lo que deseamos es que deje la salida est√°ndar en un fichero, pero, que adem√°s, nos muestre en la consola esos misma salida podremos lanzar el proceso de esta manera:\njava -jar -Dlogging.file.name=PATH/FICHERO.LOG APP.JAR\nPor supuesto tambi√©n podemos poner en nuestro fichero de configuraci√≥n esa misma propiedad y podremos lanzar el proceso sin el par√°metro ‚Äò-D‚Äô\nFichero:application.properties\nlogging.file.name=PATH/FICHERO.LOG APP.JARSi queremos ejecutar el proceso desde maven pondremos este comando:\nmvn spring-boot:run -Dspring-boot.run.arguments=‚Äìlogging.file.name=PATH/FICHERO.LOG\nConfigurando nivel de log Por supuesto los mensajes que deseamos mostrar los podemos escribir con un simple system.out.print pero desde luego no ser√≠a muy elegante ni practico. Siempre es recomendable usar un logger.\nSpring usa Commons Logging, usando por defecto Logback, si bien incluye tambi√©n configuraciones por defecto para r Java Util Logging y Log4J2.\nPor defecto Spring Boot, muestra los mensajes de nivel ERROR-level, WARN-level, and INFO-level pero esto se puede cambiar de diferentes maneras.\nLa mas simple es a√±adiendo el par√°metro --trace o --debug cuando ejecutemos nuestro programa.\njava -jar APP.JAR ‚Äìdebug\nOtra manera ser√° especificar en la propiedad ‚Äôlogging.level.root‚Äô. Esto lo haremos a√±adiremos la l√≠nea correspondiente en el fichero application.properties o a la hora de ejecutarlo, a√±adiendo el parametro adecuado:\njava -jar -Dlogging.level.root=DEBUG APP.JAR\nUna vez m√°s si usamos maven para ejecutar el proceso podremos poner el siguiente comando:\nmvn spring-boot:run -Dspring-boot.run.arguments=-logging.level.root=TRACE\nPor supuesto, se permite especificar niveles de logging por paquetes, as√≠, si queremos que nuestra aplicaci√≥n que esta en el paquete ‚Äòcom.profesorp.miaplicacion‚Äô muestre los mensajes de nivel debug, pero el resto de aplicaciones (que os recuerdo tambi√©n tendr√°n sus salidas a trav√©s del log) solo muestren los mensajes de error, escribiremos esta sentencia:\njava -jar -Dlogging.level.root=ERROR -D-Dlogging.level.com.propesorp.miaplicacion=DEBUG APP.JAR\nFormateando la salida Spring por defecto muestra los mensajes de error con este formato:\n2019-03-05 10:57:51.112 INFO 45469 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet Engine: Apache Tomcat/7.0.52 2019-03-05 10:57:51.253 INFO 45469 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContextEs decir:\nD√≠a y hora, incluyendo milisegundos. Nivel de Log: ERROR, WARN, INFO, DEBUG, or TRACE. Identificador o n√∫mero del proceso Un --- como separador El nombre del Thread entre corchetes. El nombre de la clase donde se esta escribiendo el log. El mensaje de log. Tambi√©n podemos especificar que use colores para cuando muestre en la consola los logs, con la siguiente variable: spring.output.ansi.enabled=true. As√≠, los mensajes de error los mostrara en ROJO, los de aviso (WARN) en amarillo y los dem√°s, en verde.\nEste formato puede ser cambiado con la variable logging.pattern.console para la salida de consola y con logging.pattern.file para la salida a fichero. Un ejemplo configuraci√≥n seria este:\n# Salida a consola. logging.pattern.console= %d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg%n # Salida a consola con colores. logging.pattern.console=%clr(%d{yy-MM-dd E HH:mm:ss.SSS}){blue} %clr(%-5p) %clr(${PID}){faint} %clr(---){faint} %clr([%8.15t]){cyan} %clr(%-40.40logger{0}){blue} %clr(:){red} %clr(%m){faint}%n # Salida a un fichero logging.pattern.file= %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%El formato de estas variables es un poco complicado y os aconsejo ver este enlace si quer√©is modificarlo.\nConfiguraci√≥n avanzada Si Spring Boot encuentra en el classpath un fichero con alguno de estos nombres, lo usara para configurar los loggers.\nlogback-spring.xml logback.xml logback-spring.groovy logback.groovy Spring recomienda que usemos la variante -spring como se describe aqu√≠.\nEnlaces a m√°s documentaci√≥n Y para finalizar os dejo unos enlaces con m√°s documentaci√≥n en ingles, sobre logging:\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-logging\nhttps://www.baeldung.com/spring-boot-logging\nhttps://howtodoinjava.com/spring-boot2/logging/spring-boot-logging-configurations/\n","description":"","tags":["logging","java","mvn","spring boot"],"title":"Logging en Spring Boot","uri":"/springboot/logging-en-spring-boot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"Aqu√≠ pondremos las presentaciones\nPresentaci√≥n demoEsto es un peque√±o texto para demostrar como subir m√°s contenido a HUGO\n","description":"","tags":null,"title":"Presentaciones","uri":"/es/presentacion/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"Mi nombre es Jes√∫s Javier Puente,¬†vivo¬†en Logro√±o, apasionado de la inform√°tica,¬†soy programador desde hace demasiados a√±os, ademas de Administrador de sistemas, DBA.\nMi correo electr√≥nico es chuchip@gmail.com y en mi cuenta de Twitter¬†@chuchip\nEsta es mi p√°gina en Linkedin. Tengo¬†algunos de mis provectos en GitHub\nPuedes ver mi experiencia laboral en est√° pagina.\n","description":"","tags":null,"title":"Contacto","uri":"/es/contacto/index.html"},{"breadcrumb":"","content":"¬°¬°El profe os da la bienvenida!! En este blog intentar√© ir poniendo art√≠culos sobre temas que me parecen interesantes, que sean did√°cticos y con ejemplos de c√≥mo hacer una cosa e incluso dos. üòÑ\nHablando siempre sobre inform√°tica, incidiendo sobre todo en el mundo Java y especialmente en Spring. Tambi√©n encontrar√°s art√≠culos sobre JPA, Hibernate, Spring boot, Kafka y otros temas. Y por supuesto de Hugo framework con el que se ha realizado esta p√°gina\nEn el men√∫ lateral tienes un men√∫ que agrupa los art√≠culos por tem√°tica, creando un libro.\nPor supuesto siempre puedes utilizar el buscador encontrar art√≠culos que contengan una palabra especifica y, adem√°s, podr√°s localizar art√≠culos por temas, por ejemplo si quieres buscar art√≠culos sobre Java, podr√≠as ir a www.profesor-p/es/tags/java/\nEspero que encontr√©is √∫tiles las entradas y por supuesto cualquier comentario ser√° bienvenido.\n","description":"","tags":null,"title":"Bienvenido a mi p√°gina","uri":"/es/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"","description":"","tags":null,"title":"Categories","uri":"/es/categories/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: demo","uri":"/es/tags/demo/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: demo","uri":"/es/categories/demo/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: presentaci√≥n","uri":"/es/categories/presentaci%C3%B3n/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Presentaciones","content":"Esto es un peque√±o texto para demostrar como subir m√°s contenido a HUGO\nAqu√≠ escribiremos el contenido de nuestro texto.\nPor supuesto se pueden subir im√°genes y musica\ny pr√°cticamente cualquier contenido tipo HTML\nLista\nccc dd aaa bb ","description":"","tags":["demo"],"title":"Presentaci√≥n demo","uri":"/2024/10/10/demo/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"","description":"","tags":null,"title":"Tags","uri":"/es/tags/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: java","uri":"/es/tags/java/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: java","uri":"/es/categories/java/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Java","content":"En articulo anterior (https://www.profesor-p.com/springboot/aot/index.html) hablaba sobre AOT (Aspect Oriented Programing) y comentaba que Spring Boot hac√≠a uso de proxies para implementarlos. En este art√≠culo profundizare como usar proxies en java usando la librer√≠a java.lang.reflect.Proxy\n¬ø Qu√© son y para qu√© sirven ? En el contexto de Java, un ‚Äúproxy‚Äù se refiere a un objeto que act√∫a como intermediario o representante de otro objeto. El proxy permite controlar el acceso al objeto principal y puede agregar funcionalidades adicionales, como la seguridad, la manipulaci√≥n de los datos o la realizaci√≥n de tareas antes o despu√©s de que se llame a ciertos m√©todos del objeto principal.\nNosotros vamos a hablar de proxies din√°micos que son los que nos permiten escribir modificar el comportamiento de un c√≥digo escrito por terceros sin modificar las clases externas.\nEjemplo pr√°ctico De acuerdo, como siempre, creo que esto se entender√° mejor con un ejemplo, que pod√©is encontrar en mi repositorio de github: https://github.com/chuchip/java_proxies\nEste proyecto esta compuesto por dos m√≥dulos, siendo dumb el que funcionara como librer√≠a que luego el m√≥dulo springusara.\nSi nos fijamos, en el directorio dumb tenemos solo dos clases.\nDumbImpl DumbInterface DumbImples la clase que implementa el interface DumbInterfaceque como se puede ver es bien sencilla:\npackage com.profesorp.dumb; public class DumbImpl implements DumbInterface { @Override public void sayHello() { System.out.println(\"Hello\"); } @Override public int sum2Numbers(int num1,int num2) { System.out.println(\"I'm adding two numbers\"); return num1+num2; } }Para el ejemplo, vamos a suponer que no tenemos acceso al c√≥digo fuente de esta m√≥dulo (paquete) y de hecho en el directorio spring, dentro del fichero pom.xml , podemos ver como se incluye como librer√≠a\n\u003cdependency\u003e \u003cgroupId\u003ecom.profesorp\u003c/groupId\u003e \u003cartifactId\u003edumb-library\u003c/artifactId\u003e \u003cversion\u003e1.1-SNAPSHOT\u003c/version\u003e \u003c/dependency\u003eVamos, por lo tanto, a centrarnos en el modulo spring.\nEn la clase SimpleProxyApptenemos este c√≥digo:\nimport com.profesorp.dumb.DumbImpl; import com.profesorp.dumb.DumbInterface; import lombok.extern.slf4j.Slf4j; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy; @Slf4j public class SimpleProxyApp { public static void main(String[] args) { DumbInterface dumbClass= (DumbInterface) Proxy.newProxyInstance( DumbInterface.class.getClassLoader(), new Class[] {DumbInterface.class}, new DumbProxy(new DumbImpl())); dumbClass.sayHello(); log.info(\"Adding number {} to number {}. Result {}\",1,2, dumbClass.sum2Numbers(1,2)); log.info(\"Adding number {} to number {}. Result {}\",0,2, dumbClass.sum2Numbers(0,2)); log.info(\"Adding number {} to number {}. Result {}\",0,0, dumbClass.sum2Numbers(0,0)); } }Voy a explicar el c√≥digo poco a poco.\nUsando la funci√≥n est√°tica newProxyInstancede la clase java.lang.reflect.Proxy vamos a crear un objeto que implemente el interface DumbInterface, para ello, como par√°metros deberemos pasarle los siguientes par√°metros:\nEl cargador de clases de nuestro Interface: DumbInterface.class.getClassLoader() La clase de nuestro interfaz. DumbInterface.class Una instancia de nuestra clase proxy (DumbProxy, la cual veremos un poco m√°s adelante) a la que como par√°metro en el constructor le pasaremos una instancia de la clase sobre la que queremos actuar como proxy. En nuestro caso DumbImpl Como se ve en el c√≥digo con esto tendremos una instancia de una clase que implementa el interfaz DumbInterface . En las l√≠neas siguientes llamamos a las dos funciones disponibles.\nResaltar que los proxis siempre se deben crear sobre un interfaz. Si la clase a la que le queremos poner un proxy no implementa un interfaz, deber√≠amos usar librer√≠as como Byte Buddy (https://bytebuddy.net/) o si estas trabajando con versiones de Java inferiores a la 17, podr√≠as usar CGLIB (https://github.com/cglib/cglib). Esto te puede dar una pista del porque siempre se recomienda usar interfaces en Spring Boot ? ¬°Exacto!. Spring Boot, usar√° java.lang.reflect.Proxy siempre que pueda, ya que el utilizar otras librer√≠as es mas lento y costoso.\nEntonces, por recapitular, la llamada para crear un proxy, se har√° pasando los primeros par√°metros haciendo referencia al interface y a nuestra clase proxy siempre hay que pasarle como par√°metro una instancia de la clase.\nA continuaci√≥n veremos que tiene la clase proxy.\n@Slf4j class DumbProxy implements InvocationHandler { Object target; public DumbProxy(Object target) { this.target=target; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\"----\"); Object obj=null; switch (method.getName()) { case \"sayHello\": log.info(\"'sayHello' function was invoked\"); method.invoke(target); break; case \"sum2Numbers\": log.info(\"'sum2Numbers' function was invoked with numbers {}, {} \",args[0],args[1] ); if ((Integer) args[0]==0) args[0]=10; // Change the number 0 to 10. if ((Integer) args[1]==0) obj=-1; else obj=method.invoke(target,args); break; default: log.info(\"I don't know what function is this: \"+method.getName()); } return obj; }Lo primero que debemos tener en cuenta es que la clase proxy debe implementar el interfaz InvocationHandler. Este interfaz es un interfaz funcional (por lo cual podr√≠amos usar un lambda) con una √∫nica funci√≥n:\nObject invoke(Object proxy, Method method, Object[] args) throws Throwable El primer par√°metro recibido (proxy) ser√° la instancia del objeto del que hacemos de proxy (en nuestro caso DumbImpl). El segundo par√°metro ser√° el m√©todo al que se esta llamando y el tercer los par√°metros con los que se le esta llamando al m√©todo.\nComo se puede observar la clase DumbProxytiene el constructor que recibe el objeto al que va hacer de proxy.\nComo se puede ver f√°cilmente en el c√≥digo, dependiendo del nombre de la funci√≥n invocada y de los par√°metros pasados podemos tomar determinadas acciones. Finalmente, si ejecutamos la funci√≥n invoke de la clase Methodrecibida ejecutaremos el c√≥digo de la clase sobre la que estamos haciendo de proxy.\nCuando iniciemos la aplicaci√≥n sobre la clase DumbProxy, obtendremos la siguiente salida:\n---- 06:39:58.425 [main] INFO com.profesorp.proxies.DumbProxy -- 'sayHello' function was invoked 06:39:58.432 [main] INFO com.profesorp.dumb.DumbImpl -- Hello ---- 06:39:58.432 [main] INFO com.profesorp.proxies.DumbProxy -- 'sum2Numbers' function was invoked with numbers 1, 2 06:39:58.441 [main] INFO com.profesorp.dumb.DumbImpl -- I'm adding the numbers 1 2 06:39:58.441 [main] INFO com.profesorp.proxies.SimpleProxyApp -- Adding number 1 to number 2. Result 3 ---- 06:39:58.441 [main] INFO com.profesorp.proxies.DumbProxy -- 'sum2Numbers' function was invoked with numbers 0, 2 06:39:58.441 [main] INFO com.profesorp.dumb.DumbImpl -- I'm adding the numbers 10 2 06:39:58.441 [main] INFO com.profesorp.proxies.SimpleProxyApp -- Adding number 0 to number 2. Result 12 ---- 06:39:58.441 [main] INFO com.profesorp.proxies.DumbProxy -- 'sum2Numbers' function was invoked with numbers 0, 0 06:39:58.441 [main] INFO com.profesorp.proxies.SimpleProxyApp -- Adding number 0 to number 0. Result -1 Process finished with exit code 0Como se puede observar, antes de llamar a los m√©todos de la clase DumbImpl el c√≥digo de la funci√≥n invokees ejecutado y nuestro proxy toma el control.\nProxies en Spring Boot Como he comentado, los proxies son utilizados internamente a menudo en el framework Spring. Por ejemplo cuando a√±adimos una etiqueta @transacional a una funci√≥n de un servicio, Spring creara un proxy para poder iniciar y cerrar la transacci√≥n antes y despu√©s de llamar a nuestra funci√≥n.\nSi seguimos la clase SimpleProxyApp veremos un ejemplo de como sacar un mensaje de log que muestra el n√∫mero de conexiones activas cuando se cierra una conexi√≥n a la base de datos en Spring Boot, usando JPA .\nComo es un poco avanzado no voy a explicar los detalles, pero si miramos el c√≥digo de la clase ProxyDataSource veremos como se hace uso de un proxy que invoca a la clase TenantAwareInvocationHandler la cual, al invocar al m√©todo ‚Äòclose‚Äô recupera el numero de conexiones en el pool Hikari (el que tiene por defecto Spring Boot) y la muestra en el log.\nSi ejecutamos el siguiente c√≥digo en una consola de bash podremos ver como el numero de conexiones es mostrado:\nbash -c \"for i in {1..5}; do curl -s http://localhost:8080 \u0026 sleep 1 done \" \u003e\u003e /dev/nullEn la salida de nuestro programa veremos lo siguiente\n2024-01-01T21:24:42.295+01:00 INFO 19604 --- [nio-8080-exec-2] c.p.p.configuration.ProxyDataSource : Create connection 2024-01-01T21:24:43.343+01:00 INFO 19604 --- [nio-8080-exec-9] c.p.p.configuration.ProxyDataSource : Create connection 2024-01-01T21:24:44.404+01:00 INFO 19604 --- [nio-8080-exec-1] c.p.p.configuration.ProxyDataSource : Create connection 2024-01-01T21:24:45.464+01:00 INFO 19604 --- [nio-8080-exec-6] c.p.p.configuration.ProxyDataSource : Create connection 2024-01-01T21:24:46.307+01:00 INFO 19604 --- [nio-8080-exec-2] c.p.p.configuration.ProxyDataSource : Closing connections. Active connections: 4 2024-01-01T21:24:46.525+01:00 INFO 19604 --- [io-8080-exec-10] c.p.p.configuration.ProxyDataSource : Create connection 2024-01-01T21:24:47.352+01:00 INFO 19604 --- [nio-8080-exec-9] c.p.p.configuration.ProxyDataSource : Closing connections. Active connections: 4 2024-01-01T21:24:48.408+01:00 INFO 19604 --- [nio-8080-exec-1] c.p.p.configuration.ProxyDataSource : Closing connections. Active connections: 3 2024-01-01T21:24:49.469+01:00 INFO 19604 --- [nio-8080-exec-6] c.p.p.configuration.ProxyDataSource : Closing connections. Active connections: 2 2024-01-01T21:24:50.543+01:00 INFO 19604 --- [io-8080-exec-10] c.p.p.configuration.ProxyDataSource : Closing connections. Active connections: 1Con lo cual queda demostrado que mostramos el n√∫mero de conexiones activas y cuando se crea una conexi√≥n.\nEspero que os haya picado la curiosidad y que os haya gustado este articulo.\nSaludos, el profe.\n","description":"","tags":["java","spring"],"title":"Proxies in Java","uri":"/proxies-in-java/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: spring","uri":"/es/tags/spring/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: spring","uri":"/es/categories/spring/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: aot","uri":"/es/tags/aot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: aot","uri":"/es/categories/aot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: junit","uri":"/es/tags/junit/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: junit","uri":"/es/categories/junit/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: mockito","uri":"/es/tags/mockito/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: mockito","uri":"/es/categories/mockito/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: mvc","uri":"/es/tags/mvc/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: mvc","uri":"/es/categories/mvc/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: springboot","uri":"/es/tags/springboot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: springboot","uri":"/es/categories/springboot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: test","uri":"/es/tags/test/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: jpa","uri":"/es/tags/jpa/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: jpa","uri":"/es/categories/jpa/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: qbe","uri":"/es/tags/qbe/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: qbe","uri":"/es/categories/qbe/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: spring boot","uri":"/es/categories/spring-boot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: spring data JPA","uri":"/es/tags/spring-data-jpa/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: spring data JPA","uri":"/es/categories/spring-data-jpa/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Database","content":"A menudo, cuando arranca nuestra aplicaci√≥n, tenemos que tener ciertos registros en algunas tablas de diccionarios. Por ejemplo, en la tabla ‚Äòpaises‚Äô puede que debamos tener cargados los pa√≠ses del mundo. O en la tabla ‚Äòroles‚Äô, debemos tener definidos una serie de roles.\nUna de las maneras de cargar esos datos es definiendo una rutina en el programa, la cual se ejecutara al inicio y que insertara esos registros necesarios. El problema que nos podemos encontrar es que entonces, debemos borrar todos los registros y luego volverlos a insertar para no tener registros duplicados.\nEstar√≠a bien que pudi√©ramos comprobar f√°cilmente si el registro a insertar ya existe y en caso de que sea as√≠ que no lo insertara.\nEn este art√≠culo vamos a utilizar Query By Example (https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#query-by-example) de Spring Data JPA para realizar esta tarea.\nEmpezaremos creando un proyecto en Spring Boot, con los siguientes starters:\nSpring Data JPA Lombok H2 (la base de datos que usaremos) En este proyecto he creado dos entidades para las pruebas. Son estas:\n@Entity @Setter @Getter @NoArgsConstructor @AllArgsConstructor @Builder @ToString public class Alumno { @GeneratedValue(strategy=GenerationType.AUTO) @Id\tint id; String nombre; Integer edad; String clase; }@Entity @Setter @Getter @Builder @NoArgsConstructor @AllArgsConstructor @ToString public class Profesor { @GeneratedValue(strategy=GenerationType.AUTO) @Id Integer id; String nombre; String materia; String colegio;\tInteger numeroClase; }Tambi√©n he creado sus correspondientes interfaces para los repositorios.\npublic interface AlumnoRepository extends JpaRepository\u003cAlumno, Integer\u003e{} public interface ProfesorRepository extends JpaRepository\u003cProfesor, Integer\u003e{}Ahora, en la clase JpaQueryByExampleApplication he a√±adido este c√≥digo\n@Autowired AlumnoRepository alumnRepository; @Autowired ProfesorRepository teacherRepository; @PostConstruct void iniciar() { log.info(\"\\n\\nINSERTANDO PROFESORES .... \\n\\n\"); var teacher = Profesor.builder().nombre(\"Nombre1\").colegio(\"Colegio1\").materia(\"Matematicas\").numeroClase(55) .build(); guardar(teacherRepository, teacher); teacher = Profesor.builder().nombre(\"Nombre2\").colegio(\"Colegio2\").materia(\"Lengua\").numeroClase(55).build(); guardar(teacherRepository, teacher); // Buscando registros cuyo nombre sea \"Nombre1\" sin importar los demas campos. var buscaNombre = Profesor.builder().nombre(\"Nombre1\").build(); guardar(teacherRepository, buscaNombre); log.info(\"\\n\\nINSERTANDO ALUMNOS .... \\n\\n\"); var alumno = Alumno.builder().clase(\"1A\").edad(12).nombre(\"Luis\").build(); guardar(alumnRepository, alumno); guardar(alumnRepository, alumno); alumno = Alumno.builder().clase(\"1A\").edad(13).nombre(\"Luis\").build(); guardar(alumnRepository, alumno); }Como se puede apreciar, la funci√≥n iniciar tiene la etiqueta @PostConstruct lo que har√° que Spring Boot ejecute esta funci√≥n una vez se haya inicializado la aplicaci√≥n.\nEn ella, creamos diferentes instancias de Profesor y Alumno llamando a la funci√≥n guardar donde esta lo interesante.\nvoid guardar(JpaRepository jpaRepository, Object entidad) { Example qbe = Example.of(entidad); var registros = jpaRepository.findAll(qbe); if (registros.size() \u003e 0) log.warning(\"Ya existe Registro: \" + entidad.toString()); else { jpaRepository.save(entidad); log.info(\"Insertado registro: \" + entidad.toString()); } }Recibiremos un objeto que implemente la interfaz JpaRepository y un objeto que ser√° donde est√©n los datos, es decir nuestra entidad.\nA partir de la funci√≥n est√°tica org.springframework.data.domain.Example.of() (no confundir con org.hibernate.criterion.Example) crearemos un objeto Example que contendr√° los datos sobre los que realizaremos la b√∫squeda.\nUna vez tenemos nuestro objeto Example creado, lo utilizamos para llamar a la funci√≥n findAll del interface JpaRepository .\nEsto devolver√° una List con todos los registros cuyos valores sean igual a los valores mandados en entidad siempre y cuando el valor del campo no sea null, en cuyo caso no se realizara la b√∫squeda por ese campo.\nEs decir, en la primera llamada a guardar se ejecutar√° esta sentencia SQL:\nselect profesor0_.id as id1_1_, profesor0_.colegio as colegio2_1_, profesor0_.materia as materia3_1_, profesor0_.nombre as nombre4_1_, profesor0_.numero_clase as numero_c5_1_ from profesor profesor0_ where profesor0_.nombre=? and profesor0_.numero_clase=55 and profesor0_.materia=? and profesor0_.colegio=?Sin embargo cuando usamos la variable buscaNombre donde solo establecemos el valor para el campo, haciendolo igual ‚ÄòNombre1‚Äô, se buscaran aquellos registros cuyo nombre sea ‚ÄúNombre1‚Äù sin importar los dem√°s campos. La select por tanto ser√° esta:\nselect profesor0_.id as id1_1_, profesor0_.colegio as colegio2_1_, profesor0_.materia as materia3_1_, profesor0_.nombre as nombre4_1_, profesor0_.numero_clase as numero_c5_1_ from profesor profesor0_ where profesor0_.nombre=?Hay que tener en cuenta que la b√∫squeda se realizar√° sobre todos los campos que no tengan un valor igual null. Es por esto, que es importante que ninguno de los campos de la entidad este definido como un objeto primitivo (int, double, etc.). Si alg√∫n campo es de un tipo primitivo al realizar la b√∫squeda en caso de que no hayamos establecido el valor de ese campo, buscara aquel que tenga un valor igual 0 lo cual, seguramente, no es lo que deseamos.\nCreo que la salida mostrada al ejecutar la aplicaci√≥n explica perfectamente la l√≥gica:\nINSERTANDO PROFESORES .... 2021-01-23 18:14:23.493 INFO 5416 --- [ main] c.p.qbe.JpaQueryByExampleApplication : Insertado registro: Profesor(id=1, nombre=Nombre1, materia=Matematicas, colegio=Colegio1, numeroClase=55) 2021-01-23 18:14:23.495 INFO 5416 --- [ main] c.p.qbe.JpaQueryByExampleApplication : Insertado registro: Profesor(id=2, nombre=Nombre2, materia=Lengua, colegio=Colegio2, numeroClase=55) 2021-01-23 18:14:23.501 WARN 5416 --- [ main] c.p.qbe.JpaQueryByExampleApplication : Ya existe Registro: Profesor(id=null, nombre=Nombre1, materia=null, colegio=null, numeroClase=null) 2021-01-23 18:14:23.501 INFO 5416 --- [ main] c.p.qbe.JpaQueryByExampleApplication : INSERTANDO ALUMNOS .... 2021-01-23 18:14:23.507 INFO 5416 --- [ main] c.p.qbe.JpaQueryByExampleApplication : Insertado registro: Alumno(id=3, nombre=Luis, edad=12, clase=1A) 2021-01-23 18:14:23.509 WARN 5416 --- [ main] c.p.qbe.JpaQueryByExampleApplication : Ya existe Registro: Alumno(id=3, nombre=Luis, edad=12, clase=1A) 2021-01-23 18:14:23.514 INFO 5416 --- [ main] c.p.qbe.JpaQueryByExampleApplication : Insertado registro: Alumno(id=4, nombre=Luis, edad=13, clase=1A)Y por si acaso, ten√©is el c√≥digo fuente en: https://github.com/chuchip/JPAQBE\n¬° Esto es todo!. Nos vemos en la pr√≥xima clase.\n","description":"","tags":["java","spring","jpa","qbe","spring data JPA"],"title":"Usar QBE en Spring Data","uri":"/spring/data/qbe/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: jwt","uri":"/es/tags/jwt/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: jwt","uri":"/es/categories/jwt/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: keycloack","uri":"/es/tags/keycloack/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: keycloack","uri":"/es/categories/keycloack/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: oauth2","uri":"/es/tags/oauth2/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: oauth2","uri":"/es/categories/oauth2/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: rest","uri":"/es/tags/rest/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: rest","uri":"/es/categories/rest/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Seguridad","content":"Borrador. Pendiente de refactorizar y documentar en espa√±ol. Programa demostrando como crear una aplicaci√≥n en Spring Boot cuya seguridad es gestionada por KeyCloak.\nEl programa esta basado en este articulo https://medium.com/@ddezoysa/securing-spring-boot-rest-apis-with-keycloak-1d760b2004e\nEl c√≥digo fuente del programa esta en https://github.com/chuchip/keycloack-springboot\nEn la clase KeycloakSecurityConfigse ha incluido la funci√≥n accessToken . Con este bean podremos comprobar dentro de nuestro c√≥digo como los recursos del token JWT mandado a la aplicaci√≥n.\n@Bean @Scope(scopeName = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS) public AccessToken accessToken() { HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest(); return ((KeycloakSecurityContext) ((KeycloakAuthenticationToken) request.getUserPrincipal()).getCredentials()).getToken(); }","description":"","tags":["java","oauth2","keycloack","jwt","rest","seguridad","spring boot"],"title":"Securizando aplicaci√≥n de SpringBoot con KeyCloack","uri":"/springboot/seguridad-con-keycloack/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: seguridad","uri":"/es/tags/seguridad/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: seguridad","uri":"/es/categories/seguridad/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: spring boot","uri":"/es/tags/spring-boot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: cloud","uri":"/es/tags/cloud/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: cloud","uri":"/es/categories/cloud/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: gateway","uri":"/es/tags/gateway/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: gateway","uri":"/es/categories/gateway/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: hystrix","uri":"/es/tags/hystrix/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: json","uri":"/es/categories/json/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: spring cloud gateway","uri":"/es/tags/spring-cloud-gateway/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Cloud","content":"Hace tiempo escrib√≠ un articulo sobre como realizar una pasarela o gateway para redirigir peticiones utilizando Zuul. Sin embargo, Zuul ya no esta aconsejado por la gente de Pivotal, que como sabr√©is es la empresa detr√°s de Spring. Para sustituirlo han creado Spring Cloud Gateway.\nPrincipalmente, la mayor ventaja de este este software es que es reactivo. Es decir, utiliza las nuevas librer√≠as de Webflux de Spring para que las llamadas no sean bloqueantes. Esto es una parte muy importante del ‚ÄúSpring 5‚Äù y realmente cambia el motor interno de Spring. Sin embargo, el programador podr√° seguir utilizando las antiguas caracter√≠sticas de Spring, pudiendo hacer uso de las nuevas.\nEn casi cualquier proyecto donde haya microservicios, es deseable que todas las comunicaciones entre esos microservicios pasen por un lugar com√∫n, de tal manera que se registren las entradas y salidas, se pueda implementar seguridad o se puedan redirigir las peticiones dependiendo de diversos par√°metros.\nCon Spring Cloud Gateway esto es muy f√°cil de implementar ya que esta perfectamente integrado con Spring Boot, y sus diferentes funcionalidades.\nComo siempre [en mi p√°gina de GitHub][3] pod√©is ver los fuentes sobre los que esta basado este articulo.\nCreando el proyecto. Para demostrar varias de las capacidades de Spring Cloud Gateway vamos a simular una aplicaci√≥n donde habr√° 2 servicios, uno de los cuales tendr√°n dos instancias las cuales se registraran usando Eureka Server.\nNuestro proyecto, por lo tanto, quedara as√≠:\nServidor Eureka (eureka). Corriendo en puerto 8761. Simple Server. (dummyrest). Escuchando en el puerto 8000 Cliente Eureka (eureka-client1). Corriendo en puerto 8100 y puerto 8101 Gateway. Corriendo en puerto 8080. Por no hacer demasiado largo el articulo, no voy a explicar como configurar el servidor y los clientes de Eureka. Ten√©is un articulo explicando como hacerlo en este mismo blog. Ambos programas son muy simples y viendo el c√≥digo seguro que no necesit√°is m√°s explicaciones ;-) .\nEn cuanto a dummyRest es una aplicaci√≥n que simplemente responde en unas rutas con un mensaje que incluye las caracter√≠sticas de la petici√≥n:\n@SpringBootApplication @RestController public class DumyrestApplication { final static String SALTOLINEA=\"\\n\"; public static void main(String[] args) { SpringApplication.run(DumyrestApplication.class, args); } @RequestMapping(\"/\") public String get1(HttpServletRequest request) { return \"En get1 de DummyRest\"+getRequest(request); } @GetMapping(\"/dummy\") public String dummy(HttpServletRequest request) { return \"En dummy de DummyRest\"+getRequest(request); } @GetMapping(\"/dummy/{param1}\") public String dummyParam(@PathVariable String param1,HttpServletRequest request) { return \"En dummy con parametro \"+param1+ \" de DummyRest\"+getRequest(request); } @RequestMapping(\"/custom\") public String getCustom(HttpServletRequest request) { return \"En /custom/ \"+DumyrestApplication.getRequest(request); } public static String getRequest(HttpServletRequest request) { StringBuffer strLog=new StringBuffer(SALTOLINEA); strLog.append(\"Metodo: \"+request.getMethod()+SALTOLINEA); strLog.append(\"URL: \"+request.getRequestURL()+SALTOLINEA); strLog.append(\"Host Remoto: \"+request.getRemoteHost()+SALTOLINEA); strLog.append(\"----- PARAMETERS ----\"+SALTOLINEA); request.getParameterMap().forEach( (key,value) -\u003e { for (int n=0;n\u003cvalue.length;n++) { strLog.append(\"Clave:\"+key+ \" Valor: \"+value[n]+SALTOLINEA); } } ); strLog.append(SALTOLINEA+\"----- Headers ----\"+SALTOLINEA); Enumeration\u003cString\u003e nameHeaders=request.getHeaderNames();\twhile (nameHeaders.hasMoreElements()) { String name=nameHeaders.nextElement(); Enumeration\u003cString\u003e valueHeaders=request.getHeaders(name); while (valueHeaders.hasMoreElements()) { String value=valueHeaders.nextElement(); strLog.append(\"Clave:\"+name+ \" Valor: \"+value+SALTOLINEA); } } return strLog.toString(); } }Como se puede ver, tiene los siguientes endpoints: /, /dummy/, /dummy/{param1} y /custom\nEl servidor eureakaclient1, es un servidor tipo reactivo, que se registra como cliente en un servidor Eureka. El c√≥digo es el siguiente:\n@SpringBootApplication @EnableEurekaClient @RestController public class EurekaClient1Application { final static String SALTOLINEA=\"\\n\"; @Autowired Environment environment; int puerto; public static void main(String[] args) { SpringApplication.run(EurekaClient1Application.class, args); } @PostConstruct void iniciado() { puerto=Integer.parseInt(environment.getProperty(\"server.port\")); } @GetMapping(\"/\") public String get1(ServerHttpRequest request) { return \"En get1 de servidor corriendo en puerto: \"+puerto+getRequest(request); } @GetMapping(\"/dummy\") public String dummyParam(ServerHttpRequest request) { return \"En dummy de servidor corriendo en puerto: \"+puerto+getRequest(request); } @GetMapping(\"/dummy/{param1}\") public String dummy(@PathVariable String param1,ServerHttpRequest request) { return \"En dummy con parametro: \"+param1+\" de servidor corriendo en puerto: \"+puerto+getRequest(request); } public String getRequest(ServerHttpRequest request) { StringBuffer strLog=new StringBuffer(SALTOLINEA); strLog.append(\"Metodo: \"+request.getMethod()+SALTOLINEA); strLog.append(\"URL: \"+request.getURI()+SALTOLINEA); strLog.append(\"Host Remoto: \"+request.getRemoteAddress()+SALTOLINEA); strLog.append(\"----- PARAMETERS ----\"+SALTOLINEA); request.getQueryParams().forEach( (key,value) -\u003e { for (int n=0;n\u003cvalue.size();n++) { strLog.append(\"Clave:\"+key+ \" Valor: \"+value.get(n)+SALTOLINEA); } } ); strLog.append(SALTOLINEA+\"----- Headers ----\"+SALTOLINEA); request.getHeaders().forEach( ( key,valor) -\u003e\t{ for (int n=0;n\u003cvalor.size();n++) strLog.append(\"Clave:\"+key+ \" Valor: \"+valor.get(n) +SALTOLINEA); }); return strLog.toString(); } }Este servidor responder√° en la siguientes rutas: /, /dummy/ y /dummy/{param1}\nNotar que para mostrar los datos de la petici√≥n debemos tratar el objeto ServerHttpRequest y no el objeto HttpServletRequest como en dummyrest, Esto es porque dummyrest es un servidor tradicional, basado en J2EE , con Tomcat como servidor de aplicaciones embebido y eureakaclient1 utiliza Jetty como servidor de aplicaciones, utilizando la tecnolog√≠a webflux.\nCreando la aplicaci√≥n de gateway Ahora vamos a a empezar a hablar directamente del Gateway, que es de lo que va este articulo.\nSi tenemos instalado Eclipse con el [plugin de Spring Boot][4] (lo cual recomiendo), el crear el proyecto seria tan f√°cil como a√±adir un nuevo proyecto del tipo Spring Boot incluyendo el starter Spring Cloud Gateway.\nPara poder hacer algunas pruebas tambi√©n incluiremos el starter Hystrix y el cliente de Eureka.\nTambi√©n tenemos la opci√≥n de crear un proyecto Maven desde la p√°gina web https://start.spring.io/ que luego importaremos desde nuestro IDE preferido.\nEmpezando Spring Cloud Gateway tiene una excelente documentaci√≥n donde explica todas las diferentes opciones que tenemos para realizar las redirecciones. B√°sicamente una ruta tiene siempre 3 partes.\nid: Nombre de la ruta. Pondremos el nombre que deseemos. uri. Es el servidor a donde se redirija la petici√≥n. Tener en cuenta que es sola direcci√≥n sin path. Es decir aqu√≠ no podemos poner http://localhost:8080/mipath/ . Bueno, de hecho si que podemos ponerlo, pero solo nos coger√° el protocolo, host y el puerto. Es decir: http://localhost:8080 predicates: Pondremos las condiciones que debe cumplir la petici√≥n para que vaya a la uri que hemos especificado. Esas condiciones pueden ser de diferente tipo como veremos m√°s adelante. filters: Esto es opcional y permite incluir filtros con los cuales podremos, por ejemplo, a√±adir y/o borrar cabeceras, redirigir a otras rutas, etc. Nuestro Proyecto Inicialmente la √∫nica clase que tendr√° nuestro proyecto ser√° esta:\n@SpringBootApplication @EnableEurekaClient public class GatewayApplication { public static void main(String[] args) { SpringApplication.run(GatewayApplication.class, args); } }Simple, ¬ø verdad ?\nY ahora viene la diversi√≥n, pues vamos a configurar como y a donde debe redirigir las peticiones. Para ello crearemos el fichero de propiedades, application.yml (dentro del directorio resources), de esta manera.\neureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka spring: application: name: gateway cloud: gateway: default-filters: - AddResponseHeader=X-Gateway, true routes: - id: simple uri: http://localhost:8000/ predicates: - Path=/simple/{segment} filters: - SetPath=/dummy/{segment} - id: eureka-client uri: lb://eureka-client1 predicates: - Path=/eureka/** filters: - RewritePath=/eureka/(?\u003csegment\u003e.*), /$\\{segment} - id: host_route uri: http://localhost:8000 filters: - AddRequestHeader=X-Request-PROFE, Hola - PrefixPath=/dummy - RemoveRequestHeader=X-Request-Foo predicates: - Host=www.dummy.com,www.simple.com Al principio de este fichero, especificamos donde debe buscar el servidor de eureka para registrarse (eureka.client. serviceUrl.defaultZone) Adem√°s utilizara el servidor para localizar donde estan ubicados los servidores del tipo eureka-client1 como veremos m√°s adelante.\nCon las l√≠neas cloud.gateway.default-filters especificamos que en todas las peticiones de vuelta se debe incluir la cabecera X-Gateway, con el valor ‚Äútrue‚Äù. En los ejemplos siguientes veremos como se incluye en las respuestas esa cabecera.\nAhora veremos que hacen las l√≠neas:\n- id: simple uri: http://localhost:8000/ predicates: - Path=/simple/{segment} filters: - SetPath=/dummy/{segment}Como hemos especificado antes, con id le ponemos un nombre a la ruta. uri especifica que las peticiones ser√°n redirigidas a http://localhost:8000 (donde estar√° corriendo nuestra aplicaci√≥n dummyrest). En el apartado predicates a√±adimos la clausula path con lo cual esta ruta se cumplira siempre y cuando la petici√≥n sea realizada a /simple/{ALGO}. Por fin, en la parte filters especificamos que se debe cambiar la ruta a /dummy/{ALGO} donde ‚Äú{ALGO}‚Äù, ser√° la ruta existente despu√©s de /simple.\nVamos a poner un ejemplo, para explicarlo mejor:\nEjecutando el comando\n\u003e curl -s -D - http://localhost:8080/simple/PARAMETRO1obtendremos la siguiente salida:\nHTTP/1.1 200 OK X-Gateway: true Content-Type: text/plain;charset=UTF-8 Content-Length: 518 Date: Fri, 30 Oct 2020 07:46:33 GMT En dummy con parametro a de DummyRest Metodo: GET URL: http://localhost:8000/dummy/PARAMETRO1 Host Remoto: 127.0.0.1 ----- PARAMETERS ---- ----- Headers ---- Clave:user-agent Valor: curl/7.55.1 Clave:accept Valor: */* Clave:forwarded Valor: proto=http;host=\"localhost:8080\";for=\"0:0:0:0:0:0:0:1:55964\" Clave:x-forwarded-for Valor: 0:0:0:0:0:0:0:1 Clave:x-forwarded-proto Valor: http Clave:x-forwarded-port Valor: 8080 Clave:x-forwarded-host Valor: localhost:8080 Clave:host Valor: localhost:8000 Clave:content-length Valor: 0Se puede observar que la petici√≥n a sido redirigida a nuestro servicio dummyrest y ha entrado por la funci√≥n dummyParam.\nObservar que adem√°s en la respuesta tenemos la cabecera X-gateway con el valor de true, como le indicamos con el filtro por defecto.\nCon las l√≠neas:\n- id: eureka-client uri: lb://eureka-client1 predicates: - Path=/eureka/** filters: - RewritePath=/eureka/(?\u003csegment\u003e.*), /$\\{segment}redirigiremos todo lo que vaya al path /eureka/ a nuestros servicios registrados en eureka. Lo m√°s importante aqu√≠ es que la uri esta precedida por el protocolo lb: lo cual har√° que busque en el servidor de eureka por los servicios con el nombre escrito a continuaci√≥n y las peticiones ser√°n realizadas a esos programas, teniendo en cuenta que adem√°s balanceara las peticiones si es necesario.\nEn el filtro hemos a√±adido una regla de reescritura para sustituir /eureka por /\n\u003e curl -s http://localhost:8080/eureka/ ... En get1 de servidor corriendo en puerto: 8101 ... \u003e curl -s http://localhost:8080/eureka/ ... En get1 de servidor corriendo en puerto: 8100 ...Os recuerdo que para lanzar el cliente de eureka en diferentes puertos podremos a√±adir la propiedad server.port en las propiedades del sistema al lanzar el programa, por ejemplo de esta manera.\njava -Dserver.port=8081 -jar eurekaclient1.jarEn el ultimo ejemplo cogeremos las peticiones mandadas al host www.dummy.com o www.simple.com y las redirigiremos a http://localhost:8000 .\nAdem√°s, a trav√©s de los filtros, pondremos estas condiciones:\nA√±adiremos un cabecera en la petici√≥n (X-Request-PROFE), Si viene la cabecera X-Request-Foo ser√° quitada. A√±adiremos /dummy/ al path. - id: host_route uri: http://localhost:8000 filters: - AddRequestHeader=X-Request-PROFE, Hola - PrefixPath=/dummy - RemoveRequestHeader=X-Request-Foo predicates: - Host=www.dummy.com,www.simple.com Un ejemplo ser√≠a esta petici√≥n.\n\u003ecurl -s -D - -H \"host:www.dummy.com\" http://localhost:8080/ HTTP/1.1 200 OK X-Gateway: true En dummy de DummyRest Metodo: GET URL: http://localhost:8000/dummy/ Host Remoto: 127.0.0.1 ----- PARAMETERS ---- ----- Headers ---- ... Clave:x-forwarded-host Valor: www.dummy.com Clave:host Valor: localhost:8000 \u003e curl -s -D - -H \"host:www.dummy.com\" http://localhost:8080/PARAM1 ... En dummy con parametro PARAM1 de DummyRest ...Definiendo rutas en el programa Lo de poder definir las rutas en un fichero de propiedades esta fenomenal pero quiz√°s tu prefieras hacerlo en tu programa, pues no hay problema. Tan solo tienes que crear una funci√≥n que devuelva un bean tipo RouteLocator. En este ejemplo a√±adimos esta funci√≥n:\n@Bean public RouteLocator myRoutes(RouteLocatorBuilder builder) { return builder.routes() .route(p -\u003e p .path(\"/custom/**\") .uri(\"http://localhost:8000\")) .route(p -\u003e p .path(\"/fallo\") .filters(f -\u003e f .hystrix(config -\u003e config .setName(\"mycmd\") .setFallbackUri(\"forward:/fallback\"))) .uri(\"http://localhost:999\")) .build(); }A trav√©s del builder, vamos a√±adiendo rutas, pr√°cticamente igual que lo har√≠amos anteriormente en el fichero yaml .\nEn este caso hemos a√±adido una una ruta para cuando el path empiece por /custom que nos llevara a http://localhost:80000 y otra ruta que se llevara a cabo cuando el path sea /fallo. En este caso, le hemos a√±adido un filtro tipo hystrix, el cual har√° que si no puede llegar a la uri especificada (http://localhost:999\") vaya a **/fallback. Para que esto funcione hemos de a√±adir la siguiente funci√≥n en nuestro programa. Como pod√©is adivinar ira a la funci√≥n fallback() en caso de error.\n@RequestMapping(\"/fallback\") public Mono\u003cString\u003e fallback() { return Mono.just(\"Algo fue mal. Respondido de fallback\"); }Filtrando: Dejando logs Hay veces en que queremos a√±adir logs para las llamadas que recibamos. Una de las opciones para hacer esto es crear un bean tipo GlobalFilter.\nPara ello crearemos una clase que implemente ese interfaz, y en la funci√≥n filter pondremos el c√≥digo para escribir nuestros logs.\n@Bean class CustomGlobalFilter implements GlobalFilter, Ordered { Logger log = LoggerFactory.getLogger(this.getClass()); @Override public Mono\u003cVoid\u003e filter(ServerWebExchange exchange, GatewayFilterChain chain) { log.info(\"custom global filter. \"+exchange.getRequest().getPath().toString()); return chain.filter(exchange); } @Override public int getOrder() { return -1; } }En este caso simplemente pondremos un log indicando el path de la llamada realizada y despu√©s permitimos seguir el proceso, devolviendo el control al flujo. Tambi√©n es posible romper el flujo y por supuesto manipularlo, a√±adiendo y/o borrando cabeceras.\nCon la funci√≥n getOrder() indicamos cuando se debe ejecutar este filtro. Cuanto m√°s bajo sea el numero devuelto antes se ejecutara en el flujo del enrutamiento.\nSpring Cloud Gateway tiene mucha m√°s potencia que la que he ense√±ado aqu√≠. Podemos definir nuestros filtros espec√≠ficos para cada llamada adem√°s de tener uno gen√©rico, podemos implementar seguridad y muchas cosas. Os invito a que ech√©is un vistazo a este articulo de Baeldung donde profundiza m√°s en estos asuntos.\n¬°¬° Espero que esta entrada haya sido √∫til y nos vemos en la pr√≥xima!!\n[4]: [3]: https://github.com/chuchip/springcloudgateway [5]: https://raw.githubusercontent.com/chuchip/zuulSpringTest/master/starters.png\n","description":"","tags":["cloud","gateway","hystrix","java","spring boot","spring cloud gateway"],"title":"Spring Cloud Gateway. Redirigiendo peticiones Reactivamente.","uri":"/spring/gateway/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: logging","uri":"/es/tags/logging/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: logging","uri":"/es/categories/logging/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: mvn","uri":"/es/tags/mvn/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: mvn","uri":"/es/categories/mvn/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: reactor","uri":"/es/tags/reactor/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: reactor","uri":"/es/categories/reactor/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: web","uri":"/es/categories/web/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: webflux","uri":"/es/tags/webflux/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: webflux","uri":"/es/categories/webflux/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: django","uri":"/es/categories/django/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: eclipse","uri":"/es/categories/eclipse/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: python","uri":"/es/categories/python/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: python - eclipse - django - django-rest","uri":"/es/tags/python-eclipse-django-django-rest/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Restful","content":"En esta entrada voy a hablar de como implementar filtros en Spring. Los filtros son de los que se pueden establecer cuando se recibe una petici√≥n HTTP. Es decir, suponiendo que tenemos un programa escuchando en unas URI, poder especificar que deseamos ejecutar algo antes de que las peticiones sea procesadas por el controlador.\nEsto es muy √∫til si queremos que todas las peticiones cumplan un requisito, por ejemplo incluir una cabecera especifica.\nPara entender como funcionan los filtros en Spring he realizado un programa que ir√© explicando poco a poco.\nEl c√≥digo fuente del programa lo ten√©is en mi p√°gina de GITHUB\nEmpezare mostrando el controlador para peticiones REST que esta en la clase PrincipalController.java. Este ser√° el encargado de gestionar todas las peticiones.\n@RestController public class PrincipalController { @Autowired SillyLog sillyLog; @GetMapping(\"*\") public String entryOther(HttpServletRequest request,HttpServletResponse response) {\tsillyLog.debug(\"In entryOther\"); if (response.getHeader(\"PROFE\")!=null) sillyLog.debug(\"Header contains PROFE: \"+response.getHeader(\"PROFE\")); if (response.getHeader(\"CAKE\")!=null) sillyLog.debug(\"Header contains CAKE: \"+response.getHeader(\"CAKE\")); return \"returning by function entryOther\\r\\n\"+ sillyLog.getMessage(); } @GetMapping(value={\"/\",\"one\"}) public String entryOne(HttpServletRequest request,HttpServletResponse response\t) { sillyLog.debug(\"In entryOne\"); if (response.getHeader(\"PROFE\")!=null) { sillyLog.debug(\"Header contains PROFE: \"+response.getHeader(\"PROFE\")); return entryTwo(response);\t} return \"returning by function entryOne\\r\\n\"+ sillyLog.getMessage(); } @GetMapping(\"two\") public String entryTwo(HttpServletResponse response) { sillyLog.debug(\"In entryTwo\"); if (response.getHeader(\"PROFE\")!=null) sillyLog.debug(\"Header contains PROFE: \"+response.getHeader(\"PROFE\")); return \"returning by function entryTwo\\r\\n\"+ sillyLog.getMessage(); } @GetMapping(\"three\") public String entryThree() { sillyLog.debug(\"In entryThree\"); return \"returning by function entryThree\\n\"+ sillyLog.getMessage(); } @GetMapping(\"redirected\") public String entryRedirect(HttpServletRequest request) { sillyLog.debug(\"In redirected\"); return \"returning by function entryRedirect\\n\"+ sillyLog.getMessage(); } }En la funci√≥n entryOther se capturaran todas las peticiones tipo GET que vayan a alguna URI que no tengamos definidas expl√≠citamente. En la funci√≥n entryOne se procesaran las peticiones tipo GET que vayan a la URL http://localhost:8080/one o http://localhost:8080/ y as√≠ sucesivamente.\nLa clase sillyLog es una clase donde simplemente iremos a√±adiendo l√≠neas de log para luego devolverlas en el body de la respuesta, de tal manera que podremos ver por donde ha pasado nuestra petici√≥n.\nEn esta aplicaci√≥n se definen tres filtros: MyFilter.java ,OtherFilter.java y CakesFilter.java. El primero tiene preferencia sobre el segundo, por estar as√≠ establecido en el par√°metro de la etiqueta @Order. Del tercero hablo al final del articulo.\nEn el fichero MyFilter.java definimos nuestro primer filtro.\n@Component @Order(1) public class MyFilter implements Filter{ @Autowired SillyLog sillyLog; @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\tthrows IOException, ServletException { HttpServletRequest httpRequest = (HttpServletRequest) request; HttpServletResponse myResponse= (HttpServletResponse) response; sillyLog.debug(\"Filter: URL\" + \" called: \"+httpRequest.getRequestURL().toString()); if (httpRequest.getRequestURL().toString().endsWith(\"/one\"))\t{\tmyResponse.addHeader(\"PROFE\", \"FILTERED\");\tchain.doFilter(httpRequest, myResponse); return; } if (httpRequest.getRequestURL().toString().endsWith(\"/none\"))\t{ myResponse.setStatus(HttpStatus.BAD_GATEWAY.value()); myResponse.getOutputStream().flush(); myResponse.getOutputStream().println(\"-- I don't have any to tell you --\"); return; // No hago nada. } if (httpRequest.getRequestURL().toString().endsWith(\"/redirect\"))\t{\tmyResponse.addHeader(\"PROFE\", \"REDIRECTED\"); myResponse.sendRedirect(\"redirected\"); chain.doFilter(httpRequest, myResponse); return; } if (httpRequest.getRequestURL().toString().endsWith(\"/cancel\"))\t{\tmyResponse.addHeader(\"PROFE\", \"CANCEL\"); myResponse.setStatus(HttpStatus.BAD_REQUEST.value()); myResponse.getOutputStream().flush(); myResponse.getOutputStream().println(\"-- Output by filter error --\"); chain.doFilter(httpRequest, myResponse); return; } chain.doFilter(request, response); } }La clase OtherFilter es m√°s simple:\n@Component @Order(2) public class OtherFilter implements Filter{ @Autowired SillyLog sillyLog; @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { HttpServletRequest httpRequest= (HttpServletRequest) request; HttpServletResponse myResponse= (HttpServletResponse) response; sillyLog.debug(\"OtherFilter: URL\" + \" called: \"+httpRequest.getRequestURL().toString()); if (myResponse.getHeader(\"PROFE\")!=null) { sillyLog.debug(\"OtherFilter: Header contains PROFE: \"+myResponse.getHeader(\"PROFE\")); } chain.doFilter(request, response); } }Lo primero que tenemos que hacer para definir un filtro general es etiquetar la clase con @Component . Despu√©s deberemos implementar el interface Filter . Tambi√©n podr√≠amos extender de la clase OncePerRequestFilter la cual implementa el interface Filter y a√±ade ciertas funcionalidades para que un filtro solo se ejecute una vez por ejecuci√≥n. En este ejemplo vamos a simplificarlo al m√°ximo y directamente implementaremos el interface Filter.\nEl interface Filter tiene tres funciones.\nvoid init(FilterConfig filterConfig) throws ServletException\nEsta funci√≥n ser√° ejecutada por el contenedor web. En otras palabras: esta funci√≥n solo es ejecutada una vez, cuando el componente es instanciado por Spring.\nvoid doFilter(ServletRequest request,ServletResponse response, FilterChain chain) throws IOException, ServletException\nEsta funci√≥n ser√° ejecutada cada vez que se realiza una petici√≥n HTTP. En ella es donde podremos ver el contenido de la petici√≥n HTTP, en el objeto ServletRequest y modificar la respuesta en el objeto ServletResponse . FilterChain es lo que debemos ejecutar si queremos continuar la petici√≥n.\nvoid destroy()\nEsta funci√≥n es llamada por el contenedor web de Spring para indicarle al filtro, que va a dejar de estar activo.\nComo he comentado anteriormente, la etiqueta @Order nos permitir√° especificar el orden en que los filtros ser√°n ejecutados. En este caso, este filtro tendr√° el valor 1 y el siguiente tendr√° el valor 2, por lo cual MyFilter se ejecutara antes que OtherFilter.\nLa clase MyFilter realiza diferentes acciones seg√∫n la URL llamada. La clase OtherFiltersolamente a√±ade un log cuando pasa por ella.\nEn el c√≥digo del ejemplo nosotros solo utilizamos la funci√≥n doFilter. En ella, lo primero, convertimos la clase ServletResponse a HttpServletResponse y la clase ServletRequest a HttpServletRequest. Esto es necesario para poder acceder a ciertas propiedades de los objetos que de otra manera no estar√≠an disponibles.\nVoy a explicar paso a paso los diferentes casos contemplados en la clase MyFilter, dependiendo de la URL invocada.\n/one: A√±adimos una cabecera PROFE con el valor FILTERED a la respuesta. Es importante recalcar que solo podremos modificar la respuesta, la petici√≥n es inalterable.\nDespu√©s ejecutamos la funci√≥n doFilterde la clase chain con lo cual se continuara el flujo de la petici√≥n. En este caso se ejecutar√≠a el segundo filtro y despu√©s se pasar√≠a por a la funci√≥n entryOne del controlador, donde podr√≠amos ver que existe un header con el valor PROFE, por lo cual se llama a la funci√≥n entryTwo.\nUna llamada a esta URL nos devolver√≠a lo siguiente:\n\u003e curl -s http://localhost:8080/one returning by function entryTwo SillyLog: 15eb34c2-cfac-4a27-9450-b3b07f44cb50/1 Filter: URL called: http://localhost:8080/one SillyLog: 15eb34c2-cfac-4a27-9450-b3b07f44cb50/2 OtherFilter: URL called: http://localhost:8080/one SillyLog: 15eb34c2-cfac-4a27-9450-b3b07f44cb50/3 OtherFilter: Header contains PROFE: FILTERED SillyLog: 15eb34c2-cfac-4a27-9450-b3b07f44cb50/4 In entryOne SillyLog: 15eb34c2-cfac-4a27-9450-b3b07f44cb50/5 Header contains PROFE: FILTERED SillyLog: 15eb34c2-cfac-4a27-9450-b3b07f44cb50/6 In entryTwo SillyLog: 15eb34c2-cfac-4a27-9450-b3b07f44cb50/7 Header contains PROFE: FILTERED La primera l√≠nea es devuelta por la funci√≥n entryTwo. A continuaci√≥n se muestran los logs a√±adidos.\nLo mejor es mirar el c√≥digo fuente si no se tiene claro de donde salen tantas l√≠neas üòâ\n/redirect A√±adimos una cabecera PROFE con el valor REDIRECTED al response. Despu√©s especificamos que se debe incluir una redirecci√≥n a la URL redirected con la instrucci√≥n myResponse.sendRedirect. Finalmente ejecutamos la funci√≥n doFilter por lo cual se procesara el segundo filtro y se llamara a la funci√≥n entryOther ya que no tenemos ning√∫n punto de entrada definido para /cancel. Esta es la salida que tendremos si realizamos una petici√≥n con curl:\n\u003e curl -s http://localhost:8080/redirect Efectivamente, no hay salida. ¬øPor qu√©?. Pues porque hemos incluido una directiva redirected y curl por defecto no sigue esas directivas, con lo cual simplemente no muestra nada.\nVeamos, que esta pasando a√±adi√©ndole a curl el par√°metro -v (verbose)\n\u003e curl -v -s http://localhost:8080/redirect * Trying ::1... * TCP_NODELAY set * Connected to localhost (::1) port 8080 (#0) \u003e GET /redirect HTTP/1.1 \u003e Host: localhost:8080 \u003e User-Agent: curl/7.60.0 \u003e Accept: */* \u003e \u003c HTTP/1.1 302 \u003c PROFE: REDIRECTED \u003c Location: http://localhost:8080/redirected \u003c Content-Length: 0 \u003c Date: Thu, 13 Jun 2019 13:57:44 GMT \u003c * Connection #0 to host localhost left intactEsto es otra cosa, ¬øverdad?. Ahora muestra en la cabecera nuestro valor para PROFE Y vemos la orden de redirigir a http://localhost:8080/redirected. Observar que el c√≥digo HTTP es 302, que es redirect.\nS√≠ le decimos a curl que siga la redirecci√≥n, pas√°ndole el par√°metro -L, veremos lo que esper√°bamos.\n\u003e curl -L -s http://localhost:8080/redirect returning by function entryRedirect SillyLog: dcfc8b09-84a4-40a1-a2d6-43340abdf50c/1 Filter: URL called: http://localhost:8080/redirected SillyLog: dcfc8b09-84a4-40a1-a2d6-43340abdf50c/2 OtherFilter: URL called: http://localhost:8080/redirected SillyLog: dcfc8b09-84a4-40a1-a2d6-43340abdf50c/3 In redirected Bueno, casi lo que esper√°bamos. Obs√©rvese que ha habido dos peticiones HTTP a nuestro servicio y solo se muestra los datos de la segunda.\n/none . Establezco el c√≥digo HTTP a devolver a BAD_GATEWAY y en el cuerpo pongo el texto ‚ÄúI don‚Äôt have any to tell you‚Äù. No ejecuto la funci√≥n doFilter por lo cual ni ser√° llamado el segundo filtro, ni seria pasada al controlador. \u003e curl -s http://localhost:8080/none -- I don't have any to tell you -- /cancel . Establezco el c√≥digo HTTP a devolver a BAD_REQUEST y en el cuerpo pongo el texto ‚ÄúOutput by filter error‚Äù. Ejecuto la funci√≥n doFilter por lo cual ser√° ejecutado el filtro OtherFilter y se pasara por la funci√≥n entryOther del controlador, ya que no tenemos ning√∫n punto de entrada definido para /cancel \u003e curl -s http://localhost:8080/cancel -- Output by filter error -- returning by function entryOther SillyLog: 1cf7f7f9-1a9b-46a0-9b97-b8d5caf734bd/1 Filter: URL called: http://localhost:8080/cancel SillyLog: 1cf7f7f9-1a9b-46a0-9b97-b8d5caf734bd/2 OtherFilter: URL called: http://localhost:8080/cancel SillyLog: 1cf7f7f9-1a9b-46a0-9b97-b8d5caf734bd/3 OtherFilter: Header contains PROFE: CANCEL SillyLog: 1cf7f7f9-1a9b-46a0-9b97-b8d5caf734bd/4 In entryOther SillyLog: 1cf7f7f9-1a9b-46a0-9b97-b8d5caf734bd/5 Header contains PROFE: CANCELObservar que el cuerpo a√±adido en el filtro es anterior a lo devuelto por el controlador.\nOtros En cualquier otra llamada se invocara la funci√≥n doFilterde la clase chain por lo cual se pasara al siguiente filtro y despu√©s a la funci√≥n del controlador adecuado. \u003e curl -L -s http://localhost:8080/three returning by function entryThree SillyLog: a2dd979f-4779-4e34-b8f6-cae814370426/1 Filter: URL called: http://localhost:8080/three SillyLog: a2dd979f-4779-4e34-b8f6-cae814370426/2 OtherFilter: URL called: http://localhost:8080/three SillyLog: a2dd979f-4779-4e34-b8f6-cae814370426/3 In entryThreePara especificar que un filtro solo sea activo para ciertas URL, hay que registrarlo expl√≠citamente y no marcar la clase con la etiqueta @Component. En el proyecto de ejemplo en la clase FiltrosApplication vemos la funci√≥n donde se a√±ade un filtro:\n@Bean public FilterRegistrationBean\u003cCakesFilter\u003e cakesFilter() { FilterRegistrationBean\u003cCakesFilter\u003e registrationBean = new FilterRegistrationBean\u003c\u003e();\tregistrationBean.setFilter(new CakesFilter()); registrationBean.addUrlPatterns(\"/cakes/*\"); return registrationBean; } La clase CakesFilter es la siguiente:\n@Order(3) public class CakesFilter implements Filter{\t@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\tHttpServletResponse myResponse= (HttpServletResponse) response; myResponse.addHeader(\"CAKE\", \"EATEN\");\tchain.doFilter(request, response); } } Al hacer una llamada a una url que empiece por /cakes/* veremos como se ejecuta el ultimo filtro.\n\u003e curl -s http://localhost:8080/cakes returning by function entryOther SillyLog: 41e2c9b9-f8d2-42cc-a017-08ea6089e646/1 Filter: URL called: http://localhost:8080/cakes SillyLog: 41e2c9b9-f8d2-42cc-a017-08ea6089e646/2 OtherFilter: URL called: http://localhost:8080/cakes SillyLog: 41e2c9b9-f8d2-42cc-a017-08ea6089e646/3 In entryOther SillyLog: 41e2c9b9-f8d2-42cc-a017-08ea6089e646/4 Header contains CAKE: EATEN Por la manera en que tiene Spring de gestionar sus variables de contexto, no es posible inyectar el objeto SillyLog con un @Autowired . Si lo inyectamos veremos como la variable tiene el valor null\nY con esto doy por finalizada esta entrada ¬°¬° Hasta la pr√≥xima !!\n","description":"","tags":["filters","java","rest","spring"],"title":"Estableciendo filtros en Spring","uri":"/2019/06/13/estableciendo-filtros-en-spring/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: filters","uri":"/es/tags/filters/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: cache","uri":"/es/tags/cache/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: cache","uri":"/es/categories/cache/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Base","content":"Vamos a imaginar una aplicaci√≥n web, donde por cada petici√≥n recibida, debe leer ciertos datos de configuraci√≥n desde una base de datos. Esos datos no cambiaran normalmente pero nuestra aplicaci√≥n, en cada petici√≥n, debe conectarse, ejecutar las sentencias adecuadas para leer los datos, traerlos por la red, etc. Imaginemos, adem√°s, que la base de datos a la que nos conectamos esta saturada o la conexi√≥n de red que nos une a la base de datos es inestable. ¬øQu√© pasar√≠a?. Pues que tendr√≠amos una aplicaci√≥n lenta por el hecho de leer continuamente unos datos que sabemos que apenas cambian.\nPara solucionar ese problema podr√≠amos utilizar una Cache, pero ¬ø como implementarlo ?. En este articulo explicare como usar una cache b√°sica en Spring Boot.\nUn poco de teor√≠a La cache se aplica sobre funciones, donde para un mismo valor de entrada esperamos un mismo valor de salida. Es por ello que siempre debemos tener al menos un par√°metro de entrada y una salida.\nUn ejemplo t√≠pico seria este:\n@Cacheable(cacheNames=\"headers\") public int funcionCacheada(int valor) { ... calculos muy complejos y costosos .... return N; }Y ahora supongamos que tenemos el siguiente c√≥digo donde llamamos a esa funci√≥n:\nint valor=funcionCacheada(1); int otroValor=funcionCacheada(2); int tercerValor=funcionCacheada(1); Al ejecutar el programa, en la primera l√≠nea, Spring, ejecutara la funci√≥n y guardara el resultado que devuelve. En la segunda l√≠nea, como no sabe el valor que se debe devolver para la entrada con valor ‚Äú2‚Äù har√° lo mismo. Sin embargo en la tercera l√≠nea Spring detectara que una funci√≥n marcada con @Cacheable con el nombre de cache ‚Äúheaders‚Äù ya ha sido llamada con el valor ‚Äú1‚Äù y no ejecutara la funci√≥n, simplemente devolver√° el valor que en la primera llamada guardo.\nEl nombre de la cache es importante pues, entre otras cosas, nos permite tener diferentes caches independientes, las cuales podremos, entre otras cosas limpiar, para obligar a a Spring Boot a ejecutar de nuevo las funciones.\nAs√≠, la idea b√°sicamente es que en cada llamada a una funci√≥n marcada como @Cacheable se guarda en una tabla interna los resultados para cada llamada, de tal manera que si ya tiene la salida para una entrada, no llama a la funci√≥n.\nPractica Y ahora, vamos a la pr√°ctica:\nEl proyecto de ejemplo sobre el que esta basado este articulo esta en: https://github.com/chuchip/cacheExample\nLo primero que se necesita es incluir la siguiente dependencia en nuestro proyecto:\n\u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-cache\u003c/artifactId\u003e \u003c/dependency\u003eAhora ya podremos utilizar las etiquetas que nos permitir√°n usar Cache en nuestra aplicaci√≥n.\nLa primera etiqueta a poner es @EnableCaching. Con esta etiqueta le indicamos a Spring que prepare el soporte para usar cache. Si no se la ponemos simplemente no la usara, independientemente de si indicamos posteriormente que cachee los resultados de unas funciones.\n@SpringBootApplication @EnableCaching public class CacheExampleApplication { public static void main(String[] args) { SpringApplication.run(CacheExampleApplication.class, args); } }En este ejemplo se leer√°n unos datos de una base de datos a trav√©s de unas peticiones REST.\nLos datos como tal se leen en la clase CacheDataImpl.java que esta en el paquete com.profesorp.cacheexample.impl\nLa funci√≥n que lee los datos es la siguiente:\n@Cacheable(cacheNames=\"headers\", condition=\"#id \u003e 1\") public DtoResponse getDataCache(int id) {\ttry { Thread.sleep(500); } catch (InterruptedException e) { }\tDtoResponse requestResponse=new DtoResponse();\tOptional\u003cInvoiceheader\u003e invoice=invoiceHeaderRepository.findById(id); ..... MAS CODIGO NO IMPORTANTE ... }Como se puede ver tenemos la etiqueta @Cacheable(cacheNames=‚Äùheaders‚Äù, condition=‚Äù#id \u003e 1‚Ä≥)\nCon ella, le estamos indicando a Spring dos cosas.\nQue deseamos que cachee el resultado de esta funci√≥n. Le ponemos como condici√≥n, que solo cachee los resultados si el valor de entrada es superior a 1. M√°s adelante, en la funci√≥n flushCache, le ponemos la etiqueta @CacheEvict la cual limpia la cache indicada. En este caso, adem√°s, le indicamos que borre todas las entradas que tengan cacheadas.\n@CacheEvict(cacheNames=\"headers\", allEntries=true) public void flushCache() {\t}\tEn la funci√≥n update actualizamos la base de datos y con la etiqueta @CachePut le indicamos a Spring que actualice los datos para el valor que hay en dtoRequest.id\n@CachePut(cacheNames=\"headers\", key=\"#dtoRequest.id\") public DtoResponse update(DtoRequest dtoRequest) { .... ACTUALIZADA LA BASE DE DATOS ... } Por supuesto esta funci√≥n tiene que devolver un objeto del mismo tipo que el de la marcada con la etiqueta @Cacheable y debemos indicarle el valor de entrada, para el que se desea actualizar los datos.\nFuncionando Para entender mejor la aplicaci√≥n vamos a arrancarla y realizarle algunas peticiones.\nLa aplicaci√≥n al arrancar guarda en la tabla invoiceHeader las cabeceras de 4 facturas (pod√©is ver como lo hace en el fichero data.sql).\nVamos a ejecutar la funci√≥n get de la clase PrincipalController, para ello escribimos:\n\u003e curl -s http://localhost:8080/2 Nos devolver√° lo siguiente:\n{\"interval\":507,\"httpStatus\":\"OK\",\"invoiceHeader\":{\"id\":2,\"activo\":\"N\",\"yearFiscal\":2019,\"numberInvoice\":2,\"customerId\":2}} El campo interval el tiempo en milisegundos que le ha costado realizar la consulta. Como se puede ver le ha costado mas de medio segundo, pues en la funci√≥n getDataCache de CacheDataImpl.javatenemos un sleep de 500 milisegundos.\nAhora ejecutamos de nuevo la llamada:\ncurl -s http://localhost:8080/2 {\"interval\":1,\"httpStatus\":\"OK\",\"invoiceHeader\":{\"id\":2,\"activo\":\"N\",\"yearFiscal\":2019,\"numberInvoice\":2,\"customerId\":2}}Ahora el tiempo que ha tomado la llamada es 1 , porque realmente Spring NO ha ejecutado el c√≥digo de la funci√≥n y simplemente ha devuelto el valor que tenia cacheado.\nSin embargo si solicitamos el id 1 como hemos indicado que no lo cachee siempre ejecutara la funci√≥n y por lo tanto tendremos un tiempo superior a 500 milisegundos:\n\u003ecurl -s http://localhost:8080/1 {\"interval\":503,\"httpStatus\":\"OK\",\"invoiceHeader\":{\"id\":1,\"activo\":\"S\",\"yearFiscal\":2019,\"numberInvoice\":1,\"customerId\":1}} \u003ecurl -s http://localhost:8080/1 {\"interval\":502,\"httpStatus\":\"OK\",\"invoiceHeader\":{\"id\":1,\"activo\":\"S\",\"yearFiscal\":2019,\"numberInvoice\":1,\"customerId\":1}} \u003ecurl -s http://localhost:8080/1 {\"interval\":503,\"httpStatus\":\"OK\",\"invoiceHeader\":{\"id\":1,\"activo\":\"S\",\"yearFiscal\":2019,\"numberInvoice\":1,\"customerId\":1}} Si llamamos a la funci√≥n flushcache limpiaremos la cache y por lo tanto la pr√≥xima llamada a la funci√≥n cacheada deber√° ejecutar la funci√≥n:\n\u003e curl -s http://localhost:8080/flushcache Cache Flushed! \u003e curl -s http://localhost:8080/2 {\"interval\":508,\"httpStatus\":\"OK\",\"invoiceHeader\":{\"id\":2,\"activo\":\"N\",\"yearFiscal\":2019,\"numberInvoice\":2,\"customerId\":2}} \u003e curl -s http://localhost:8080/2 {\"interval\":0,\"httpStatus\":\"OK\",\"invoiceHeader\":{\"id\":2,\"activo\":\"N\",\"yearFiscal\":2019,\"numberInvoice\":2,\"customerId\":2}} Por ultimo veremos como si cambiamos el valor del campo activo a N , como la funci√≥n que realiza el cambio esta marcada con @CacheEvict nos actualizara el valor de la cache, pero en la pr√≥xima llamada a la funci√≥n getDataCache se seguir√° sin ejecutar el c√≥digo, devolviendo, sin embargo, el objeto actualizado.\nConclusiones Spring Boot, sin ninguna dificultad, nos permite cachear los resultados de las funciones, sin embargo hay que tener en cuenta que esa cache es muy b√°sica y la realiza en memoria. Sin embargo Spring Boot permite usar librer√≠as externas que nos permitir√°n cachear en disco, en bases de datos, etc.\nEn https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-caching.html ten√©is las diferentes implementaciones de Cache que Spring Boot soporta, entre las que esta EhCache , con la cual podr√©is definir diferentes tipos de backend para los datos, as√≠ como especificar tiempos de validez para los datos y muchas m√°s opciones.\nComo veis, todo un mundo para explorar.\n¬°¬°Nos vemos en la proxima entrada!!\n","description":"","tags":["cache","java","spring boot"],"title":"Cacheando resultados con Spring Boot","uri":"/2019/05/12/cacheando-datos-en-spring-boot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: beans","uri":"/es/tags/beans/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Base","content":"En esta ocasi√≥n he cogido un proyecto de SimpleProgramming el cual tiene un video en Youtube donde explica como cargar Beans din√°micamente usando Spring (en Ingles).\nImaginemos que tenemos un programa que dependiendo de unos par√°metros deba cargar un clase u otra, donde est√° definida la l√≥gica a seguir. Por supuesto podemos anidar condiciones e instanciar las clases debidas, pero eso tiene un problema y es que si ma√±ana debemos a√±adir una l√≥gica nueva, deberemos incluir una condici√≥n m√°s para cargar la nueva clase, y podr√≠amos introducir errores en el c√≥digo.\nLo ideal seria que tuvi√©ramos una interfaz, y despu√©s una serie de clases que implementaran esa interfaz. Despu√©s, de alguna manera, deber√≠amos cargar la clase adecuada sin tener una sola condici√≥n en el c√≥digo.\nPues con Spring eso se puede hacer usando la clase ServiceLocatorFactoryBean. Esta clase definida en la siguiente URL https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/config/ServiceLocatorFactoryBean.html implementa una fabrica de Beans, creando un proxy de tal manera que devuelve una clase tipo BeanFactory, la cual nos permitir√° crear nuestros Beans din√°micamente.\nEsto que parece bastante confuso explicado as√≠ es realmente muy f√°cil de realizar. Pong√°monos manos a la obra.\nEn el ejemplo que ten√©is en https://github.com/chuchip/springboot-servicelocatorfactorybean esta la interfaz AdapterService, cuyo c√≥digo como veis a continuaci√≥n es muy simple:\npublic interface AdapterService { public String process(); }Se crean 4 clases que implementan ese interface BikeService, BusService, TruckService y CarService. A continuaci√≥n ten√©is el c√≥digo de CarService\n@Service(\"Car\") public class CarService implements AdapterService { int numberExecution=1; @Override public String process() {\treturn \"inside car service - number of executions: \"+(numberExecution++); } }Lo importante de esta clase es la etiqueta @Service(\"car\") pues especificamos el nombre con el que deberemos cargar la clase.\nEn las dem√°s clases existen las etiquetas: @Service(\"Bike\"), @Service(\"Bus\") y @Service(\"Truck\")siendo su c√≥digo pr√°cticamente id√©ntico, solo cambiando el mensaje a devolver.\nAhora se debe crear el interface que pasaremos a la clase ServiceLocatorFactoryBean en este ejemplo es la clase ServiceRegistry\npublic interface ServiceRegistry { public AdapterService getService(String serviceName); }En esta clase deberemos definir la funci√≥n getService que es la que ServiceLocatorFactoryBean invocara. Esta funci√≥n debe recibir un par√°metro que ser√° el nombre del bean (el definido con las etiquetas @service), adem√°s devolver√° un objeto que implemente el interfaz adecuado (en este caso AdapterService).\nEn la clase VehicleConfig definimos la funci√≥n que nos devolver√° el FactoryBean\n@Configuration public class VehicleConfig { @Bean public FactoryBean\u0026lt;?\u0026gt; factoryBean() { final ServiceLocatorFactoryBean bean = new ServiceLocatorFactoryBean(); bean.setServiceLocatorInterface(ServiceRegistry.class); return bean; } }En ella, instanciamos una clase tipo ServiceLocatorFactoryBean, especificando el interface que debe devolver y luego retornamos ese objeto ServiceLocatorFactoryBean que por supuesto implementa el interfaz FactoryBean\nPara ver la funcionalidad de estos beans, en el proyecto de ejemplo, hemos creado un controlador rest muy simple.\n@RestController public class VehicleController { @Autowired private ServiceRegistry serviceRegistry; @GetMapping(\"{vehicle}\") public String processGet(@PathVariable String vehicle) { return serviceRegistry.getService(vehicle).process(); } } En ella, dependiendo de la URL llamada, que ser√° volcada en la variable vehicle se llamara a una de las clases que implementan el interfaz AdapterService y todo ello sin un solo if\nAs√≠ si ejecutamos:\n$ curl -s http://localhost:8080/Car inside car service - number of executions: 1 $ curl -s http://localhost:8080/Car inside car service - number of executions: 2 se puede observar como es cargada la clase CarServicey como se mantiene en el contexto de Spring, pues se puede ver como el numero de ejecuciones aumenta con cada llamada.\nSi ejecutamos las siguientes sentencias:\n$ curl -s http://localhost:8080/Truck inside truck service - number of executions: 1 $ curl -s http://localhost:8080/Truck inside truck service - number of executions: 2 $ curl -s http://localhost:8080/Car inside car service - number of executions: 3 podemos observar como funciona todo correctamente.\nPor supuesto si intentamos cargar un Bean no definido dar√° un error:\n$ curl -s http://localhost:8080/Boat {\"timestamp\":\"2019-04-18T21:07:23.139+0000\",\"status\":500,\"error\":\"Internal Server Error\",\"message\":\"No bean named 'Boat' available\",\"path\":\"/Boat\"} Y de esta manera tan simple. gracias a la magia de Spring, se pueden crear programas f√°cilmente ampliables y modulares.\nHasta otra y no olvid√©is seguirme en Twitter para estar al tanto de nuevas entradas de este blog.\n","description":"","tags":["beans","spring"],"title":"Beans avanzados","uri":"/2019/04/18/beans-avanzados-en-spring/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: h2","uri":"/es/tags/h2/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: h2","uri":"/es/categories/h2/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: hibernate","uri":"/es/tags/hibernate/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: hibernate","uri":"/es/categories/hibernate/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Database","content":"En esta entrada, siguiendo el proyecto de ejemplo que teneis en¬†https://github.com/chuchip/jpajoins explicando como optimizar¬†las consultas a la base de datos usando JPA.\nSe ver√°n diferentes tipos de consultas, explicando como realizar uniones entre tablas de modo perezoso (lazy) o agresivo (eager). Se unir√°n tablas por un solo campo, por varios e incluso por uno pero a√±adiendo una condici√≥n est√°tica.\nEL proyecto de ejemplo esta desarrollado en Spring Boot con Hibernate, usando como base de datos H2.\nLas tablas est√°n definidas en el fichero schema.sql y se cargan datos para pruebas en el fichero data.sql\nEste es el esquema de la base de datos:\nEn esa ocasi√≥n no voy a explicar el c√≥digo pues es muy parecido al de otros programas que he explicado detalladamente en otras entradas. Me centrare en como realizar las diferentes consultas realizadas en el programa.\nNota aclaratoria:\nSi el nombre de la entidad o de la columna en las clases Java tiene una may√∫scula en medio, JPA interpretara que su hay un guion en medio y ese ser√° la tabla o columna que buscara en la base de datos. De esta manera si a la clase Invoiceheader.java le renombr√°ramos a InvoiceHeader.java Hibernate, buscar√≠a la tabla invoice_header en la base de datos y fallar√≠a pues no la encontrar√≠a.\nComo ejemplo se puede ver el campo line_details de la tabla invoiceDetails, que en la clase Invoicedetails.java (obs√©rvese que la D es min√∫scula) es llamada con la variable lineDetails.\nRealizando una ‚Äòselect join‚Äò entre la tabla cabeceras de factura (invoiceHeader) y clientes (customer) Enlace perezoso Al realizar la b√∫squeda la consulta resultante sera:\nselect invoicehea0_.id as id1_3_0_, invoicehea0_.customerid as customer2_3_0_, invoicehea0_.fiscalyear as fiscalye3_3_0_, invoicehea0_.numberinvoice as numberin4_3_0_ from invoiceheader invoicehea0_ where invoicehea0_.id=? y cuando se realice un consulta sobre la columna customer ejecutara la sentencia select necesaria para buscar los datos del cliente:\nselect customer0_.id as id1_1_0_, customer0_.active as active2_1_0_, customer0_.address as address3_1_0_, customer0_.name as name4_1_0_ from customer customer0_ where customer0_.id=? Enlace duro\n@ManyToOne(fetch=FetchType.EDGER) @JoinColumn(name=‚Äúcustomerid‚Äù,referencedColumnName=‚Äúid‚Äù) Customer customer;\nAl estar el tipo de b√∫squeda establecido a FetchType.EDGER realizara una √∫nica select con su correspondiente left outer join\nselect invoicehea0_.id as id1_3_0_, invoicehea0_.customerid as customer2_3_0_, invoicehea0_.fiscalyear as fiscalye3_3_0_, invoicehea0_.numberinvoice as numberin4_3_0_, customer1_.id as id1_1_1_, customer1_.active as active2_1_1_, customer1_.address as address3_1_1_, customer1_.name as name4_1_1_ from invoiceheader invoicehea0_ left outer join customer customer1_ on invoicehea0_.customerid=customer1_.id where invoicehea0_.id=? Rizando el rizo.A√±adiendo valores fijos Pero, ¬øy si queremos que nos enlace las dos tablas por una columna y adem√°s con un valor fijo en otra?\nEn la tabla customer se defini√≥ la columna active y queremos que solo nos muestre los datos de la factura cuando el valor de esa columna sea 1 Para ello necesitaremos la ayuda de la etiqueta @JoinColumnsOrFormulas que nos permite realizar uniones tanto entre dos columnas como estableciendo valores a la columna de la tabla destino (en este caso customer)\n@ManyToOne(fetch=FetchType.EDGER) @JoinColumnsOrFormulas({ @JoinColumnOrFormula(column=@JoinColumn(name=\"customerid\", referencedColumnName =\"id\") ), @JoinColumnOrFormula(formula = @JoinFormula(value=\"1\",referencedColumnName = \"active\")) })\tCustomer customer; La select ejecutada ser√°:\nselect invoicehea0_.id as id1_3_0_, invoicehea0_.customerid as customer2_3_0_, invoicehea0_.fiscalyear as fiscalye3_3_0_, invoicehea0_.numberinvoice as numberin4_3_0_, 1 as formula1_0_, customer1_.id as id1_1_1_, customer1_.active as active2_1_1_, customer1_.address as address3_1_1_, customer1_.name as name4_1_1_ from invoiceheader invoicehea0_ left outer join customer customer1_ on invoicehea0_.customerid=customer1_.id and 1=customer1_.active where invoicehea0_.id=? En el caso de que no encuentre ning√∫n registro, la variable customer tendr√° un valor nulo.\nSi el tipo de enlace fuera lazy como en el caso anterior se har√≠a primero una query sobre la tabla invoiceheader y cuando se pidiera el valor de la variable customer se realizar√≠a sobre su correspondiente tabla.\nUniendo tabla cabeceras facturas y l√≠neas de facturas. Para unir las dos tablas pondremos el siguiente c√≥digo en la clase Invoicedetails.java\nComo se ve, al ser dos campos los que unen ambas tablas haremos uso de la etiqueta @JoinColumns con sus correspondientes @JoinColumn dentro.\nComo no hemos especificado nada, la uni√≥n se har√° del tipo EAGER por lo cual la consulta realizada a la base de datos ser√° la siguiente:\nselect invoicehea0_.id as id1_3_0_, invoicehea0_.customerid as customer2_3_0_, invoicehea0_.fiscalyear as fiscalye3_3_0_, invoicehea0_.numberinvoice as numberin4_3_0_, 1 as formula1_0_, details1_.fiscalyear as fiscalye2_2_1_, details1_.numberinvoice as numberin5_2_1_, details1_.id as id1_2_1_, details1_.id as id1_2_2_, details1_.articleid as articlei6_2_2_, details1_.fiscalyear as fiscalye2_2_2_, details1_.linea_details as linea_de3_2_2_, details1_.numberarticles as numberar4_2_2_, details1_.numberinvoice as numberin5_2_2_, article2_.id as id1_0_3_, article2_.description as descript2_0_3_, article2_.price as price3_0_3_ from invoiceheader invoicehea0_ left outer join invoicedetails details1_ on invoicehea0_.fiscalyear=details1_.fiscalyear and invoicehea0_.numberinvoice=details1_.numberinvoice left outer join article article2_ on details1_.articleid=article2_.id where invoicehea0_.id=? El ultimo ‚Äúleft outer join‚Äù haciendo referencia a la tabla article lo pone Hibernate porque en la clase Invoicedetails.java tenemos el c√≥digo:\n@ManyToOne(fetch=FetchType.EAGER) @JoinColumns({ @JoinColumn(name=\"articleid\",referencedColumnName=\"id\")\t}) Article articles;\tpara que nos muestre los datos del articulo por cada l√≠nea del articulo, y como esta marcada la uni√≥n a tipo EAGER, Hibernate es lo suficientemente listo para hacer una sola consulta a la base de datos.\nSi realizamos un llamada a http://localhost:8080/1 observaremos la siguiente salida que devuelve la clase Invoiceheader.java veremos lo siguiente:\n{ \"id\": 1, \"yearFiscal\": 2019, \"numberInvoice\": 1, \"customerId\": 1, \"customer\": { \"id\": 1, \"name\": \"customer 1 name\", \"address\": \"customer 1 address\", \"active\": 1 }, \"details\": [ { \"id\": 2, \"year\": 2019, \"invoice\": 1, \"linea\": 2, \"numberarticles\": 3, \"articles\": { \"id\": 2, \"description\": \"article 2 description\", \"price\": 12.3 } }, { \"id\": 1, \"year\": 2019, \"invoice\": 1, \"linea\": 1, \"numberarticles\": 5, \"articles\": { \"id\": 1, \"description\": \"article 1 description\", \"price\": 10.1 } } ] } ¬ø No veis algo raro ?. ¬°Efectivamente!. Las lineas las saca ordenadas de mayor a menor (primero la linea 2, luego la 1). Evidentemente eso es debido a la etiqueta @OrderBy(‚Äúlinea desc‚Äù) , de la cual hay que destacar dos cosas:\nEl campo al que hacemos referencia es como es nombrado en la entidad. As√≠ aunque en la base de datos se llama lineaDetails se referencia por la etiqueta linea que es como se nombra la variable En la consulta que hace a la base de datos no introduce la clausula ‚Äòorder by‚Äô . Es decir es el propio hibernate el que encarga de ordenar los resultados. Tenerlo en cuenta cuando haya miles de registros devueltos. Y as√≠ queda demostrado la importancia de establecer el tipo de uni√≥n pues si imaginamos una factura que tenga miles de l√≠neas (improbable lo s√©), si establecemos el m√©todo de uni√≥n a lazy en vez de hacer una sola consulta a la base de datos, har√≠a 1000 lo cual, por supuesto ralentizar√≠a much√≠simo nuestra consulta, aparte de sobrecargar innecesariamente el servidor de la base de datos\n","description":"","tags":["h2","hibernate","java","jpa","spring boot"],"title":"Optimizando relaciones entre entidades en Hibernate","uri":"/2019/04/05/optimizando-consultas-con-hibernate/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Database","content":"Spring Boot ofrece un fant√°stico soporte para acceder a los datos con JPA a trav√©s de sus interfaces, del tipo Repository. Si a esto le a√±adimos la facilidad con que se crean servicios REST, como explicaba en la entrada [http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/][2] podremos hacer una aplicaci√≥n ofreciendo una API para acceder a nuestra base de datos preferida muy facilmente.\nPero si queremos implementar HATEOAS en nuestro proyecto o si hay muchos criterios sobre los que debemos acceder a los datos, deberemos escribir bastante c√≥digo. Para solucionar este problema Spring Boot provee el paquete Spring Data Rest con el cual con apenas c√≥digo podremos crear una API para acceder a las tablas de nuestra base de datos.\nEn el ejemplo que ten√©is disponible en mi p√°gina de GITHUB veremos como poder realizar el mantenimiento de una tabla de clientes (customers) sin escribir ni una sola l√≠nea para definir las diferentes APIS REST.\nCreando el proyecto Como siempre, podremos ir a la pagina https://start.spring.io para crear nuestro proyecto maven. Para el proyecto de ejemplo que vamos a crear, deberemos incluir las siguientes dependencias:\nSpring Data Rest, H2, JPA, Lombok como se ve en la siguiente captura de pantalla\nUna vez tengamos hayamos importado el proyecto en nuestro IDE preferido, deberemos modificar el fichero application.properties para definir ciertos par√°metros:\n#H2 spring.h2.console.enabled=true spring.h2.console.path=/h2 #JPA spring.jpa.show-sql=true spring.jpa.hibernate.ddl-auto=create-drop # Datasource spring.datasource.url=jdbc:h2:file:~/test spring.datasource.username=sa spring.datasource.password= spring.datasource.driver-class-name=org.h2.Driver # Data Rest spring.data.rest.base-path: /api De este fichero la √∫nica entrada relativa a la librer√≠a Data Rest es la √∫ltima. En ella especificamos la direcci√≥n donde se deben implementar las llamadas REST para acceder a las diferentes tablas que implemente nuestra aplicaci√≥n. Es decir, en nuestro caso, se acceder√° a trav√©s de la URL: http://localhost:8080/api\nLas dem√°s l√≠neas configuran la base de datos H2 que usaremos, as√≠ como ciertas propiedades de JPA. Por supuesto dejaremos a JPA que cree la estructura de la base de datos a trav√©s de las entidades definidas, gracias a la sentencia: spring.jpa.hibernate.ddl-auto=create-drop\nEstructura del proyecto Nuestro proyecto final tendr√° la siguiente estructura:\nComo se puede ver, definiremos dos tablas (entities) , que son: City y Customer. Tambi√©n definimos los correspondientes repositorios CustomerRepository y CityRepository\nLa clase CityEntity.java es la siguiente:\n@Entity @Data @RestResource(rel=\"customers\", path=\"customer\") public class CustomerEntity {\t@Id long id;\t@Column String name;\t@Column String address;\t@Column String telephone;\t@Column @JsonIgnore String secret; @OneToOne CityEntity city; }Las particularidades de esta clase son las siguientes:\nla l√≠nea @RestResource donde con el par√°metro rel especificamos como debe llamarse el objeto en la salida JSON. Con el par√°metro path se indica donde se debe realizar la petici√≥n HTTP. La anotaci√≥n @JsonIgnore aplicada a la columna secret. Con esta etiqueta ese campo ser√° ignorado, de tal manera que ni se mostrara en las salidas, ni se actualizara, aunque se incluya, en las peticiones. Si no pusi√©ramos la etiqueta @RestResource Spring presentar√≠a el recurso para acceder a la entidad en http://localhost:8080/api/customerEntities es decir usar√≠a el nombre de la clase, poni√©ndolo en plural , por lo cual le a√±ade ‚Äòes‚Äô.\nEl repositorio de esta entidad esta en CustomerRepository y contiene solo estas l√≠neas:\npublic interface CustomerRepository extends CrudRepository\u0026lt;CustomerEntity, Long\u0026gt; {\tpublic List\u0026lt;CustomerEntity\u0026gt; findByNameIgnoreCaseContaining(@Param(\"name\") String name); }La funci√≥n findByNameIgnoreCaseContaining que he definido permitir√° buscar los clientes, ignorando may√∫sculas y min√∫sculas, cuyo nombre contengan la cadena mandada. M√°s adelante explicare como poder realizar una consulta a trav√©s de esta llamada con Spring Data Rest\nTen√©is m√°s documentaci√≥n sobre como crear consultas personalizadas en Spring en esta otra entrada m√≠a.\nLa clase CityEntity.java contiene las siguientes l√≠neas:\n@Entity @Data @RestResource(exported=false) public class CityEntity {\t@Id int id; @Column String name; @Column String province; }En este caso la etiqueta @RestResource tiene indicada la propiedad exported igual a false para que esta entidad no sea tratada por¬†Data Rest y no sera accesible a traves de ninguna API.\nAccediendo al API de Data Rest Los recursos que est√°n publicados estar√°n disponibles en la URL: http://localhost:8080/api, como hemos definido en el fichero application.properties. Esta ser√° la salida en este proyecto:\n\u003e curl -s http://localhost:8080/api/ { \"_links\" : { \"customers\" : { \"href\" : \"http://localhost:8080/api/customer\" }, \"profile\" : { \"href\" : \"http://localhost:8080/api/profile\" } } } El profile se refiere a lo definido en el RFC 6906, donde se incluye detalles de la aplicaci√≥n, pero no tratare de ello en esta entrada.\nPara acceder al √∫nico recurso disponible en nuestro proyecto, al que hemos llamado customer,¬†navegaremos a: http://localhost:8080/api/customer .\nPrimero a√±adamos un registro. Esto lo realizaremos realizando una petici√≥n tipo POST como la siguiente:\n\u003e curl -s --request POST localhost:8080/api/customer -d '{\"id\": 1, \"name\":\"nombre cliente 1\",\"address\":\"direccion cliente 1\",\"telephone\":\"telefono cliente 1\", \"secret\": \"no guardar\"}' -H \"Content-Type: application/json\" { \"name\" : \"nombre cliente 1\", \"address\" : \"direccion cliente 1\", \"telephone\" : \"telefono cliente 1\", \"city\" : null, \"_links\" : { \"self\" : { \"href\" : \"http://localhost:8080/api/customer/1\" }, \"customerEntity\" : { \"href\" : \"http://localhost:8080/api/customer/1\" } } Podemos comprobar que ha realizado la inserci√≥n gracias a la consola de H2. Para ello iremos a la URL http://localhost:8080/h2/ y pulsaremos el bot√≥n Connect. Una vez conectados, si realizamos una query sobre la tabla CUSTOMER_ENTITY veremos la siguiente salida:\nObservar que aunque hemos a√±adido el valor para el campo ‚Äúsecret‚Äù en la anterior petici√≥n POST, este no se ha guardado en la base de datos.\nComo no podemos acceder a la tabla city_entity a trav√©s de nuestra API pues as√≠ lo hemos especificado, Vamos a aprovechar que estamos en la consola y a√±adir un registro en la tabla, el cual asignaremos al cliente insertado.\n![Consultando datos en tabla customer_entity][/img/2019/03/consola-h2.png]\nAhora si realizamos una petici√≥n GET obtendremos la siguiente salida:\n\u003e curl -s localhost:8080/api/customer { \"_embedded\" : { \"customers\" : [ { \"name\" : \"nombre cliente 1\", \"address\" : \"direccion cliente 1\", \"telephone\" : \"telefono cliente 1\", \"city\" : { \"name\" : \"Logro√±o\", \"province\" : \"La Rioja\" }, \"_links\" : { \"self\" : { \"href\" : \"http://localhost:8080/api/customer/1\" }, \"customerEntity\" : { \"href\" : \"http://localhost:8080/api/customer/1\" } } } ] }, \"_links\" : { \"self\" : { \"href\" : \"http://localhost:8080/api/customer\" }, \"profile\" : { \"href\" : \"http://localhost:8080/api/profile/customer\" }, \"search\" : { \"href\" : \"http://localhost:8080/api/customer/search\" } } } Observar como HATEOAS muestra los diferentes enlaces disponibles automagicamente\nPor ejemplo podr√≠amos consultar directamente el cliente con el c√≥digo 1 navegando a http://localhost:8080/api/customer/1\n\u003e curl -s localhost:8080/api/customer/1 { \"name\" : \"nombre cliente 1\", \"address\" : \"direccion cliente 1\", \"telephone\" : \"telefono cliente 1\", \"city\" : { \"name\" : \"Logro√±o\", \"province\" : \"La Rioja\" }, \"_links\" : { \"self\" : { \"href\" : \"http://localhost:8080/api/customer/1\" }, \"customerEntity\" : { \"href\" : \"http://localhost:8080/api/customer/1\" } } } Como he explicado antes, en el repositorio de Customer he definido la funci√≥n findByNameIgnoreCaseContaining. Para realizar una consulta usando esa funci√≥n usaremos los enlaces tipo search\nhttp://localhost:8080/api/customer/search/findByNameIgnoreCaseContaining{?name}\n\u003e curl -s http://localhost:8080/api/customer/search/findByNameIgnoreCaseContaining?name=Clien { \"_embedded\" : { \"customers\" : [ { \"name\" : \"nombre cliente 1\", \"address\" : \"direccion cliente 1\", \"telephone\" : \"telefono cliente 1\", \"city\" : { \"name\" : \"Logro√±o\", \"province\" : \"La Rioja\" }, \"_links\" : { \"self\" : { \"href\" : \"http://localhost:8080/api/customer/1\" }, \"customerEntity\" : { \"href\" : \"http://localhost:8080/api/customer/1\" } } } ] }, \"_links\" : { \"self\" : { \"href\" : \"http://localhost:8080/api/customer/search/findByNameIgnoreCaseContaining?name=Clien\" } } } Por no hacer m√°s larga la entrada no explicare como actualizar un registro, con peticiones HTTP tipo PUT, borrar registros con peticiones HTTP tipo DELETE o actualizar parte de un registro con PATCH, pues creo que es obvio y lo dejo como ejercicio para el lector.\nComentar que lo mostrado en este articulo es solo un esbozo de la potencia de Spring Data Rest.\nEstas son algunas de las otras muchas caracter√≠sticas que implementa:\nPermite a√±adir eventos de tal manera que cuando se inserte, modifique, borre o incluso consulte un registro ese evento sea disparado y se puedan ejecutar el c√≥digo deseado, el cual incluso puede modificar o anular la petici√≥n realizada. Por supuesto soporta navegaci√≥n Soporta navegaci√≥n entre los registros consultados. Validaci√≥n de los datos insertados Los Links pueden ser totalmente personalizados. Y esto es todo, esperando que el articulo haya resultado interesante me despido hasta el siguiente. Como siempre se agradecer√° cualquier feedback.\n","description":"","tags":["java","jpa","json","rest","spring boot"],"title":"Accediendo facilmente a los datos con Spring Rest Data","uri":"/2019/03/25/accediendo-facilmente-a-los-datos-con-spring-rest-data/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: CRUD","uri":"/es/categories/crud/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: json","uri":"/es/tags/json/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Restful","content":"En este articulo explicare como crear una pasarela para peticiones REST (una gateway) utilizando Zuul.\nZuul es parte del paquete Spring Cloud NetFlix y permite redirigir peticiones REST, realizando diversos tipos de filtros.\nEn casi cualquier proyecto donde haya microservicios, es deseable que todas las comunicaciones entre esos microservicios pasen por un lugar com√∫n, de tal manera que se registren las entradas y salidas, se pueda implementar seguridad o se puedan redirigir las peticiones dependiendo de diversos par√°metros.\nCon Zuul esto es muy f√°cil de implementar ya que esta perfectamente integrado con Spring Boot.\nComo siempre en mi p√°gina de GitHub pod√©is ver los fuentes sobre los que esta basado este articulo.\nCreando el proyecto. Si tenemos instalado Eclipse con el plugin de Spring Boot (lo cual recomiendo), el crear el proyecto seria tan f√°cil como a√±adir un nuevo proyecto del tipo Spring Boot incluyendo el starter Zuul. Para poder hacer algunas pruebas tambi√©n incluiremos el starter Web, como se ve en la imagen:\nTambien tenemos la opci√≥n de crear un proyecto Maven desde la p√°gina web https://start.spring.io/ que luego importaremos desde nuestro IDE preferido.\nEmpezando Partiendo que nuestro programa esta escuchando en http://localhost:8080/ , vamos a a suponer que queremos que todo lo que vaya a la URL, http://localhost:8080/google sea redirigida a https://www.google.com.\nPara ello deberemos crear el fichero application.yml dentro del directorio resources, como se ve en la imagen\nEn este fichero incluiremos las siguientes l√≠neas:\nzuul: routes: google: path: /google/** url: https://www.google.com/ Con ellas especificaremos que todo lo que vaya a la ruta /google/ y algo m√°s (**) sea redirigido a https://www.google.com/ , teniendo en cuenta que si por ejemplo la petici√≥n es realizada http://localhost:8080/google/search?q=profesor_p esta ser√° redirigida a https://www.google.com/search?q=profesor_p. Es decir lo que a√±adamos despu√©s de /google/ ser√° incluido en la redirecci√≥n, debido a los dos asteriscos a√±adidos al final del path.\nPara que el programa funcione solo ser√° necesario a√±adir la anotaci√≥n @EnableZuulProxyen la clase de inicio, en este caso en: ZuulSpringTestApplication\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy; @SpringBootApplication @EnableZuulProxy public class ZuulSpringTestApplication { public static void main(String[] args) { SpringApplication.run(ZuulSpringTestApplication.class, args); } }Para poder demostrar las diversas funcionalidades de ZUUL, en http://localhost:8080/api estar√° escuchando un servicio REST que esta implementada en la clase TestController de este proyecto. Esta clase simplemente devuelve en el cuerpo, los datos de la petici√≥n recibida.\n@RestController public class TestController { final static String SALTOLINEA=\"\\n\"; Logger log = LoggerFactory.getLogger(TestController.class); @RequestMapping(path=\"/api\") public String test(HttpServletRequest request) { StringBuffer strLog=new StringBuffer(); strLog.append(\"................ RECIBIDA PETICION EN /api ...... \"+SALTOLINEA); strLog.append(\"Metodo: \"+request.getMethod()+SALTOLINEA); strLog.append(\"URL: \"+request.getRequestURL()+SALTOLINEA); strLog.append(\"Host Remoto: \"+request.getRemoteHost()+SALTOLINEA); strLog.append(\"----- MAP ----\"+SALTOLINEA); request.getParameterMap().forEach( (key,value) -\u0026gt; { for (int n=0;n\u0026lt;value.length;n++) { strLog.append(\"Clave:\"+key+ \" Valor: \"+value[n]+SALTOLINEA); } } ); strLog.append(SALTOLINEA+\"----- Headers ----\"+SALTOLINEA); Enumeration\u0026lt;String\u0026gt; nameHeaders=request.getHeaderNames();\twhile (nameHeaders.hasMoreElements()) { String name=nameHeaders.nextElement(); Enumeration\u0026lt;String\u0026gt; valueHeaders=request.getHeaders(name); while (valueHeaders.hasMoreElements()) { String value=valueHeaders.nextElement(); strLog.append(\"Clave:\"+name+ \" Valor: \"+value+SALTOLINEA); } } try { strLog.append(SALTOLINEA+\"----- BODY ----\"+SALTOLINEA); BufferedReader reader= request.getReader(); if (reader!=null) { char[] linea= new char[100]; int nCaracteres; while ((nCaracteres=reader.read(linea,0,100))\u0026gt;0) {\tstrLog.append( linea); if (nCaracteres!=100) break; } } } catch (Throwable e) { e.printStackTrace(); } log.info(strLog.toString()); return SALTOLINEA+\"---------- Prueba de ZUUL ------------\"+SALTOLINEA+ strLog.toString(); } }Filtrando: Dejando logs En esta parte vamos a ver como crear un filtro de tal manera que se deje un registro de las peticiones realizadas.\nPara ello crearemos la clase PreFilter.java la cual debe extender de ZuulFilter\npublic class PreFilter extends ZuulFilter { Logger log = LoggerFactory.getLogger(PreFilter.class); @Override public Object run() {\tRequestContext ctx = RequestContext.getCurrentContext();\tStringBuffer strLog=new StringBuffer(); strLog.append(\"\\n------ NUEVA PETICION ------\\n\");\tstrLog.append(String.format(\"Server: %s Metodo: %s Path: %s \\n\",ctx.getRequest().getServerName()\t,ctx.getRequest().getMethod(), ctx.getRequest().getRequestURI())); Enumeration\u003cString\u003e enume= ctx.getRequest().getHeaderNames(); String header; while (enume.hasMoreElements()) { header=enume.nextElement(); strLog.append(String.format(\"Headers: %s = %s \\n\",header,ctx.getRequest().getHeader(header)));\t};\tlog.info(strLog.toString()); return null; } @Override public boolean shouldFilter() {\treturn true; } @Override public int filterOrder() { return FilterConstants.SEND_RESPONSE_FILTER_ORDER; } @Override public String filterType() { return \"pre\"; } } En esta clase deberemos sobrescribir las funciones que vemos en el fuente. A continuaci√≥n explico que haremos en cada de ellas\n**public Object run()**Aqu√≠ pondremos lo que queremos que se ejecute por cada petici√≥n recibida. En ella podremos ver el contenido de la petici√≥n y manipularla si fuera necesario. **public boolean shouldFilter()**Si devuelve true se ejecutara la funci√≥n run . **public int filterOrder()**Devuelve cuando que se ejecutara este filtro, pues normalmente hay diferentes filtros, para cada tarea. Hay que tener en cuenta que ciertas redirecciones o cambios en la petici√≥n hay que hacerlas en ciertos ordenes, por la misma l√≥gica que tiene zuul a la hora de procesar las peticiones. public String filterType() Especifica cuando se ejecutara el filtro. Si devuelve ‚Äúpre‚Äù se ejecutara antes de que se haya realizado la redirecci√≥n y por lo tanto antes de que se haya llamado al servidor final (a google en nuestro ejemplo).Si devuelve ‚Äúpost‚Äù se ejecutara despu√©s de que el servidor haya respondido a la petici√≥n.En la clase org.springframework.cloud.netflix.zuul.filters.support.FilterConstants tenemos definidos los tipos a devolver, PRE_TYPE , POST_TYPE,ERROR_TYPE o ROUTE_TYPE. En la clase de ejemplo vemos como antes de realizar la petici√≥n al servidor final, se registran algunos datos de la petici√≥n, dejando un log con ellos.\nPor √∫ltimo, para que Spring Boot utilize este filtro debemos a√±adir la funci√≥n siguiente en nuestra clase principal.\n@Bean public PreFilter preFilter() { return new PreFilter(); } Zuul buscara beans hereden de la clase ZuulFilter y los usara.\nEn este ejemplo, tambi√©n esta la clase PostFilter.java que implementa otro filtro pero que se ejecuta despu√©s de realizar la petici√≥n al servidor final. Como he comentado esto se consigue devolviendo ‚Äúpost‚Äù en la funci√≥n filterType().\nPara que Zuul use esta clase deberemos crear otro bean con una funci√≥n como esta:\n@Bean public PostFilter postFilter() { return new PostFilter(); } Recordar que tambi√©n hay un filtro para tratar los errores y otro para tratar justo despu√©s de la redirecci√≥n (‚Äúroute‚Äù), pero en este articulo solo hablare de los filtros tipo ‚Äúpost‚Äù y tipo ‚Äúpre‚Äù\nAclarar que aunque no lo trato en este articulo con Zuul no solo podemos redirigir hacia URL est√°ticas sino tambi√©n a servicios, suministrados por Eureka Server, del cual hable en un articulo articulo. Adem√°s se integra con Hystrix para tener tolerancia a fallos, de tal manera que si no puede alcanzar un servidor se puede especificar que acci√≥n tomar.\nFiltrando. Implementando seguridad A√±adamos una nueva redirecci√≥n al fichero application.yml\nsensitiveHeaders: usuario, clave privado: path: /privado/** url: http://www.profesor-p.com Esta redirecci√≥n llevara cualquier petici√≥n tipo http://localhost:8080/privado/LO_QUE_SEA a la pagina donde esta este articulo (http://www.profesor-p.com )\nLa linea sensitiveHeaders la explicare m√°s adelante.\nEn la clase PreRewriteFilterhe implementando otro filtro tipo pre que trata solo esta redirecci√≥n. ¬ø como ?. F√°cil, poniendo este c√≥digo en la funci√≥n shouldFilter()\n@Override public boolean shouldFilter() {\treturn RequestContext.getCurrentContext().getRequest().getRequestURI().startsWith(\"/privado\"); } Ahora en la funci√≥n run incluimos el siguiente c√≥digo\nLogger log = LoggerFactory.getLogger(PreRewriteFilter.class); @Override public Object run() {\tRequestContext ctx = RequestContext.getCurrentContext();\tStringBuffer strLog=new StringBuffer(); strLog.append(\"\\n------ FILTRANDO ACCESO A PRIVADO - PREREWRITE FILTER ------\\n\");\ttry {\tString url=UriComponentsBuilder.fromHttpUrl(\"http://localhost:8080/\").path(\"/api\").build().toUriString(); String usuario=ctx.getRequest().getHeader(\"usuario\")==null?\"\":ctx.getRequest().getHeader(\"usuario\"); String password=ctx.getRequest().getHeader(\"clave\")==null?\"\":ctx.getRequest().getHeader(\"clave\"); if (! usuario.equals(\"\")) { if (!usuario.equals(\"profesorp\") || !password.equals(\"profe\")) { String msgError=\"Usuario y/o contrase√±a invalidos\"; strLog.append(\"\\n\"+msgError+\"\\n\");\tctx.setResponseBody(msgError); ctx.setResponseStatusCode(HttpStatus.FORBIDDEN.value()); ctx.setSendZuulResponse(false); log.info(strLog.toString());\treturn null; } ctx.setRouteHost(new URL(url)); }\t} catch ( IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } log.info(strLog.toString()); return null; }Esta funci√≥n busca en las cabeceras de la petici√≥n (headers) si¬†existe la cabecera usuario, en caso de no encontrarla no hace nada con lo cual redireccionara a http://www.profesor-p.com como se indica en el filtro. En el caso de que exista la cabecera usuario con el valor profesorpy que la variable clave tenga el valor profe, se redirigir√° a http://localhost:8080/api. En caso contrario devolver√° un c√≥digo HTTP FORBIDEN devolviendo la cadena \"Usuario y/o contrase√±a invalidos\" en el cuerpo de la respuesta HTTP. Ademas se cancela el flujo de la petici√≥n debido a que se llama a ctx.setSendZuulResponse(false)\nDebido a la linea sensitiveHeaders del fichero application.yml que he mencionado anteriormente las cabeceras ‚Äòusuario‚Äò y ‚Äòclave‚Äò no ser√°n pasadas en el flujo de la petici√≥n.\nEs muy importante que este filtro se ejecute despues del filtro de PRE_DECORATION, pues en caso contrario la llamada a ctx.setRouteHost() no tendra efecto. Por ello en la funci√≥n filterOrder tenemos este c√≥digo:\n@Override public int filterOrder() { return FilterConstants.PRE_DECORATION_FILTER_ORDER+1; }As√≠ una llamada pasando el usuario y la constrase√±a correctas, nos redirigira a http://localhost:8080/api\n\u003e curl -s -H \"usuario: profesorp\" -H \"clave: profe\" localhost:8080/privado ---------- Prueba de ZUUL ------------ ................ RECIBIDA PETICION EN /api ...... Metodo: GET URL: http://localhost:8080/api Host Remoto: 127.0.0.1 ----- MAP ---- ----- Headers ---- Clave:user-agent Valor: curl/7.63.0 Clave:accept Valor: */* Clave:x-forwarded-host Valor: localhost:8080 Clave:x-forwarded-proto Valor: http Clave:x-forwarded-prefix Valor: /privado Clave:x-forwarded-port Valor: 8080 Clave:x-forwarded-for Valor: 0:0:0:0:0:0:0:1 Clave:accept-encoding Valor: gzip Clave:host Valor: localhost:8080 Clave:connection Valor: Keep-Alive ----- BODY ----Si se pone mal la contrase√±a la salida seria esta:\n\u003e curl -s -H \"usuario: profesorp\" -H \"clave: ERROR\" localhost:8080/privado Usuario y/o contrase√±a invalidos###Filtrando. Filtrado din√°mico\nPara terminar incluiremos dos nuevas redirecciones en el fichero applicaction.yml\nlocal: path: /local/** url: http://localhost:8080/api url: path: /url/** url: http://url.com En la primera cuando vayamos a la URL http://localhost:8080/local/LO_QUE_SEA seremos redirigidos a http://localhost:8080/api/LO_QUE_SEA. Aclarar que la etiqueta local:es arbitraria y podr√≠a poner pepe no teniendo porque coincidir con el path que deseamos redirigir.\nEn la segunda cuando vayamos a la URL http://localhost:8080/url/LO_QUE_SEA seremos redirigidos a http://localhost:8080/api/LO_QUE_SEA\nLa clase RouteURLFilter sera la encargada de realizar tratar el filtro URL. Recordar que para que Zuul utilize los filtros debemos crear su correspondiente bean.\n@Bean public RouteURLFilter routerFilter() { return new RouteURLFilter(); }En la funci√≥n shouldFilter de RouteURLFilter tendremos este c√≥digo para que trate solo las peticiones a /url.\n@Override public boolean shouldFilter() { RequestContext ctx = RequestContext.getCurrentContext(); if ( ctx.getRequest().getRequestURI() == null || ! ctx.getRequest().getRequestURI().startsWith(\"/url\")) return false; return ctx.getRouteHost() != null \u0026\u0026 ctx.sendZuulResponse(); } Este filtro ser√° declarado del tipo pre en la funci√≥n filterType por lo cual se ejecutara despu√©s de los filtros pre y antes de ejecutar la redirecci√≥n y llamar al servidor final.\n@Override public String filterType() { return FilterConstants.PRE_TYPE; } En la funci√≥n run esta el c√≥digo que realiza la magia. Una vez hayamos capturado la URL de destino y el path, como explico m√°s adelante, es utilizada la funci√≥n setRouteHost() del RequestContext para redirigirla adecuadamente.\n@Override public Object run() { try { RequestContext ctx = RequestContext.getCurrentContext(); URIRequest uriRequest; try { uriRequest = getURIRedirection(ctx); } catch (ParseException k) { ctx.setResponseBody(k.getMessage()); ctx.setResponseStatusCode(HttpStatus.BAD_REQUEST.value()); ctx.setSendZuulResponse(false); return null; } UriComponentsBuilder uriComponent = UriComponentsBuilder.fromHttpUrl(uriRequest.getUrl()); if (uriRequest.getPath() == null) uriRequest.setPath(\"/\"); uriComponent.path(uriRequest.getPath()); String uri = uriComponent.build().toUriString(); ctx.setRouteHost(new URL(uri)); } catch (IOException k) { k.printStackTrace(); } return null; } Si encuentra en el header la variable hostDestino ser√° donde mandara la petici√≥n recibida. Tambi√©n buscara en la cabecera de la petici√≥n la variables pathDestino para¬†a√±adirla al hostDestino.\nPor ejemplo, supongamos una petici√≥n como esta:\n\u003e curl --header \"hostDestino: http://localhost:8080\" --header \"pathDestino: api\" \\ localhost:8080/url?nombre=profesorp La llamada ser√° redirigida a http://localhost:8080/api?q=profesor-p y mostrara la siguiente salida:\n---------- Prueba de ZUUL ------------ ................ RECIBIDA PETICION EN /api ...... Metodo: GET URL: http://localhost:8080/api Host Remoto: 127.0.0.1 ----- MAP ---- Clave:nombre Valor: profesorp ----- Headers ---- Clave:user-agent Valor: curl/7.60.0 Clave:accept Valor: */* Clave:hostdestino Valor: http://localhost:8080 Clave:pathdestino Valor: api Clave:x-forwarded-host Valor: localhost:8080 Clave:x-forwarded-proto Valor: http Clave:x-forwarded-prefix Valor: /url Clave:x-forwarded-port Valor: 8080 Clave:x-forwarded-for Valor: 0:0:0:0:0:0:0:1 Clave:accept-encoding Valor: gzip Clave:host Valor: localhost:8080 Clave:connection Valor: Keep-Alive ----- BODY ---- Tambi√©n puede recibir la URL a redireccionar en el cuerpo de la petici√≥n. El objeto JSON recibido debe tener el formato definido por la clase GatewayRequest que a su vez contiene un objeto URIRequest\npublic class GatewayRequest { URIRequest uri; String body; } public class URIRequest { String url; String path; byte[] body=null; Este es un ejemplo de una redirecci√≥n poniendo la URL destino en el body:\ncurl -X POST \\ 'http://localhost:8080/url?nombre=profesorp' \\ -H 'Content-Type: application/json' \\ -d '{ \"body\": \"El body chuli\", \"uri\": { \"url\":\"http://localhost:8080\", \"path\": \"api\" } }' URL: ‚Äúhttp://localhost:8080/url?nombre=profesorp‚Äù\nCuerpo de la petici√≥n:\nLa salida recibida ser√°:\n---------- Prueba de ZUUL ------------ ................ RECIBIDA PETICION EN /api ...... Metodo: POST URL: http://localhost:8080/api Host Remoto: 127.0.0.1 ----- MAP ---- Clave:nombre Valor: profesorp ----- Headers ---- Clave:user-agent Valor: curl/7.60.0 Clave:accept Valor: */* Clave:content-type Valor: application/json Clave:x-forwarded-host Valor: localhost:8080 Clave:x-forwarded-proto Valor: http Clave:x-forwarded-prefix Valor: /url Clave:x-forwarded-port Valor: 8080 Clave:x-forwarded-for Valor: 0:0:0:0:0:0:0:1 Clave:accept-encoding Valor: gzip Clave:content-length Valor: 91 Clave:host Valor: localhost:8080 Clave:connection Valor: Keep-Alive ----- BODY ---- El body chuli Como se ve el cuerpo es tratado y al servidor final solo es mandado lo que se env√≠a en el par√°metro body de la petici√≥n JSON\nComo se ve, Zuul tiene mucha potencia y es una excelente herramienta para realizar redirecciones. En este articulo solo he ara√±ado las principales caracter√≠sticas de esta fant√°stica herramienta, pero espero que haya servido para ver las posibilidades que ofrece.\n¬°¬°Nos vemos en la pr√≥xima entrada!!\n","description":"","tags":["cloud","gateway","java","spring boot","zuul"],"title":"Usando Zuul para redirigir peticiones REST","uri":"/2019/03/16/zuul-para-redirigir-peticiones-rest-en-spring-boot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: zuul","uri":"/es/tags/zuul/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: zuul","uri":"/es/categories/zuul/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: profiles","uri":"/es/tags/profiles/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: profiles","uri":"/es/categories/profiles/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Database","content":"Hay veces en que las campos sobre los que restringir una consulta pueden variar en tiempo de ejecuci√≥n. En ese caso si queremos usar JPA no podemos usar una sentencia @Query definida en nuestro repositorio pues no sabemos los campos sobre los que se aplicaran condiciones en la consulta. Adem√°s es bastante com√∫n que el usuario pueda elegir el criterio de b√∫squeda sobre un campo, deseando que el valor de un campo deba ser igual, mayor o menor, respecto al valor introducido .\nEn Spring Boot podemos dar una soluci√≥n a este problema usando un la clase CriteriaBuilder de nuestro EntityManager . En esta entrada os mostrare como hacerlo f√°cilmente.\nPara ello he creado un proyecto que he dejado en https://github.com/chuchip/CustomJpaQuery\nEn este programa podremos hacer una petici√≥n REST a la URL http://localhost:8080/get donde podremos pasar los siguientes par√°metros, todos ellos opcionales:\nIdentificador del cliente: idCustomer Nombre del Cliente: nameCustomer Direcci√≥n del cliente: addressCustomer Fecha creaci√≥n del registro: createdDate. La fecha se debera mandar en formato espa√±ol, es decir: ‚Äúdd-MM-yyyy‚Äù. Por ejemplo: 31-01-2018. Condici√≥n del campo anterior: dateCondition. Tiene que ser una de estas tres cadenas de texto: ‚Äúgreater‚Äù,‚Äùless‚Äù, ‚Äúequal‚Äù En caso de no poner ninguna condici√≥n o poner una condici√≥n no valida se usara greater URLs de b√∫squeda podr√≠an ser:\nhttp://localhost:8080/get?createdDate=21-01-2018\u0026dateCondition=equal http://localhost:8080/get?createdDate=21-01-2018\u0026dateCondition=greater\nhttp://localhost:8080/get?nameCustomer=Smith\u0026createdDate=21-01-2018\nEl programa usa una base de datos H2 para crear una tabla simple de clientes (customers) con los campos: id,name,address,email y created_date. Llena despu√©s la tabla con los datos que podemos ver en el fichero data.sql\nPara realizar nuestra QUERY personalizada, en primer lugar, se crea un interface en CustomersRepository que extiende de JpaRepository . En este interface definimos la funci√≥n getData como se ve en el siguiente c√≥digo:\npublic interface CustomersRepository extends JpaRepository\u003cCustomersEntity, Integer\u003e { public List\u003cCustomersEntity\u003e getData(HashMap\u003cString, Object\u003e conditions);\t}La funci√≥n getData recibir√° un HashMap donde iremos poniendo las condiciones de b√∫squeda. As√≠ si queremos buscar los clientes cuyo c√≥digo de cliente sea igual a 1, a√±adiremos una la llave ‚Äòid‚Äô y el valor ‚Äò1‚Ä≥\nHashMap\u003cString,Object\u003e hm= new HashMap\u003c\u003e(); hm.put(\"id\",1);Si deseamos que el nombre sea como ‚ÄòSmith‚Äô, a√±adir√≠amos este elemento al HashMap:\nhm.put(\"name\",\"Smith\");Y as√≠ sucesivamente con todos los campos o condiciones deseadas. Una vez definido nuestro repositorio creamos una clase a la que obligatoriamente deberemos llamar CustomersRepositoryImpl es decir se debe llamar igual que nuestro interface del repositorio pero a√±adiendo la terminaci√≥n impl (de implementaci√≥n). En esta clase deberemos tener una funci√≥n igual que la definida en el repositorio pues es la funci√≥n que Spring Boot ejecutara cuando llamemos a la funci√≥n definida en el interface. Este es el c√≥digo de la clase que permitir√° personalizar nuestra query:\npublic class CustomersRepositoryImpl{ @PersistenceContext private EntityManager entityManager; public List\u003cCustomersEntity\u003e getData(HashMap\u003cString, Object\u003e conditions) { CriteriaBuilder cb = entityManager.getCriteriaBuilder(); CriteriaQuery\u003cCustomersEntity\u003e query= cb.createQuery(CustomersEntity.class); Root\u003cCustomersEntity\u003e root = query.from(CustomersEntity.class); List\u003cPredicate\u003e predicates = new ArrayList\u003c\u003e(); conditions.forEach((field,value) -\u003e { switch (field) { case \"id\": predicates.add(cb.equal (root.get(field), (Integer)value)); break; case \"name\": predicates.add(cb.like(root.get(field),\"%\"+(String)value+\"%\")); break; case \"address\": predicates.add(cb.like(root.get(field),\"%\"+(String)value+\"%\")); break; case \"created\": String dateCondition=(String) conditions.get(\"dateCondition\");\tswitch (dateCondition) { case GREATER_THAN: predicates.add(cb.greaterThan(root.\u003cDate\u003eget(field),(Date)value)); break; case LESS_THAN: predicates.add(cb.lessThan(root.\u003cDate\u003eget(field),(Date)value)); break; case EQUAL: predicates.add(cb.equal(root.\u003cDate\u003eget(field),(Date)value)); break; } break; } }); query.select(root).where(predicates.toArray(new Predicate[predicates.size()])); return entityManager.createQuery(query).getResultList(); } }Como se ve, lo primero es inyectar una referencia al objeto EntityManager con la etiqueta @PersistenceContext. En la funci√≥n sobre el EntityManager crearemos un objeto CriteriaBuilder y sobre este objeto creamos un CriteriaQuery donde iremos poniendo las diferentes condiciones de nuestra Query. Para poder buscar las columnas sobre las que queremos realizar la consulta necesitaremos un objeto Root , que crearemos a partir del anterior objeto CriteriaQuery\nAhora creamos una lista de objeto Predicate . En esa lista ir√°n todos los Predicate que no son sino las condiciones de nuestra query.\nUtilizando Lambdas y Streams para hacer el c√≥digo mas limpio y sencillo, vamos recorriendo el HashMap y a√±adiendo a la lista de Predicates las condiciones definidas.\nPartiendo del objeto CriteriaQuery se ira llamando a la funci√≥n deseada seg√∫n el criterio a aplicar. De esta manera, si queremos establecer como condici√≥n que un campo sea igual a un valor llamaremos a la funci√≥n equal(), pasando como primer par√°metro la Expresion que hace referencia al campo de la entidad, y despu√©s el valor deseado. El objeto Expresion se creara simplemente cogiendo del objeto Root anteriormente definido, el nombre de la columna sobre el que se establecer√° la condici√≥n.\nSi deseamos a√±adir una condici√≥n donde un campo sea como a un texto introducido se llamara a la funci√≥n like(). En caso de que deseemos que el campo tenga un valor superior al introducido se usara greaterThan() y as√≠ sucesivamente.\nSi el campo es de tipo Date, es necesario especificar el tipo de dato del campo como se muestra en el c√≥digo root.get(field), pues de otra manera no sabr√° parsear correctamente la fecha.\nResaltar que el nombre del campo es el definido en nuestra entity que l√≥gicamente no tiene porque ser el de la columna en la base de datos. Por ejemplo, el campo de fecha en la entity del proyecto de ejemplo, esta creada con las siguientes sentencias:\n@Column(name=\"created_date\") @Temporal(TemporalType.DATE) Date created;De tal manera que en la base de datos la columna se llamara created_date pero todas las referencias a la entidad se har√°n a trav√©s del nombre created y es por ello que cuando busquemos el nombre del campo deberemos en Root deberemos buscar el campo created y no el campo created_dateque no lo encontrar√≠a y nos dar√≠a error.\nUna vez tenemos las condiciones de la consulta establecidas no tenemos m√°s que preparar la consulta llamando a la funci√≥n select a la que primero le indicaremos el Root con la entidad a consultar y despu√©s, las condiciones establecidas en el ArrayList de Predicate, el cual deberemos convertir previamente a un simple Array. Esto lo haremos con la sentencia: ‚Äòquery.select(root).where(predicates.toArray(new Predicate[predicates.size()]));\nAhora ejecutaremos la select y recogeremos los resultados en un objeto List con el comando entityManager.createQuery(query).getResultList()\nListo, ya tendremos nuestra Query personalizada funcionado. üôÇ Como siempre no dud√©is en hacer cualquier consulta o mandar feedbacks. ¬°¬° Hasta otra!!\n","description":"","tags":["hibernate","java","jpa","spring boot"],"title":"Querys avanzadas con JPA en Spring Boot","uri":"/2019/02/14/querys-avanzadas-con-jpa-en-spring-boot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: docker","uri":"/es/tags/docker/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: docker","uri":"/es/categories/docker/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: kafka","uri":"/es/tags/kafka/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: kafka","uri":"/es/categories/kafka/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring","content":"Kafka es un programa de mensajer√≠a pensado para comunicaciones as√≠ncronas. B√°sicamente la idea es que los clientes o consumidores se subscriben a un tipo de noticia o topic y cuando un emisor o broker manda un mensaje sobre ese topic Kafka lo distribuye a los consumidores suscritos.\nPara probar este programa deberemos tener un servidor funcionando con los topics ya definidos . En la p√°gina https://kafka.apache.org/quickstart hay un manual r√°pido y muy claro de como levantar uno en apenas 10 minutos.\nHay una extensa documentaci√≥n sobre Kafka en internet, por lo cual no voy a profundizar demasiado en su funcionamiento, ni instalaci√≥n. No obstante, aclarare dos conceptos b√°sicos de Kafka.\nSiempre se trabaja sobre topics. Poniendo un s√≠mil con la prensa escrita, un topic seria el peri√≥dico al que nos hemos subscrito. Solo recibiremos las ediciones (mensajes en Kafka) de ese peri√≥dico. Por supuesto una misma persona (suscriptor) mismo puede estar subscrito a muchos peri√≥dicos.\nLos subscritores siempre forman grupos , aunque en el grupo no haya mas que una sola subscritor.Kafka se encargara que un mensaje solo sea enviado a un subscritor de un grupo.Hay que pensar que Kafka es una tecnolog√≠a enfocada a la nube y lo normal es que un mismo programa (normalmente un microservicio) este ejecut√°ndose en varios servidores, para poder tener tolerancia a fallos. Sin embargo cuando un emisor env√≠a un mensaje de un topic solo queremos que ese mensaje sea procesado por una de las instancias del servicio y no por todas ellas.\nDe esta manera suponiendo que el mensaje implicar√≠a realizar un apunte en una base de datos central, solo se realizar√≠a un √∫nico apunte y no uno por cada una de las instancias. En esta entrada voy a explicar como mandar y recibir mensajes usando Spring Boot a un servidor Kafka. Adem√°s usaremos Docker para realizar ciertas pruebas.\nEl fuente de esta entrada est√°n en https://github.com/chuchip/KafkaTest Empezaremos creando un proyecto Spring Boot, con los siguientes starters.\nWeb kafka El starter Web lo vamos a necesitar para las pruebas que haremos, pero no lo necesitaremos en un caso real.\n1. Configuraci√≥n La configuraci√≥n es muy simple. Solo tendremos que poner en el fichero application.properties, la direcci√≥n del servidor Kafka con el par√°metro spring.kafka.bootstrap-server\nmessage.topic.name=${topicname} message.topic.name2=${topicname2} message.group.name=${groupid} spring.kafka.bootstrap-servers=kafkaserver:9092 spring.kafka.consumer.group-id=myGroupSi tuvi√©ramos varios servidores Kakfa como suele ser el caso en producci√≥n, los indicar√≠amos separ√°ndolos por comas. (server1:9092,server2:9092, server3:9093 ‚Ä¶)\nCon el par√°metro spring.kafka.consumer.group-id podemos definir el grupo al que por defecto pertenecer√°n los listeners pero esto es configurable en cada uno de ellos y no es necesario.\nLos dem√°s par√°metros los usaremos m√°s adelante y son solo para poder realizar pruebas.\n2. Enviando mensajes Los mensajes los enviaremos desde la clase KafkaMessageProducer, la cual pongo a continuaci√≥n.\n@Component public class KafkaMessageProducer { @Autowired private KafkaTemplate\u003cString, String\u003e kafkaTemplate; @Value(value = \"${message.topic.name:profesorp}\") private String topicName;\tpublic void sendMessage(String topic,String message) { if (topic==null || topic.trim().equals(\"\")) topic=topicName; ListenableFuture\u003cSendResult\u003cString, String\u003e\u003e future = kafkaTemplate.send(topic, message); future.addCallback(new ListenableFutureCallback\u003cSendResult\u003cString, String\u003e\u003e() { @Override public void onSuccess(SendResult\u003cString, String\u003e result) { System.out.println(\"Sent message=[\" + message + \"] with offset=[\" + result.getRecordMetadata().offset() + \"]\"); } @Override public void onFailure(Throwable ex) {System.err.println(\"Unable to send message=[\" + message + \"] due to : \" + ex.getMessage()); } }); }\tl }Lo primero ser√° pedir a Spring que nos inyecte un objeto tipo KafkaTemplate .\nEl topic por defecto, sobre el que enviaremos los mensajes lo definimos en la variable topicname que, por defecto, tendr√° el valor de message.topic.name establecida en el fichero properties de Spring Boot\nEn la funci√≥n sendMessage sobre el topic mandado mandaremos el mensaje deseado.\nPara ello crearemos un ListenableFuture a partir de kafkaTemplate. De esta manera la llamada al servidor de Kafka ser√° as√≠ncrona. Para hacerla simplemente usaremos la funci√≥n addCallback de la clase ListenableFuture, pas√°ndole el interface ListenableFutureCallback.\nLa funci√≥n onSuccess ser√° ejecutada si todo va bien y la funci√≥n onFailure en caso de error.\n3. Recibiendo mensajes Los mensajes los recibiremos en la clase KafkaTestListener\n@Component public class KafkaTestListener { @KafkaListener(topics = \"${message.topic.name:profesorp}\", groupId = \"${message.group.name:profegroup}\") public void listenTopic1(String message) { System.out.println(\"Recieved Message of topic1 in listener: \" + message); } @KafkaListener(topics = \"${message.topic.name2:profesorp-group}\", groupId = \"${message.group.name:profegroup}\") public void listenTopic2(String message) { System.out.println(\"Recieved Message of topic2 in listener \"+message); } }En la funci√≥n listenTopic1 con la etiqueta @KafkaListener, definiremos el topics , en plural pues pueden ser varios, que queremos escuchar. En este caso escucharemos los definidos en la variable message.topic.name del fichero properties de Spring Boot. Si esa variable no estuviera definida, tendr√° el valor profesorp. Adem√°s especificamos el grupo al que pertenece el listener. Recordar si no lo definimos coger√° el que hayamos configurado con el parametro spring.kafka.consumer.group-id\nEn la funci√≥n listenTopic2 recibiremos los mensajes del topic message.topic.name2.\nProbando la aplicaci√≥n En la clase KafkaTestControllerhe puesto un controlador REST muy sencillo que escucha en /add/{topic} . Acepta peticiones POST y lo √∫nico que hace es llamar a kafkaMessageProducer.sendMessage mandando un mensaje al servidor Kafka. Este es el c√≥digo.\n@RestController public class KafkaTestController { @Autowired KafkaMessageProducer kafkaMessageProducer; @PostMapping(\"/add/{topic}\") public void addIdCustomer( @PathVariable String topic,@RequestBody String body) { kafkaMessageProducer.sendMessage(topic,body); } }Para hacer las pruebas he creado el fichero jar a trav√©s de maven (maven package) y he creado este peque√±o script al que he llamado javaapp.sh que lo ejecuta:\njava -Dtopicname=$TOPICNAME -Dtopicname2=$TOPICNAME2 -Dgroupid=$GROUPID -jar ./kafkatest.jarComo variables de entorno habremos definido TOPICNAME,TOPICNAME2 y GROUPID.\nexport TOPICNAME=\"mytopic_1\" export TOPICNAME2=\"mytopic_2\" EXPORT GROUPID=\"profe_group\"Recordar que tenemos que tener creados los topics en el servidor de kafka. Eso se puede hacer con el comando\n\u003e bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic mytopic_1 \u003e bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic mytopic_2Para comprobar que est√°n creados los topics podemos ejecutar el comando\nbin/kafka-topics.sh --list --zookeeper localhost:2181Una vez tengamos la aplicaci√≥n corriendo en un terminal, abrimos otro, y ejecutamos la sentencia:\n\u003e curl --request POST localhost:8080/add/mytopic_1 -d \"Mensaje para topic1 \"La cual hace una petici√≥n POST a la URL localhost:8080/add/topic2 . En el cuerpo de esta petici√≥n ira el texto ‚ÄúMensaje para topic profegroup‚Äù\nLa salida que veremos en nuestro programa ser√° la siguiente\nSent message=[Mensaje+para+topic+mytopic_1=] with offset=[13] Recieved Message of mytopic_1 in listener: Mensaje+para+topic1=Con lo cual vemos, como se ha enviado y luego recibido correctamente en el topic1.\nSi ahora ejecutamos la sentencia:\ncurl --request POST localhost:8080/add/mytopic_2 -d \"Mensaje para topic2\"Observaremos la siguiente salida:\nSent message=[Mensaje+para+topic+mytopic_2=] with offset=[32] Recieved Message of topic1 in listener: Mensaje+para+topic+topic2=Dockerizando la aplicaci√≥n Para probar la aplicaci√≥n en un entorno m√°s real vamos a dockerizar nuestra aplicaci√≥n.\nEl fichero DockerFile sera el siguiente:\nFROM openjdk:8-jdk-alpine VOLUME /tmp ENV JAR_FILE kafkatest.jar ENV TOPICNAMER rofesorp ENV TOPICNAME2 profegroup ENV GROUPID profe_group COPY $JAR_FILE /tmp/kafkatest.jar COPY javaapp.sh /tmp/ EXPOSE 8080 ENTRYPOINT \"/tmp/javaapp.sh\"En el directorio donde este el fichero DockerFile deberemos tener tambi√©n javaapp.sh y kafakatest.jar\nCreamos la imagen con el comando:\ndocker build -t kafkatest .Antes de ejecutarlo debemos asegurarnos que nuestro servidor de Kafka este bien configurado.\nUna vez un consumidor llama al servidor, lo primero que hace este servidor es comunicarle al cliente la direcci√≥n donde esta el servidor lider con el que debe comunicarse. Normalmente esto no es problema, pero cuando la red es un poco compleja, como en el caso de Docker o m√°quinas virtuales hay que asegurarse que el nombre del lider que suministra Kafka, es accesible por el consumidor.\nComo Docker crea siempre un interface virtual en la direcci√≥n 172.17.0.1, a√±adiremos esta IP al fichero /etc/hosts, a√±adi√©ndole la l√≠nea\n172.17.0.1 kafkaserverY en el fichero config/server.properties definiremos las siguientes variables:\nlisteners=PLAINTEXT://kafkaserver:9092 advertised.listeners=PLAINTEXT://kafkaserver:9092La primera l√≠nea especifica donde debe escuchar el servidor de Kafka y la segunda el nombre que mandara al consumidor cuando pregunte por el lider con el que debe conectarse.\nReiniciamos el servidor de Kafka, y ejecutamos el contenedor docker con la siguiente sentencia:\ndocker run -i -t --name=kafkatest1 -p 8880:8080 --hostname kafkatest1 -e \"TOPICNAME=my_topic1\" -e \"TOPICNAME2=my_topic2\" -e \"GROUPID=profe_group\" --add-host kafkaserver:172.17.0.1 kafkatestEn otro terminal ejecutamos el mismo comando cambiando el nombre del contenedor y mapeando el puerto 8080 al 8881\ndocker run -i -t --name=kafkatest2 -p 8881:8080 --hostname kafkatest2 -e \"TOPICNAME=my_topic2\" -e \"TOPICNAME2=my_topic2\" -e \"GROUPID=profe_group\" --add-host kafkaserver:172.17.0.1 kafkatestSi en un tercer terminal ejecutamos la sentencia\ncurl --request POST localhost:8880/add/my_topic1 -d \"Mensaje para topic numero 1\"Observaremos que solo uno de los dos programas recibe el mensaje de Kafka pues ambos pertenecen al mismo grupo (profe_group)\nAbriendo un nuevo terminal, volvemos a lanzar una nueva instancia de docker, especificando otro_grupo.\ndocker run -i -t --name=kafkatest3 -p 8881:8080 --hostname kafkatest2 -e \"TOPICNAME=my_topic1\" -e \"TOPICNAME2=my_topic2\" -e \"GROUPID=otro_grupo\" --add-host kafkaserver:172.17.0.1 kafkatestVeremos que la anterior petici√≥n curl hace que los mensajes sean recibidos en dos instancias en docker. En una de las dos, que tiene el grupo profe_group y en la que tiene el grupo otro_grupo\nPor supuesto este programa se puede mejorar mucho, pues no hemos utilizado serializaci√≥n para recibir objetos directamente, ni hemos hablado de las particiones de Kafka, ni del tratamiento de errores, seguridad, etc, pero como una peque√±a introducci√≥n al mundo de Kafka y la mensajer√≠a. Como siempre se agradecer√° cualquier comentario aqu√≠ o en mi cuenta de Twitter @chuchip.\n¬°¬°Hasta la pr√≥xima clase!!\n","description":"","tags":["docker","java","kafka","spring"],"title":"Mensajer√≠a con Kafka y Spring Boot","uri":"/2019/01/24/mensajeria-con-kafka-y-spring-boot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: microservicios","uri":"/es/tags/microservicios/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Cloud","content":"En esta clase hablare de como crear microservicios distribuidos en Spring Boot utilizando las facilidades que nos da el paquete Spring Cloud NetFlix.\nCualquier microservicio debe poder localizar las diferentes instancias de otro servicio del que dependa sin tener sus direcciones definidas en el c√≥digo.\nEn el caso de que un microservicio deba acceder a otro lo ideal seria que de alguna manera pudiera saber en que direcciones esta las instancias de ese otro microservicio funcionando, pues lo m√°s com√∫n es que se levanten diferentes instancias dependiendo de la carga.\nPara ello en Spring se utiliza Eureka Server del paquete Spring Cloud NetFlix. Utilizando este paquete adem√°s de Ribbon y Feign conseguiremos que nuestra aplicaci√≥n sea capaz de encontrar las diferentes instancias de un microservicio y balancear las peticiones de tal manera que se reparta la carga.\nEn este articulo voy a explicar como crear un servicio que al que llamaremos para solicitar la capital de un pa√≠s. Este servicio a su vez llamara a otro servicio para localizar los datos solicitados, pues el solo ser√° un punto de entrada.\nLos programas utilizados ser√°n estos:\nProyecto: capitals-service Puerto:: 8100 Proyecto: countries-service Puerto:: 8000 y 8001 proyecto: eureka-server Puerto: 8761 El proyecto ‚Äòcountries-service‚Äò ser√° el que tenga la base de datos con los datos de los diferentes pa√≠ses. Se lanzaran dos instancias del mismo servicio para que podamos comprobar como ‚Äòcapitals-service‚Äò hace una llamada a una instancia y luego, balanceando la carga.\nEl c√≥digo de ejemplo de este articulo esta en GitHub.\nCreando un servidor Eureka Lo primero que necesitamos es tener un lugar donde todos los microservicios se registren cuando se inicialicen. Ese servicio es el que a su vez se consultara cuando queramos localizar las diferentes instancias. En esta ejemplo vamos a utilizar Eureka Server el cual es muy f√°cil de crear.\nPara ello crearemos un nuevo proyecto Spring Boot con tan solo el Starter Eureka Server.\nEn este proyecto cambiaremos el fichero application.properties para que incluya las siguientes l√≠neas:\nEs decir especificamos el nombre del programa con la l√≠nea spring.application.name . El puerto en el que estar√° escuchando el servicio con server.port. Y lo m√°s importante, pues los anteriores valores son opcionales, los par√°metros del servidor Eureka.\neureka.client.register-with-eureka=false para que el servidor no se intente registrar a si mismo. eureka.client.fetch-registry=false con este par√°metro especificamos a los clientes que no se guarden en su cache local las direcciones de los diferentes instancias. Esto es para que consulte al servidor Eureka cada vez que necesite acceder a un servicio. En producci√≥n a menudo se pone a true para agilizar las peticiones. Comentar que esa cache se actualiza cada 30 segundos por defecto. Ahora en nuestra clase principal, por donde entra Spring Boot deberemos poner las anotaci√≥n EnableEurekaServer:\n@SpringBootApplication @EnableEurekaServer public class NetflixEurekaNamingServerApplication { ‚Äã public static void main(String[] args) { SpringApplication.run(NetflixEurekaNamingServerApplication.class, args); } }¬°Y ya esta listo!. Nuestro servidor Eureka esta creado. Para ver su estado podemos usar nuestro navegador preferido y navegar a: http://localhost:8761/ para ver las aplicaciones que se han registrado. Como se ve en la captura de pantalla todav√≠a no hay ninguna.\nEn la misma pantalla se muestra el estado del servidor. Observar que lo normal es que tengamos varios servidores Eureka levantados. En nuestro ejemplo solo levantaremos uno, aunque eso nos ser√° lo normal en producci√≥n.\n2. Microservicio ‚Äòcountries-service‚Äô Ahora que tenemos nuestro servidor vamos a crear nuestro primer cliente. Para ello crearemos otro proyecto de Spring Boot con los siguientes starters\nEureka Discovery Web Lombok H2 JPA Como he comentado anteriormente, este microservicio es el que va a tener la base de datos y el que ser√° consultado por ‚Äòcapitales-service‚Äô para buscar las capitales de un pa√≠s.\nLo destacable de este proyecto esta en el fichero application.properties de Spring Boot\nComo se puede ver, con el paramero eureka.client.service-url.default-zone especificamos donde esta el servidor Eureka. Spring Boot autom√°ticamente al ver que tiene el paquete Eureka Discovery disponible intentara registrarse en su correspondiente servidor.\nPara poder lanzar con Eclipse la segunda instancia de la aplicaci√≥n paises-service en el puerto 8001, deberemos ir a la opci√≥n Run Configurations en el men√∫ Runy copiar la que Eclipse habra creado de countries-service una vez hayamos ejecutado la aplicaci√≥n por primera vez. En la pesta√±a Arguments deberemos a√±adir el par√°metro --server.port=8001\nEn la siguiente captura de pantalla se puede ver como si lanzamos dos instancias de este programa, una en el puerto 8000 y otra en el puerto 8001, en Eureka Server podemos ver como se han registrado las diferentes instancias. El nombre que se han registrado y por el que el se podr√°n buscar es el nombre de la aplicaci√≥n como se ha declarado en la variable spring.application.name del fichero application.properties\nAs√≠ vemos que la aplicaci√≥n COUNTRIES-SERVICEtiene dos instancias, levantadas ambas en el host port-chuchiuna en el puerto 8000 y otra en el puerto 8001.\nMi ordenador se llama port-chuchi\nEsta sencilla aplicaci√≥n usara H2 para la persistencia de datos teniendo una simple tabla llamada countriescon los datos de los pa√≠ses, a la que accederemos por JPA. La estructura de la tabla esta definida en com.profesorp.countriesservice.entities.Countries.java\nEn la clase CapitalsServiceControllerse definen los siguientes puntos de entrada.\nPetici√≥n GET. /{country} Recibe: C√≥digo de Pais. (‚Äòes‚Äô,‚Äôeu‚Äô,‚Äôen‚Äô‚Ä¶.) Devolver√° un objeto CapitalsBean Petici√≥n GET. /time/{time} Establece el tiempo que la entrada /{country} realizara una pausa antes de devolver el resultado.\n3. Microservicio ‚Äòcapitals-service‚Äô Este servicio es el que llamara al anterior para solicitar todos los datos de un pa√≠s, pero mostrara solo la capital, el puerto del servicio al que realizo la llamada y el nombre del pa√≠s.\nNecesitaremos tener los siguientes starters\nEureka Discovery Feign Lombok Web En primer lugar, como en el anterior servicio, en el fichero application.propertiestendremos el siguiente contenido:\nEs decir, definimos el nombre de la aplicaci√≥n, despu√©s especificamos donde esta el servidor Eureka donde nos debemos registrar y por fin el puerto donde escuchara el programa.\nUtilizando RestTemplate. Para realizar una petici√≥n RESTFUL a countries-service la forma m√°s simple seria usar la clase RestTemplatedel paquete org.springframework.web.client.\n@GetMapping(\"/template/{country}\") public CapitalsBean getCountryUsingRestTemplate(@PathVariable String country) { Map\u003cString, String\u003e uriVariables = new HashMap\u003c\u003e(); uriVariables.put(\"country\", country); ResponseEntity\u003cCapitalsBean\u003e responseEntity = new RestTemplate().getForEntity( \"http://localhost:8000/{country}\", CapitalsBean.class, uriVariables ); CapitalsBean response = responseEntity.getBody(); return response; }Como se ve, simplemente, metemos en un hashmap las variables que vamos a pasar en la petici√≥n, que en este caso es solo el par√°metro pais, para despu√©s realizar crear un objeto ResponseEntity llamando a la funci√≥n est√°ticaRestTemplate.getForEntity() pasando como par√°metros, la URL que deseamos llamar, la clase donde debe dejar la respuesta de la petici√≥n REST y las variables pasadas en la petici√≥n.\nDespu√©s, capturamos el objeto CapitalsBeanque tendremos en el Body del objeto ResponseEntity.\nPero usando este m√©todo tenemos el problema de que debemos tener definido en nuestro programa las URLs donde est√°n las diferentes instancias del microservicio al que llamamos, adem√°s como se ve, tenemos que escribir mucho c√≥digo para hacer una simple llamada.\nPetici√≥n FEIGN simple Una manera m√°s elegante de hacer esa llamada seria utilizando Feign. Feign es una herramienta de Spring que nos permite realizar llamadas usando funciones declarativas.\nPara utilizar Feign debemos incluir la etiqueta @EnableFeignClients en nuestra clase principal. En nuestro ejemplo la ponemos en la clase CapitalsServiceApplication\n@SpringBootApplication @EnableFeignClients(\"com.profesorp.capitalsservice\") public class CapitalsServiceApplication { public static void main(String[] args) { SpringApplication.run(CapitalsServiceApplication.class, args); } }Si no pasamos ning√∫n par√°metro a la etiqueta @EnableFeignClients buscara clientes Feign en nuestro paquete principal, si le ponemos un valor solo buscara clientes en el paquete mandado. As√≠ en el ejemplo solo buscar√≠a en el paquete com.profesorp.capitalsservice\nAhora definimos el cliente Feing con el interface CapitalsServiceProxy\n@FeignClient(name=\"simpleFeign\",url=\"http://localhost:8000/\") public interface CapitalsServiceProxySimple { @GetMapping(\"/{country}\") public CapitalsBean getCountry(@PathVariable(\"country\") String country); }Lo primero es etiquetar la clase con @FeignClient especificando la URL donde esta el servidor REST que queremos llamar. Prestar atenci√≥n al hecho de que ponemos la direcci√≥n base, en este caso solo el nombre del host y su puerto localhost:8000. El par√°metro namedebe ser puesto pero no es importante su contenido.\nDespu√©s definiremos las diferentes entradas que queremos tener disponibles. En nuestro caso solo hay una definida, pero podr√≠amos incluir la llamada a /time/{time} .\n@Autowired private CapitalsServiceProxySimple simpleProxy; @GetMapping(\"/feign/{country}\") public CapitalsBean getCountryUsingFeign(@PathVariable String country) { CapitalsBean response = simpleProxy.getCountry(country); return response; }Usamos el inyector de dependencias de Spring para crear un objeto CapitalsServiceProxySimple y despu√©s simplemente llamamos a la funci√≥n getCountry()del interface.\nMucho m√°s limpio, ¬øverdad?. Suponiendo que nuestro servidor REST tuviera muchos puntos de entrada nos ahorrar√≠amos much√≠simo de teclear, adem√°s de tener un c√≥digo mucho m√°s limpio.\nPero a√∫n tenemos el problema de que la direcci√≥n del servidor RESTFUL esta escrita en nuestro c√≥digo lo cual nos hace imposible poder llegar a las diferentes instancias del mismo servicio y nuestro microservicio no ser√° verdaderamente escalable.\nPetici√≥n FEIGN usando el servidor Eureka Para resolver el problema en vez de poner la direcci√≥n del servidor, pondremos el nombre de la aplicaci√≥n y Spring Boot se encargara de llamar el servidor Eureka, pidi√©ndole la direcci√≥n donde esta ese servicio .\nPara ello crear√≠amos un interface Feign de esta manera\n@FeignClient(name=\"countries-service\") public interface CapitalsServiceProxy { @GetMapping(\"/{country}\") public CapitalsBean getCountry(@PathVariable(\"country\") String country); }Como se puede ver aqu√≠ no especificamos la direcci√≥n del servicio, simplemente ponemos el nombre. En este caso countries-service que es como esta registrada la aplicaci√≥n en el servidor Eureka.\nAhora cada petici√≥n que se haga ira balance√°ndose de una instancia a otra. De tal manera que la primera petici√≥n ira a la del puerto 8000 y la siguiente a la del puerto 8001.\nDe esta manera nuestra aplicaci√≥n ya utilizara todas las instancias del servicio autom√°ticamente.\nConfigurando RIBBON El paquete Feign usa el paquete Ribbon por debajo y realmente es este es el que se encarga de balancear las peticiones. Por defecto Ribbon usara la regla RoundRobinRule. Con esta regla escoger√° secuencialmente cada uno de las instancias que Eureka le muestre levantadas, sin tener en cuenta el tiempo que a cada instancia le cuesta responder.\nSi deseamos que use alguna de las otras tres disponibles por defecto o incluso una regla que nosotros definamos deberemos crear una clase de configuraci√≥n para Ribbon, como la siguiente:\nEn la funci√≥n ribbonRule()devolveremos el objeto WeightedResponseTimeRule si queremos que la l√≥gica de balanceo tenga en cuenta el tiempo de respuesta de cada instancia.\nAhora, para especificar que queremos usar esta clase para configurar Ribbon a√±adiremos la etiqueta\n@RibbonClient(name=\"countries-service\", configuration = RibbonConfiguration.class)en nuestra clase CapitalsServiceApplication\nimport org.springframework.context.annotation.Bean; import com.netflix.loadbalancer.IPing; import com.netflix.loadbalancer.IRule; import com.netflix.loadbalancer.NoOpPing; import com.netflix.loadbalancer.WeightedResponseTimeRule; public class RibbonConfiguration { @Bean public IPing ribbonPing() { return new NoOpPing(); } @Bean public IRule ribbonRule() { return new WeightedResponseTimeRule(); } }Para comprobar como funciona el balanceo por peso, estableceremos una pausa de 10 milisegundos al servidor del puerto 8001 y una de 300 al servidor del puerto 8000, usando la llamada a /time/{time} del servicio countries-service\nSuponiendo que estamos trabajando en Linux, usando Bash haremos 100 peticiones.\nAl cabo de un tiempo podremos ver las peticiones que se han realizado a cada puerto llamando a http://localhost:8100/puertos\nComo se puede ver hay muchas m√°s peticiones al puerto 8001 que al puerto 8000, lo cual es normal teniendo en cuenta que el puerto 8000 tiene un retraso de 300 milisegundos, mientras que el 8001 solo de 10.\nPara terminar este articulo comentar que Ribbon se puede usar sin tener Feign, utilizando directamente RestTemplate pero el estudio de ese caso lo dejare para otra ocasi√≥n.\nMencionar, adem√°s que para realizar pruebas de balanceo he utilizado Docker por lo cual en el c√≥digo fuente de GitHub, veremos que en el fichero application.propertiesdel proyecto countries-service est√°n estas l√≠neas:\nEn vez de las mostradas anteriormente. Esto esta puesto as√≠ para poder definir din√°micamente cuando se lanza el contenedor docker , con la variable de entorno SERVER_PORT el puerto donde debe escuchar cada instancia.\nGracias por leer este articulo y hasta la pr√≥xima lecci√≥n üòâ\n","description":"","tags":["java","microservicios","rest","spring boot"],"title":"Microservicios distribuidos con Eureka","uri":"/2019/01/03/microservicios-distribuidos-con-eureka/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Cloud","content":"En esta ocasi√≥n vamos a usar el paquete Spring Cloud Config para poder tener configuraciones remotas para nuestras aplicaciones.\nLa idea es que nuestro programa o programas puedan ir a buscar sus par√°metros de configuraci√≥n a un lugar externo, de tal manera que nuestra aplicaci√≥n sea f√°cilmente parametrizable e incluso se puedan cambiar sus configuraciones en caliente.\nEsto se utiliza ampliamente en microservicios pues una mismo servicio o aplicaci√≥n puede estar lanzada muchas veces en diferentes contenedores y es interesante tener un lugar central desde donde se puedan aplicar las configuraciones a estos servicios.\nPara ello vamos a crear un servidor de configuraciones y un cliente que buscara su configuraci√≥n en ese servidor.\nEl servidor de configuraciones, usara un repositorio GIT de GitHub donde estar√°n los ficheros de configuraci√≥n.\nLos datos de las aplicaciones ser√°n los siguientes.\n*** Servidor de configuraciones** Proyecto: config-server Puerto: 8888 Nombre Spring : config-server Servidor GIT: https://github.com/chuchip/servercloudconfig.git * Cliente de configuraciones Proyecto: config-client Puerto: 8080 Nombre Spring: config-client Los fuentes de los programas est√°n en: https://github.com/chuchip/servercloudconfig\nServidor de configuraciones La √∫nica dependencia para poder crear un servidor de configuraciones es incluir este paquete en nuestro proyecto maven\nEl starter de Spring seria Config Server\nEl servidor de configuraciones se compone de una sola clase, que detallo a continuaci√≥n:\nComo se ve, lo √∫nico destacable es la anotaci√≥n @EnableConfigServer .\nEn el fichero application.properties pondremos donde debe buscar las configuraciones, con el par√°metro: spring.cloud.config.server.git.uri\nEn este caso le decimos que use un servidor Git que tenemos alojado en GitHub. Tambi√©n podr√≠amos especificar que el use un repositorio GIT local de este modo:\nLos servidores de configuraci√≥n de Spring Cloud soportan los siguientes or√≠genes (backends):\nGIT Vault JDBC , Estos or√≠genes incluso se pueden mezclar, de tal manera que dependiendo del perfil elegido se use uno u otro. Pero esto se escapa al √°mbito de este documento.\nEn el caso del servidor GIT, que es el utilizado en el ejemplo, lo importante es tener un fichero que se llame como el cliente que va a solicitar los datos, terminado en .properties. As√≠ si queremos guardar configuraci√≥n para una aplicaci√≥n cliente que se llame config-client , es decir que en la variable spring.application.namesea igual a config-client, deberemos tener un fichero llamado config-client.propertiesEn este fichero pondremos los valores, de esta manera:\nObs√©rvese que el valor puede ser asignado con : (dos puntos) o = (igual)\nNO usar comillas para delimitar los literales, a no ser que se quiera que nuestro literal (String) incluya esas comillas.\nPara ver los valores pasados a nuestros cliente, realizaremos una petici√≥n GET especificando el nombre del cliente y el perfil. En este caso solicitamos la configuraci√≥n para el cliente config-clienty el perfil defaultque es el perfil utilizado si no especifica ninguno.\nPara ver la configuraci√≥n para el perfil production se llamar√≠a a la URL:http://localhost:8888/config-client/production. Lo cual muestra la siguiente salida:\nComo se puede observar, muestra el contenido del fichero config-client-production.propertiesy despu√©s el contenido del ficheroconfig-client.properties.\nDe esta manera, si un cliente solicita un valor y ese valor existe en el perfil solicitado, se devolver√° ese valor. En caso contrario se buscar√≠a en el perfil default , devolviendo el valor asignado si lo tuviera.\nCliente de configuraciones Una vez tenemos nuestro servidor de configuraciones y levantado, pasaremos a crear el cliente.\nLa √∫nica dependencia en nuestro fichero maven ser√° la siguiente:\nUsando Spring Initializr seria a√±adir la dependencia Config Client . Adem√°s, para poder refrescar la configuraci√≥n en caliente, a√±adiremos el starter Actuator\nAhora deberemos configurar la aplicaci√≥n para especificar donde esta el servidor de configuraciones, para ello, lo primero ser√° cambiar el fichero config.properties por bootstrap.properties. De esta manera Spring Boot sabr√° que debe buscar un servidor de configuraciones\nEn este fichero a√±adiremos la propiedad spring.cloud.config.uriespecificando la URL de nuestro servidor de configuraciones.\nTambi√©n estableceremos la propiedad management.endpoints.web.exposure.include a refreshpara configurar el paquete actuator de tal modo que se pueda acceder a la URL http://localhost:8080/actuator/refreshque ser√° la que obligara a refrescar las diferentes propiedades.\nRecordar que la variable spring.application.nameestablecera el nombre de la aplicaci√≥n e indicara el fichero del repositorio git donde se buscaran los valores de configuraci√≥n.\nCon la variable spring.profiles.activeindicariamos que perfil es el que debemos usar. Si no ponemos ninguno (como es el caso pues esta comentada la l√≠nea), se utilizara el perfil default\nEn este ejemplo uso varios m√©todos para leer la configuraci√≥n.\nCrear un componente que incluye la etiqueta @ConfigurationProperties En este m√©todo, que es el mas sencillo, indicamos cual es la ra√≠z de las propiedades a leer y luego definimos las variables que Spring debe rellenar.\nEn la clase configuration.java especificamos que queremos coger las variables que empiecen por limites.\nDe este modo la variable dato1 tendr√° el valor especificado en limites.dato1\nSi limites.dato1tuviera un valor que no se puede pasar a un entero nuestra aplicaci√≥n fallar√≠a, sin embargo si no encuentra el valor simplemente no lo rellena, sin dar ning√∫n tipo de error.\nEste componente ser√° inyectado a trav√©s de una etiqueta @Autowired\n2. Crear una variable con la anotaci√≥n @Value\nDe esta manera tambi√©n se leer√° el valor del servidor de configuraciones. La mayor diferencia es que ese valor ser√° fijo pues ser√° asignado al ejecutar la aplicaci√≥n y no se refrescara nunca.\nLa variable valorFijotendra el valor asignado en la l√≠nea: valores.valor_fijo\n3. Usar la anotaci√≥n @Value en el par√°metro de una funci√≥n\nIgualmente el valor se leer√° desde el servidor de configuraciones con la ventaja de que el valor podr√° ser refrescado. En nuestro ejemplo se exponen las URL /limites, refrescadoy datos.\nLa llamada a limitesnos devolver√° esta salida:\nSuponiendo que realiz√°ramos un commit de tal manera que los valores en nuestro servidor GIT hayan cambiado, sucesivas llamadas a esta URL nos mostrar√≠an los antiguos datos, pues el cliente solo lee la configuraci√≥n al principio, a no ser que se le obligue a refrescar sus datos.\nImaginemos que cambiamos el fichero `config-client.properties‚Äô de tal manera que ahora tiene estos valores\nHacemos el correspondiente commit y push\nCuando llamemos a la URL http://localhost:8080/actuator/refresh con un m√©todo POST obligaremos a Spring a llamar al servidor de configuraciones y refrescar los valores.\nComo se ve, la salida de esta petici√≥n nos devuelve las variables refrescadas.\nAhora, si llamamos a http://localhost:8080/limites ver√≠amos que el valor de minResultados y maxResultados han cambiado. Sin embargo ni valorFijo ni valorFuncion no lo han hecho.\nSi llamamos a la URL http://localhost:8080/refrescado veremos que la variable valorFuncion se ha actualizado pues en la llamada esta puesta la etiqueta @Value de tal manera que la variable es le√≠da en ese momento. Sin embargo la variable valorFijo no es cambiada pues se estableci√≥ al inicio del programa y su valor permanece inalterado.\nEs importante destacar que si quitamos una variable en nuestro fichero de configuraci√≥n, el valor de la variable no se pondr√° a null sino que mantendr√° el valor anteriormente establecido. Esto es valido tanto si la variable es le√≠da con @Value como si utilizamos un @ConfigurationProperties en un @Bean\nY eso es todo por ahora, en pr√≥ximas lecciones explicare como hacer que las configuraciones se refresquen automagicamenteutilizando el componente Spring Bus Cloud\n","description":"","tags":["cloud","java","spring boot"],"title":"Servidor configuraciones usando Spring Cloud","uri":"/2018/12/10/servidor-configuraciones-usando-spring-cloud/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: html","uri":"/es/tags/html/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: html","uri":"/es/categories/html/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: hugo","uri":"/es/tags/hugo/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: web","uri":"/es/tags/web/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: hugo","uri":"/es/categories/hugo/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Restful","content":"En esta articulo os voy a explicar como devolver errores HTTP personalizados. Para ello crearemos un proyecto llamado httpErrorPersonalizado. Teneis el c√≥digo fuente de este proyecto en mi p√°gina de¬†GitHub\nCuando realizamos una petici√≥n HTTP a un recurso en Spring Boot, es com√∫n que esa petici√≥n tenga que considerar la opci√≥n de devolver un error.\nEs el caso t√≠pico de que realizamos una petici√≥n RESTful para solicitar un registro, pero ese registro no existe. En este caso lo normal es devolver un c√≥digo HTTP tipo 404 (Not Found) lo cual se hace lanzando una excepci√≥n que hayamos anotado con la etiqueta @ResponseStatus(HttpStatus.NOT_FOUND) lo que ocurre es que el objeto JSON que acompa√±a a esa respuesta 404 en Spring Boot ser√° con un formato definido de este tipo:\n{ \"timestamp\": \"2018-11-20T11:46:10.255+0000\", \"status\": 404, \"error\": \"Not Found\", \"message\": \"bean: 8 not Found\", \"path\": \"/get/8\" } Si nosotros queremos que la salida sea algo as√≠ como esto:\n{ \"timestamp\": \"2018-11-20T12:51:42.699+0000\", \"mensaje\": \"bean: 8 not Found\", \"detalles\": \"uri=/get/8\", \"httpCodeMessage\": \"Not Found\" } tendremos que poner una serie de clases a nuestro proyecto. Aqu√≠ os explico como üòâ\nEl c√≥digo fuente lo ten√©is en mi repositorio de GitHub\nPartiendo de una proyecto basico de Spring Boot, donde tenemos una simple objeto llamado MiBean con solo dos campos: codigo y valor que es el que devolveremos en las peticiones rest al recurso ‚Äú/get‚Äú, de tal manera que una petici√≥n a: http://localhost:8080/get/1 nos devolvera un objeto JSON como este:\n{ \"codigo\": 1, \"valor\": \"valor uno\" } Si intentamos acceder a un elemento superior al 3 nos devolver√° un error pues solo 3 registros disponibles.\nAqu√≠ pong la clase ErrorResource que procesa las peticiones al recurso ‚Äú/get‚Äú\npublic class ErrorResource { @Autowired MiBeanService service; @GetMapping(\"/get/{id}\") public MiBean getBean(@PathVariable int id) { MiBean bean = null; try { bean = service.getBean(id); } catch (NoSuchElementException k) { throw new BeanNotFoundException(\"bean: \"+id+ \" not Found\" ); } return bean; } }Como se ve en getBean() se llama a la funci√≥n getBean(int id) de la clase MiBeanService, la cual pego a continuaci√≥n\n@Component public class MiBeanService { private static List\u003cMiBean\u003e miBeans = new ArrayList\u003c\u003e(); static { miBeans.add(new MiBean(1, \"valor uno\")); miBeans.add(new MiBean(2, \"valor dos\")); miBeans.add(new MiBean(3, \"valor tres\")); } public MiBean getBean(int id) { MiBean miBean = miBeans.stream() .filter(t -\u003e t.getCodigo()==id) .findFirst() .get(); return miBean; } } Observe que la funci√≥n getBean(int id) lanzara una excepci√≥n tipo NoSuchElementException si no encuentra el c√≥digo en la List miBeans . Esta excepci√≥n ser√° capturada en el controlador el cual lanzara una excepci√≥n tipo BeanNotFoundException\nLa clase BeanNotFoundException es la siguiente:\n@ResponseStatus(HttpStatus.NOT_FOUND) public class BeanNotFoundException extends RuntimeException { public BeanNotFoundException(String message) { super(message); } } Una simple clase que extiende RuntimeException y que esta anotada con al etiqueta @ResponseStatus(HttpStatus.NOT_FOUND)con lo cual al ser lanzada devolvera un c√≥digo HTTP 404 (Not Found).\nSi dej√°ramos as√≠ el proyecto al pedir un c√≥digo superior a 3, seria esta:\npero como hemos dicho queremos que el mensaje de error sea personalizado.\nPara ello vamos a crear una nueva clase donde definiremos los campos de nuestro mensaje de error. Esta clase el proyecto es ExceptionResponse la cual es un simple pojo como se puede ver en el c√≥digo que adjunto:\npublic class ExceptionResponse { private Date timestamp; private String mensaje; private String detalles; private String httpCodeMessage; public ExceptionResponse(Date timestamp, String message, String details,String httpCodeMessage) { super(); this.timestamp = timestamp; this.mensaje = message; this.detalles = details; this.httpCodeMessage=httpCodeMessage; } public String getHttpCodeMessage() { return httpCodeMessage; } public Date getTimestamp() { return timestamp; } public String getMensaje() { return mensaje; } public String getDetalles() { return detalles; } } Ahora se definir√° la clase que indicara a Spring que objeto JSON debe devolver en caso de que se produzca lance una excepci√≥n del tipo BeanNotFoundException . Esa clase es: CustomizedResponseEntityExceptionHandler la cual adjunto a continuaci√≥n:\n//@ControllerAdvice // @RestController @RestControllerAdvice public class CustomizedResponseEntityExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler(BeanNotFoundException.class) public final ResponseEntity\u003cExceptionResponse\u003e handleNotFoundException(BeanNotFoundException ex, WebRequest request) { ExceptionResponse exceptionResponse = new ExceptionResponse(new Date(), ex.getMessage(), request.getDescription(false),HttpStatus.NOT_ACCEPTABLE.getReasonPhrase()); return new ResponseEntity\u003cExceptionResponse\u003e(exceptionResponse, HttpStatus.NOT_ACCEPTABLE); } } Esta clase debe heredar de ResponseEntityExceptionHandler la cual ya tratara las excepciones m√°s comunes.\nLa deberemos anotarla con las etiquetas @ControllerAdvice y @RestControllero como me sugiri√≥ Marcelo Martins¬†en DZone sustistuir esas dos por la etiqueta: @RestControllerAdvice\n@ControllerAdvice es una etiqueta derivada de @Component que se usara para clases que traten excepciones. Al tener la clase la etiqueta @RestContoller tratara las excepciones lanzadas en los controladores de peticiones REST.\nY crearemos la funci√≥n donde especificar el objeto a utilizar cuando se produzca un tipo de excepci√≥n.\nAs√≠, en el ejemplo, hemos definido que cuando se se lance la excepci√≥n BeanNotFoundException ser√° devuelto un objeto ExceptionResponse. Esto se hace creando un objeto ResponseEntityconvenientemente iniciado.\nEs importante observar que tambi√©n definimos el c√≥digo HTTP devuelto. En este caso devolveremos el c√≥digo 406, en vez del 404. De hecho en nuestro ejemplo podr√≠amos quitar la etiqueta @ResponseStatus(HttpStatus.NOT_FOUND)a la clase BeanNotFoundException y todo seguir√≠a funcionando igual.\nY as√≠ tendremos una salida personalizada como se ve en la siguiente imagen:\nY esto es todo por hoy. ¬°¬° Nos vemos en la pr√≥xima clase !!\n","description":"","tags":["java","rest","spring boot"],"title":"Personalizar salidas de c√≥digos HTTP en Spring Boot","uri":"/2018/11/20/personalizar-codigo-http-en-spring-boot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: bootstrap","uri":"/es/tags/bootstrap/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: bootstrap","uri":"/es/categories/bootstrap/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: tomcat","uri":"/es/tags/tomcat/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: tomcat","uri":"/es/categories/tomcat/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: webflow","uri":"/es/tags/webflow/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: webflow","uri":"/es/categories/webflow/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: jdbc","uri":"/es/tags/jdbc/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: jdbc","uri":"/es/categories/jdbc/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: jquery","uri":"/es/tags/jquery/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: jquery","uri":"/es/categories/jquery/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: jsp","uri":"/es/categories/jsp/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: jstl","uri":"/es/tags/jstl/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: jstl","uri":"/es/categories/jstl/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: l","uri":"/es/tags/l/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: security","uri":"/es/tags/security/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: security","uri":"/es/categories/security/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Seguridad","content":"En esta entrada explicare como podemos dotar de seguridad a servicios REST en Spring Boot. La aplicaci√≥n de ejemplo es la misma que la entrada de seguridad WEB anterior, as√≠ que el c√≥digo fuente lo ten√©is en: https://github.com/chuchip/OAuthServer.\nExplicando la tecnologia Oauth2 Como he dicho, utilizaremos el protocolo OAuth2, as√≠ que lo primero sera explicar como funciona este protocolo.\nOAuth2 tiene algunas variantes pero yo os voy a explicar la que utilizare en el programa y,¬†para ello, voy a poneros un ejemplo para que entend√°is lo que pretendemos hacer.\nVoy a poner una escena cotidiana: El pago con una tarjeta de cr√©dito en un comercio.En este caso hay tres interlocutores: La tienda, el banco y nosotros. En el protocolo Oauth2 pasa algo parecido. Estos son los pasos:\nEl cliente , o sea, el comprador, solicita al banco una tarjeta de cr√©dito, para que el banco nos la de,¬†comprobara quienes somos, y nos otorga un cr√©dito dependiendo de la pasta que tengamos en la cuenta o bien nos dice que no le hagamos perder el tiempo ;-). En el protocolo OAuth2 al que otorga las tarjetas se le llama Servidor de Autentificaci√≥n. Si el banco nos ha dado la tarjeta, podremos ir a la tienda, es decir al servidor web, y le presentamos la tarjeta de cr√©dito. La tienda no nos conoce de nada, pero puede preguntar al banco, a trav√©s del lector de tarjetas si puede confiar en nosotros y hasta que punto (el saldo de cr√©dito). La tienda seria el Servidor de Recursos. La tienda¬†dependiendo del dinero que le diga el banco que tenemos nos permitir√° comprar unos productos u otros. En la analog√≠a OAuth2, el servidor web nos permitir√° acceder a unas paginas u a otras dependiendo de si¬†somos muy ricos, ricos, medios¬†o pobres. Como comentario, decir, por si no os hab√©is dado cuenta, que se utilizan servidores de autentificaci√≥n habitualmente. Cuando vais a una pagina web y os pide registraros, pero como opci√≥n os deja hacerlo a trav√©s de Facebook o Google, est√°is utilizando esta tecnolog√≠a. Google o Facebook se convierte en el ‚Äòbanco‚Äô que emite esa ‚Äòtarjeta‚Äô, la pagina web que os pide registraros, la usara para comprobar que ten√©is ‚Äòcredito‚Äô y dejaros entrar. Espero que se entienda el ejemplo ;-).\nAqu√≠ pod√©is ver la pagina web de el peri√≥dico ‚ÄúEl Pais‚Äô, creando una cuenta. Si utilizamos Google o Facebook, el peri√≥dico (la tienda) confiara en lo que les digan esos proveedores de autentificaciones. En este caso lo √∫nico que necesita la pagina web es que teng√°is una tarjeta de cr√©dito, sin importar el saldo üòâ\nCreando un Servidor de Autorizaciones (AuthServer) ¬ø Entendido ?. OK, pues vamos a ver como crear un banco, la tienda y toda la parafernalia üòâ\nLo primero, en nuestro proyecto,¬†necesitamos tener las dependencias adecuadas, necesitaremos los inicializadores (starters en ingles) : Cloud OAuth2, Security y Web\nBien, empecemos por definir el banco, esto lo hacemos en la clase: AuthorizacionServerConfiguration\n@Configuration @EnableAuthorizationServer public class AuthorizacionServerConfiguration extends AuthorizationServerConfigurerAdapter { @Autowired @Qualifier(\"authenticationManagerBean\") private AuthenticationManager authenticationManager; @Autowired private TokenStore tokenStore; @Override public void configure(ClientDetailsServiceConfigurer clients) throws Exception { clients.inMemory() .withClient(\"cliente\") .authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\", \"implicit\") .authorities(\"ROLE_CLIENT\", \"ROLE_TRUSTED_CLIENT\",\"USER\") .scopes(\"read\",\"write\") .autoApprove(true)\t.secret(passwordEncoder().encode(\"password\")); } @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Override public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception { endpoints .authenticationManager(authenticationManager)\t.tokenStore(tokenStore); } @Bean public TokenStore tokenStore() { return new InMemoryTokenStore(); }\t}Empezamos la clase anotandola como de configuraci√≥n con la etiqueta @Configuration y despu√©s usamos la etiqueta @EnableAuthorizationServer para decirle a Spring que active el servidor de autorizaciones. Para definir las propiedades del servidor especificamos que nuestra clase extiende de AuthorizationServerConfigurerAdapter , la cual implementa el interface AuthorizationServerConfigurerAdapter, por lo cual, Spring usara esta clase para parametrizar el servidor.\nDefinimos un bean tipo **AuthenticationManager¬†** que Spring provee automagicamente y que nosotros recogeremos con la etiqueta @Autowired.¬†Tambi√©n definimos un objeto¬†TokenStore, pero para poder injectarlo debemos definirlo, lo cual hacemos en la funci√≥n public TokenStore tokenStore().\nEl **AuthenticationManager¬†**¬†o Controladores de Autentificaciones, como he dicho lo provee Spring pero tenderemos que configurarlo nosotros. M√°s tarde explicare como se hace. El TokenStore o Almac√©n de Identificadores es¬†donde se guardaran los identificadores que nuestro servidor de autentificaciones vaya suministrando, para que cuando el servidor de recursos (la tienda) le pregunte el cr√©dito sobre una tarjeta de cr√©dito este pueda responderle. En este caso usamos la clase InMemoryTokenStore que guardara los identificadores en memoria. En una aplicaci√≥n real podr√≠amos usar un JdbcTokenStore para guardarlos en una base de datos, para que si se cae la aplicaci√≥n los clientes no tengan que renovar sus tarjetas de credito üòâ\nEn la funci√≥n configure(ClientDetailsServiceConfigurer clients) especificamos las credenciales del banco, digo del administrador de autentificaciones. ademas de los servicios que ofrece. S√≠, hablando en plural, porque para poder acceder al banco debemos tener un usuario y contrase√±a para cada uno de los servicios que ofrece. Esto es¬†un concepto muy importante: El usuario y contrase√±a es del banco no del cliente, para cada servicio que ofrezca el banco habr√° una √∫nica autentificaci√≥n, si bien podr√° ser la misma para diferentes servicios.\nDetallare las lineas:\nclients.inMemory()¬†Especifica que vamos a guardar los servicios en memoria. En una aplicaci√≥n ‚Äòreal‚Äô lo guardar√≠amos en una base de datos, un servidor LDAP, etc. withClient(‚Äúcliente‚Äù) Es el usuario con el que nos identificaremos en el banco. En este caso se llamara ‚Äòcliente‚Äô. ¬ø Igual habria sido mejor llamarle ‚Äòuser‚Äô üòâ ? authorizedGrantTypes(‚Äúpassword‚Äù, ‚Äúauthorization_code‚Äù, ‚Äúrefresh_token‚Äù, ‚Äúimplicit‚Äù). Especificamos los servicios que estamos configurando para el usuario definido , para ‚Äòcliente‚Äò. En nuestro ejemplo solo usaremos el servicio password. authorities(‚ÄúROLE_CLIENT‚Äù, ‚ÄúROLE_TRUSTED_CLIENT‚Äù,‚ÄùUSER‚Äù). Especifica roles o grupos que tiene el servicio ofrecido. Tampoco lo usaremos en nuestro ejemplo asi que dejemoslo correr de momento. scopes(‚Äúread‚Äù,‚Äùwrite‚Äù). El ambito del servicio. Tampoco lo usaremos en nuestra aplicaci√≥n. autoApprove(true). Si debe aprobar automaticamente las peticiones del cliente. Pondremos que si para hacer m√°s sencilla la aplicaci√≥n. secret(passwordEncoder().encode(‚Äúpassword‚Äù)). Contrase√±a del cliente. Observar que se llama la funci√≥n encode que tenemos definida un poco m√°s abajo, para especificar con que tipo de encriptaci√≥n se guardara la contrase√±a. La funci√≥n encode, esta anotada con la etiqueta @Bean porque spring, cuando le suministremos la contrase√±a en una petici√≥n HTTP, buscara un objeto PasswordEncoder para comprobar la validez de la contrase√±a entregada. Y por √∫ltimo tenemos la funci√≥n configure(AuthorizationServerEndpointsConfigurer endpoints) donde definimos que controlador de autentificaciones y que almac√©n de identificadores deben usar los puntos de salida. Aclarar que los puntos de salida¬†son las URLs por donde ‚Äòhablaremos con nuestro banco‚Äô, para solicitar las tarjetas de cerdito üòâ\nDe acuerdo, ya tenemos nuestro servidor de autentificaciones creado pero aun nos falta la manera de que este sepa quienes somos y nos ponga en diferentes grupos, seg√∫n las credenciales introducidas. Bien, para hacer esto usaremos la misma clase que en utilizamos para proteger una pagina web. Si hab√©is le√≠do el articulo anterior: http://www.profesor-p.com/2018/10/17/seguridad-web-en-spring-boot/¬†recordareis que cre√°bamos una clase que heredaba de WebSecurityConfigurerAdapter , donde sobrescribiamos la funci√≥n UserDetailsService userDetailsService().\npublic class WebSecurityConfiguration extends WebSecurityConfigurerAdapter { .... @Bean @Override public UserDetailsService userDetailsService() { UserDetails user=User.builder().username(\"user\").password(passwordEncoder().encode(\"secret\")). roles(\"USER\").build(); UserDetails userAdmin=User.builder().username(\"admin\").password(passwordEncoder().encode(\"secret\")). roles(\"ADMIN\").build(); return new InMemoryUserDetailsManager(user,userAdmin); } .... }Pues los usuarios con sus roles o grupos se definen de la misma manera. Deberemos tener una clase que extienda **WebSecurityConfigurerAdapter¬†** y definir nuestros usuarios.\nAhora y podemos comprobar si nuestro servidor de autorizaciones funciona. Vamos¬†a ver como, utilizando el excelente programa PostMan.\nPara hablar con el ‚Äòbanco‚Äô para solicitar nuestras credenciales, y como no hemos definido lo contrario, deberemos ir a la URI ‚Äú/oauth/token‚Äù. Este es uno de los puntos finales de los que hablaba anteriormente. Hay m√°s pero en nuestro ejemplo y como solo vamos a usar el servicio ‚Äòpassword‚Äô no usaremos m√°s.\nUsaremos una petici√≥n HTTP tipo POST, indicando que queremos usar validaci√≥n b√°sica, pondremos el usuario y contrase√±a, que ser√°n los del ‚Äúbanco‚Äù, en nuestro ejemplo: ‚Äòcliente‚Äô y ‚Äòpassword‚Äô respectivamente.\nEn el cuerpo de la petici√≥n, en formato form-url-encoded introduciremos el servicio a solicitar, nuestro usuario y nuestra contrase√±a.\ny lanzamos la petici√≥n, la cual nos deber√° sacar una salida como esta:\nEse ‚Äòaccess_token‚Äô ‚Äú8279b6f2-013d-464a-b7da-33fe37ca9afb‚Äù es nuestra tarjeta de cr√©dito y es la que deberemos presentar a nuestro servidor de recursos (la tienda) para poder ver paginas (recursos) que no sean p√∫blicos.\nCreando un Servidor de Recursos (ResourceServer) Ahora que ya tenemos nuestra tarjeta de cr√©dito vamos a crear la tienda que acepte esa tarjeta üòâ\nEn nuestro ejemplo vamos a crear el servidor de recursos y de autentificaci√≥n en el mismo programa, con lo cual Spring Boot, se encargara de hacer que confi√© una parte en otra, sin tener que configurar nada. Si, como es habitual en la vida real, el servidor de recursos esta en un sitio¬†y el servidor de autentificaciones en otro, deber√≠amos indicarle al servidor de recursos, cual es nuestro ‚Äòbanco‚Äô y como debe hablar con el. Pero eso lo dejaremos para otra entrada.\nLa √∫nica clase del servidor de recursos es ResourceServerConfiguration\n@EnableResourceServer @RestController public class ResourceServerConfiguration extends ResourceServerConfigurerAdapter { ..... }Observar la anotaci√≥n¬†@EnableResourceServer que hara que Spring active el servidor de recursos.¬†La etiqueta @RestController es porque en esta misma clase nosotros tendremos los recursos, pero podr√≠an estar perfectamente en otra clase.\nPor ultimo fijaros que la clase extiende de ResourceServerConfigurerAdapter esto es as√≠ porque vamos a sobrescribir metodos de esa clase para configurar nuestro servidor de recursos.\nComo he dicho antes al estar el servidor de autentificaci√≥n y de recursos en el mismo programa no tenemos mas que configurar la seguridad de nuestro servidor de recursos. Esto se hace en la funci√≥n:\n@Override public void configure(HttpSecurity http) throws Exception { http .authorizeRequests().antMatchers(\"/oauth/token\", \"/oauth/authorize**\", \"/publica\").permitAll(); //\t.anyRequest().authenticated(); http.requestMatchers().antMatchers(\"/privada\") // Denegamos el acceso a \"/privada\" .and().authorizeRequests() .antMatchers(\"/privada\").access(\"hasRole('USER')\") .and().requestMatchers().antMatchers(\"/admin\") // Denegamos el acceso a \"/admin\" .and().authorizeRequests() .antMatchers(\"/admin\").access(\"hasRole('ADMIN')\"); }En la entrada anterior cuando defin√≠amos la seguridad en la web, explicaba una funci√≥n llamada configure(HttpSecurity http), ¬ø a que se parece mucho a esta ?. Pues si b√°sicamente es la misma, y de hecho recibe un objeto HttpSecurity que debemos configurar.\nExplico linea a linea las sentencias:\nhttp.authorizeRequests().antMatchers(\"/oauth/token\", ‚Äú/oauth/authorize‚Äù, ‚Äú/publica‚Äù).permitAll() Permitimos todas las peticiones a¬†‚Äú/oauth/token‚Äù, ‚Äú/oauth/authorize**‚Äù, ‚Äú/publica‚Äù sin ning√∫n tipo de validaci√≥n. anyRequest().authenticated() Esta linea esta comentada, si no lo estuviera todos los recursos serian accesibles solo si se el usuario ha sido validado. requestMatchers().antMatchers(\"/privada\") Denegamos el acceso a la url ‚Äú/privada‚Äù authorizeRequests().antMatchers(\"/privada\").access(‚ÄúhasRole(‚ÄòUSER‚Äô)‚Äù) Permitimos el acceso a ‚Äú/privada‚Äù si el usuario validado tiene el role ‚ÄòUSER‚Äô requestMatchers().antMatchers(\"/admin\") Denegamos el acceso a la url ‚Äú/admin‚Äù authorizeRequests().antMatchers(\"/admin\").access(‚ÄúhasRole(‚ÄòADMIN‚Äô)‚Äù) Permitimos el acceso a ‚Äú/admin‚Äù si el usuario validado tiene el role ‚ÄòADMIN‚Äô Una vez que tenemos nuestra servidor de recursos creado solo debemos crear los servicios lo cual se hace con estas lineas:\n@RequestMapping(\"/publica\") public String publico() { return \"Pagina Publica\"; } @RequestMapping(\"/privada\") public String privada() { return \"Pagina Privada\"; } @RequestMapping(\"/admin\") public String admin() { return \"Pagina Administrador\"; }Como veis son 3 funciones basicas que solo devuelven sus correspondientes Strings.\nVeamos ahora como funciona la validaci√≥n.\nPrimero comprobamos que podemos acceder a ‚Äú/publica‚Äù sin ning√∫n tipo de validaci√≥n:\nCorrecto. ¬°¬° Esto funciona!!\nSi intento acceder a la pagina ‚Äú/privada‚Äù recibo un error ‚Äú401 unauthorized‚Äù, lo cual nos indica que no tenemos permiso para ver esa pagina, as√≠ que vamos a usar¬†el token emitido por nuestro servidor de autorizaciones, para el usuario ‚Äòuser‚Äô, a ver que pasa üòâ\nAnda, si podemos ver nuestra pagina privada. Probemos con la pagina del administrador‚Ä¶\nCorrecto, no podemos verla. Asi que vamos a solicitar un nuevo token al administrador de credenciales, pero identificandonos con el usuario ‚Äòadmin‚Äô.\nEl token devuelto es: ‚Äù ‚Äúab205ca7-bb54-4d84-a24d-cad4b7aeab57‚Äù. Lo usamos a ver que pasa:\nBueno, pues ya esta, ya podemos ir de compras con seguridad!!. Ahora ya solo falta montar la tienda y tener los productos üòâ\nNos vemos en la pr√≥xima, estudiantes üôÇ\n","description":"","tags":["java","oauth2","rest","seguridad","spring boot"],"title":"Securizando servicios REST con Oauth2 en SpringBoot","uri":"/2018/10/18/securizando-servicios-rest-con-oauth2-en-springboot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Seguridad","content":"En esta entrada voy a explicar¬†como gestiona Spring la seguridad. No todo, por supuesto, que el tema de la seguridad dar√≠a para un libro muy gordote, pero al menos aprender a securizar una pagina web. En una pr√≥xima entrada hablare de como securizar un servicio REST.\nComo siempre, comienzo diciendo que el c√≥digo fuente de lo que explico lo ten√©is en mi pagina de GITHUB, en https://github.com/chuchip/OAuthServer. El programa esta realizado en Java, usando Spring Boot.\nBien, empecemos por como securizar una pagina web en Spring.\nRealmente usando Spring Boot, es muy sencillo, pues haremos uso de lo que Spring denomina starters, que no son sino grupos de paquetes los cuales agrupan ciertas¬†funcionalidades. As√≠ en este caso, incluiremos el paquete Web, Thymeleaf y, por supuesto, Security.\nAqu√≠ ten√©is un pantallazo de Eclipse seleccionando los paquetes necesarios.\nDe todos modos,¬†ya sab√©is que en el fichero pom.xml pod√©is ver las dependencias m√°s detalladamente.\nThymeleaf, por si alguien no lo sabe, es un software que se integra perfectamente con Spring y que permite realizar plantillas de p√°ginas WEB.¬†Como JSP, pero muy mejorado o si lo prefer√≠s un JavaServer Faces si conoc√©is m√°s el mundo JavaEE. El caso es que permite realizar paginas HTML que se integran perfectamente con nuestras clases desarrolladas con Spring.\nComo queremos poder ver en nuestra p√°gina web el nombre del usuario con el que nos hemos registrado, debemos usar la librer√≠a de seguridad de Thymeleaf para Spring. Para ello incluiremos las siguientes lineas en nuestro fichero pom.xml de Maven.\nY aqu√≠ pod√©is ver como quedara la estructura de nuestro programa\nAhora empecemos a declarar nuestra primera clase, a la que he llamado WebSecurityConfiguration.java\n@SpringBootApplication @EnableWebSecurity public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter { public static void main(String[] args) { SpringApplication.run(WebSecurityConfiguration.class, args); } @Bean @Override public AuthenticationManager authenticationManagerBean() throws Exception { return super.authenticationManagerBean(); } @Bean @Override public \u003ca href=\"#UserDetailsService\"\u003eUserDetailsService\u003c/a\u003e userDetailsService() { UserDetails user=User.builder().username(\"user\") .password(passwordEncoder().encode(\"secret\")) .roles(\"USER\").build(); UserDetails userAdmin = User.builder().username(\"admin\") .password(passwordEncoder().encode(\"secret\")) .roles(\"ADMIN\").build(); return new InMemoryUserDetailsManager(user,userAdmin); } @Bean public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Override protected void configure(HttpSecurity http) throws Exception { http .csrf().disable() .authorizeRequests() .antMatchers(\"/\",\"/index\",\"/webpublico\").permitAll() .antMatchers(\"/webprivado\").authenticated() .antMatchers(\"/webadmin\").hasRole(\"ADMIN\").and() .formLogin() .loginPage(\"/login\") .permitAll() .and() .logout() // Metodo get pues he desabilitado CSRF .permitAll(); } }Lo primero es poner las etiquetas @SpringBootApplication y @EnableWebSecurity. La primera etiqueta es obvia, ya que nuestra aplicaci√≥n queremos que funcione con Spring Boot ;-). Vamos, que o la pon√©is o no seria una aplicaci√≥n Spring Boot y ya nos podemos ir a casa :-D. La segunda es para especificar que queremos que se active la seguridad Web, realmente esta etiqueta no es obligatorio ponerla porque Spring Boot que es muy listo, en cuanto ve que tenemos el paquete **security¬†**(en el pom.xml, recordad) en nuestro proyecto la incluye, pero no es mala cosa ponerla por claridad, aunque sea redundante.\nAhora especificamos que nuestra clase va a heredar de WebSecurityConfigurerAdapter pues vamos a sobrescribir algunas de las funciones de esa clase. Para que lo entend√°is, b√°sicamente Spring mira a ver si hay alguna clase que implemente el interface WebSecurityConfigurer, el cual implementa la clase WebSecurityConfigurerAdapter , y si lo hay pues utiliza las funciones que tiene ese interface para configurar la seguridad de la aplicaci√≥n.\nSi no tuvi√©ramos una clase que implementara ese interface, Spring simplemente no dejar√≠a acceder a ninguna pagina de nuestra aplicaci√≥n, lo que, como comprender√©is no es muy pr√°ctico üòâ\nBien, ahora sobrescribimos la funci√≥n authenticationManagerBean que devolver√° la clase encargada de manejar las autentificaciones (como su propio nombre indica üòâ ). Vale, os estar√©is preguntando, ¬ø pero si solo llama a la funci√≥n padre para que la definimos?. Muy simple porque le ponemos la etiqueta @Bean, para que Spring sepa de donde sacar (inyectar) un objeto tipo **AuthenticationManager¬†**pues lo necesita para controlar la seguridad.\nEn la funci√≥n userDetailsService definimos los usuarios que van a tener acceso a nuestra web. En este caso creamos dos usuarios: user y admin (s√≠ lo se, no es que me haya currado mucho el tema de los nombres üòâ ). Cada uno de ellos con su contrase√±a y su ROL. Aclarar que el ROL es un literal libre, es decir que ah√≠ podemos poner lo que queramos, por ejemplo USUARIO_CON_PECAS. El caso es que luego ese ROL lo utilizaremos y debe coincidir letra a letra con el establecido.\nObservar tambi√©n que la contrase√±a se la damos encriptada, en este caso con el algoritmo BCrypt. Esto lo hacemos llamando a la funci√≥n passwordEncoder, la cual esta anotada con la etiqueta @Bean para que Spring la use.\nEs decir, Spring necesita saber que sistema de encriptaci√≥n estamos usando para guardar nuestras contrase√±as, y para ello busca un objeto que implemente el interface PasswordEncoder. Si no lo encuentra nos fallara la aplicaci√≥n.\nAclarar que estamos usando la forma m√°s sencilla de declarar los usuarios, guard√°ndolos en memoria con la clase¬†**InMemoryUserDetailsManager.¬†**En un programa de verdad, se usar√≠a¬†**JdbcUserDetailsManager¬†**que nos permitir√≠a guardarlos en una base de datos o cualquier otra clase que implemente el interface¬†**UserDetailsManager¬†**como podr√≠a ser¬†**LdapUserDetailsManager¬†**si quisi√©ramos usar un servicio LDAP.\nY ya solo nos falta definir que partes de nuestra aplicaci√≥n vamos a proteger y que roles deben de tener permisos para acceder a cada parte de ella. S√≠, he escrito roles y no usuarios porque como hemos dicho antes, al definir un usuario, lo debemos asignar a un rol¬†(o grupo que es m√°s espa√±ol, si lo prefer√≠s). Y, normalmente, las reglas de filtrado se aplican por el grupo al que pertenece el usuario. Para definir los permisos de cada recurso lo haremos configurando el objeto¬†HttpSecurity recibido en la funci√≥n protected void configure(HttpSecurity http)\nVoy explicando linea a linea lo que se hace en esta funci√≥n:\ncsrf().disable() Deshabilita el control de csrf. CRSF son las siglas de¬†**Cross-site request forgery¬†** como explica la Wikipedia\nEl deshabilitar el CRSF tiene como efecto secundario que se pueda realizar un logout de una sesi√≥n con una petici√≥n HTTP tipo GET, pues por defecto solo se puede hacer con una petici√≥n POST.\n.authorizeRequests()\n.antMatchers(‚Äú/‚Äù,‚Äù/index‚Äù,‚Äù/webpublico‚Äù).permitAll()\nEspecificamos que las peticiones que en la ruta este cualquiera de las cadenas¬†**‚Äú/‚Äù,‚Äù/index‚Äù,‚Äù/webpublico‚Äù¬†**no tendr√°n seguridad. Es decir estar√°n permitidas para todo el mundo.\nantMatchers(‚Äú/webprivado‚Äù).authenticated() Especificamos que las peticiones a la ruta **‚Äú/webprivado‚Äù¬†**solo podr√°n ser procesadas si el usuario esta autentificado, sin especificar a que ROL debe pertenecer.\n.antMatchers(‚Äú/webadmin‚Äù).hasRole(‚ÄúADMIN‚Äù) Solo los usuarios que sean del grupo¬†**ADMIN¬†**tendr√°n acceso a la URL ‚Äú/webadmin‚Äù\nLa funci√≥n **antMatchers¬†**permite el uso de expresiones regulares, por lo que si, por ejemplo, quisi√©ramos aplicar una regla a todo lo que dependa de una ruta, podr√≠amos poner esto :\nhttp.antMatchers(‚Äú/users/‚Äù).hasRole(‚ÄúUSER‚Äù)¬†**para especificar que cualquier petici√≥n a la URL /users/Y_LO_QUE_SEA solo tendr√°n acceso los usuarios¬†que pertenezcan al grupo¬†USER.\n.formLogin().loginPage(‚Äú/login‚Äù).permitAll() Especificamos que la pagina de login sera ‚Äú/login‚Äù (valga la repugnancia ;-)) y que¬†que puede acceder¬†todo el mundo.\nlogout().permitAll() Especificamos que a la pagina de desconexi√≥n (logout) pude acceder a todo el mundo. Por defecto esta pagina responde en la URL ‚Äú/logout‚Äù\nPerfecto, ya tenemos definida la seguridad de nuestras paginas web, ahora solo queda definir los puntos de entrada a las p√°ginas. Eso se hace en la clase¬†WebController.java\n@Controller public class WebController { @RequestMapping({\"/\",\"index\"}) public String inicio() { return \"index\"; } @RequestMapping(\"/webprivado\") public String privado() { return \"privado\"; } @RequestMapping(\"/webpublico\") public String loginpub() { return \"publico\"; } @RequestMapping(\"/webadmin\") public String admin() { return \"admin\"; } @RequestMapping(\"/login\") public String login() { return \"login\"; } }La clase como se ve no tiene muchos misterios,simplemente especificamos con la etiqueta**¬†@Controller¬†**que sera una clase donde vamos a definir puntos de entrada para las peticiones web.\nEn las diferentes funciones tenemos la etiqueta¬†@RequestMapping¬†para especificar la URL que debe procesar cada funci√≥n. As√≠ la funci√≥n¬†inicio sera llamada cuando haya una petici√≥n a la URL ‚Äú/‚Äù o a ‚Äú/index‚Äù. Observar que no hay que poner la barra inicial en ‚Äúindex‚Äù.\nLa cadena devuelta sera la plantilla Thymeleaf devuelta, de tal manera que la llamada¬†funci√≥n inicio¬†devolver√° la plantilla ‚Äúindex.html‚Äù que es la siguiente:\n¬øA que casi parece HTML puro?. Es una de las ventajas de **Thymeleaf¬†**que usa¬†etiquetas HTML est√°ndar. No voy a explicar este lenguaje, pero os explicare un poco las etiquetas usadas:\n\u003ca th:href=‚Äù@{/webpublico}‚Äù\u003e\nCrea un enlace a la URL ‚Äú/webpublico‚Äù;. Seria como poner la etiqueta ‚Äú\n\u003cdiv sec:authorize=‚ÄùisAuthenticated()‚Äù\u003e\nSolo se renderizara el c√≥digo en el DIV si el usuario esta autentificado. En otras palabras si el usuario no esta logueado no se mostrara en la p√°gina web lo que hay entre las etiquetas¬†DIV (de hecho no se mostrara ni el DIV).\n\u003cspan sec:authentication=‚Äùname‚Äù\u003esomeone\u003c/span\u003e Si el usuario esta autentificado mostrara el nombre del usuario, en caso contrario mostrara lo que haya entre las etiquetas **span.¬†**En este caso mostrar√≠a¬†someone.\nY con esto ya tenemos una aplicaci√≥n securizada. !S√≠!, con solo dos clases java y sus correspondientes ficheros HTML.\nPara terminar esta entrada, os dejo unos capturas de pantalla de la aplicaci√≥n:\n¬°¬° Hasta otra !!\n","description":"","tags":["java","mvc","seguridad","spring","spring boot","thymeleaf"],"title":"Seguridad WEB en Spring Boot","uri":"/2018/10/17/seguridad-web-en-spring-boot/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: thymeleaf","uri":"/es/tags/thymeleaf/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: thymeleaf","uri":"/es/categories/thymeleaf/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Java¬†\u003e¬†Kotlin","content":"Hola de nuevo, chicos.\nContinuo con la entrada¬†http://www.profesor-p.com/2018/10/11/aplicacion-crud-en-kotlin-con-springboot/¬†para ver como realizar las peticiones REST , con protocolo JSON que es el est√°ndar de facto üòâ en Kotlin.\nUna vez que ya tenemos la l√≥gica de acceso a nuestra base de datos, tenemos que hacer la parte Web. Pues, aunque os parezca incre√≠ble, esto se hace con una sola clase y ademas de muy pocas lineas.\nLa clase en cuesti√≥n es¬†ApiController.kt\n@RestController @RequestMapping(\"/api/\") class ApiController { @Autowired lateinit var localeRepository: LocaleRepository @CrossOrigin(\"http://localhost:4200\") @GetMapping(\"/\") fun getAll(): Iterable\u0026lt;Locales\u0026gt; { return localeRepository.findAll();\t} ‚Äã\t..... }Bueno, lo primero es poner la anotaci√≥n @RestController para que Spring sepa que esta clase responder√° a las peticiones REST y despues especificar la ruta que tratara esta clase con la anotaci√≥n**¬†@RequestMapping(‚Äú/api/‚Äù).¬†**Es decir esta clase responder√° en la URL: http://localhost:8080/api/\nInyectamos una referencia a la clase **LocaleRepository¬†**con la etiqueta @AutoWired, para poder acceder a nuestro repositorio (la base de datos, vamos). Observar el modificador¬†lateinit para que Kotlin no se queje de que la variable es null.\nFunci√≥n¬†getAll Esta responder√° a las peticiones GET¬†en ‚Äú/‚Äù devolviendo una lista con todos los objetos¬†tipo Locales disponibles. Observar la anotaci√≥n¬†**@CrossOrigin(‚Äúhttp://localhost:4200‚Äù)¬†**para que se pueda acceder desde un navegador solo si el cliente esta accediendo a http://localhost:4200.\nEsto es porque, por seguridad, los navegadores no permiten hacer peticiones AJAX (con las cuales se hacen las peticiones REST en angular normalmente) a una direcci√≥n que no sea la de la URL principal. Vamos, para que si tu estas en www.google.com, la p√°gina por debajo no pueda acceder a www.elpais.com. Sin embargo con la etiqueta @**CrossOrigin¬†**nuestra aplicaci√≥n informara al navegador¬†de que permita acceder siempre y cuando la URL de origen sea la especificada.\nTener en cuenta que esta limitaci√≥n la imponen los navegadores Web (Chrome, Firefox, IE, etc), si accedemos directamente con otro programa a la direcci√≥n**¬†http://localhost:8000/api** no tendr√° efecto esta directiva.\nAqu√≠ os muestro un pantallazo de la salida de¬†PostMan:\nFunci√≥n getByQuery @CrossOrigin(\"http://localhost:4200\") @GetMapping(\"/{codigo}/{nombre}\") fun getByQuery(@PathVariable codigo:String,@PathVariable nombre:String): Iterable\u0026lt;Any\u0026gt; { return localeRepository.findLike(\"%\"+codigo+\"%\",\"%\"+nombre.toUpperCase()+\"%\"); }Aqu√≠ vemos de nuevo la etiqueta @CrossOrign y la etiqueta¬†@GetMapping(‚Äú/{codigo}/{nombre}‚Äù) con lo cual especificamos que esta funci√≥n tratara las llamadas a la URL: **http://localhost:8080/api/XX/YY¬†**. Observar las etiquetas¬†**@PathVariable¬†**en los par√°metros de la funci√≥n para especificar que debe pasar las diferentes partes de la ruta a las variables de la funci√≥n.\nLlamamos a la funci√≥n¬†findLike de nuestro clase repositorio la cual nos devolver√° todos los objetos Locales que cumplan los criterios de la b√∫squeda.\nFunci√≥n insertar @CrossOrigin(\"http://localhost:4200\") @PostMapping(\"/\")\tfun insertar(@RequestBody locales:Locales): ResponseEntity\u0026lt;Any\u0026gt; { if (localeRepository.existsById(locales.codigo ) )\treturn ResponseEntity(HttpStatus.CONFLICT); localeRepository.save(locales) return ResponseEntity .created( URI(\"/api/\"+locales.codigo)).body(\"\"); }Esta funci√≥n sera invocada cuando la petici√≥n HTTP sea de tipo POST, a la ruta ‚Äú/‚Äù, como as√≠ se indica con la etiqueta¬†**@PostMapping(‚Äú/‚Äù).¬†**En la funci√≥n incluimos la etiqueta¬†**@RequestBody¬†**para indicarle a Spring que en el cuerpo de la petici√≥n HTTP ira un objeto tipo Locales. en formato¬†JSON, al no especificar lo contrario.\nComprobamos si el c√≥digo ya existe, para devolver¬†una respuesta con el c√≥digo CONFLICT, con lo cual indicar√≠amos al cliente que hay un error.\nDespu√©s guardamos la entidad y devolvemos un c√≥digo CREATED, con la URL que indica el c√≥digo del pa√≠s insertado.\nEsto es un pantallazo donde se ve como insertar√≠amos un nuevo pa√≠s en la base de datos.\nFunci√≥n deleteByCodigo @CrossOrigin(\"http://localhost:4200\") @DeleteMapping (\"/{codigo}\") fun deleteByCodigo(@PathVariable codigo:String):ResponseEntity\u0026lt;Any\u0026gt; { if (!localeRepository.existsById(codigo) )\tthrow NotFoundException(codigo) localeRepository.deleteById(codigo); return ResponseEntity( HttpStatus.OK) }Esta funci√≥n sera llamada cuando recibamos una petici√≥n HTTP tipo DELETE, a la ruta /XX. Es decir responder√° con una petici√≥n DELETE como la del pantallazo que adjunto:\nObservar que si el pa√≠s no existe lanzamos una excepci√≥n tipo¬†**NotFoundException .¬†**\nDetallo la clase a continuaci√≥n:\n@ResponseStatus(HttpStatus.NOT_FOUND) class NotFoundException: RuntimeException { constructor(codigo: String?): super(\"No encontrados registro \"+codigo); }Esta clase tiene la etiqueta¬†**@ResponseStatus¬†**que indica que tipo de respuesta recibir√° el cliente cuando se lance esta excepci√≥n. En este caso recibir√° un tipo¬†NOT_FOUND (404), con el mensaje¬†**‚ÄúNo encontrados registro xxx‚Äù,¬†**como se ve en la siguiente pantalla.\nFunci√≥n update @CrossOrigin(\"http://localhost:4200\") @PutMapping (\"/{codigo}\") fun update(@PathVariable codigo:String,@RequestBody locales:Locales):ResponseEntity\u0026lt;Any\u0026gt; { if (!localeRepository.existsById(codigo) )\tthrow NotFoundException(codigo) if (!codigo.equals(locales.codigo)) throw ConflictException(codigo) localeRepository.save(locales); return ResponseEntity( HttpStatus.OK) }Esta funci√≥n actualizara el nombre de un pa√≠s mandado. Observar que recibe en la ruta el c√≥digo del pa√≠s a modificar y en el cuerpo de la petici√≥n (Body) un objeto Locales.\nSi el c√≥digo del pa√≠s¬†mandado es diferente al del objeto, lanza una excepci√≥n tipo **ConflictException¬†**que es muy parecida a¬†**NotFoundException¬†**pero devolviendo un c√≥digo HTTP CONFLICT.\nY ya esta chicos. Para probar la aplicaci√≥n usaremos el programa realizado en Angular, que explicaba en la entrada http://www.profesor-p.com/2018/10/08/aplicacion-crud-en-angular/ , teniendo cuidado de cambiar el valor de la variable URL de la clase¬†datosserver.service.ts para que apunte a donde escucha nuestra aplicaci√≥n.\nexport class DatosserverService { url:string; constructor(private _http:HttpClient) { this.url=\"http://localhost:8080/api/\"; } ....Y veremos como apenas 4 sencillas clases tenemos una aplicaci√≥n totalmente funcional. ¬ø A que es incre√≠ble la potencia de Spring y m√°s si la juntamos con Kotilin?. ¬°¬° Pues a programar que es la mejor manera de aprender üòâ !!\n","description":"","tags":["crud","jpa","kotlin","spring boot"],"title":"Aplicacion CRUD con REST en Kotlin y SpringBoot (2¬™ Parte)","uri":"/2018/10/11/aplicacion-crud-en-kotlin-y-springboot-2a-parte/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: crud","uri":"/es/tags/crud/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: kotlin","uri":"/es/tags/kotlin/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: kotlin","uri":"/es/categories/kotlin/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: angular","uri":"/es/tags/angular/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: angular","uri":"/es/categories/angular/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: frontend","uri":"/es/tags/frontend/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: glassfish","uri":"/es/tags/glassfish/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: glassfish","uri":"/es/categories/glassfish/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: javaee","uri":"/es/tags/javaee/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: javaee","uri":"/es/categories/javaee/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: netbeans","uri":"/es/tags/netbeans/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"Este es mi blog profesional, hecho con mimo personal.\nDetr√°s del Profesor P. esta Jes√∫s Javier Puente S√°nchez. Un analista/programador, que tambi√©n es administrador de sistemas y bases de datos. Defensor del software libre, y con varios ERPs a sus espaldas, he querido aportar mi granito de arena a la comunidad, creando Anjelica.\nEn esta pagina, ir√© poniendo ejemplos (pr√°cticos a poder ser) de programaci√≥n, ademas de alguna que otra entrada sobre¬†cosas de la Inform√°tica esa, que he convertido en mi pasi√≥n desde mi m√°s tierna juventud üòâ\nPara saber m√°s de mi¬†visitar mi p√°gina de Linkedin o ver mi experiencia profesional en este mismo blog.\nPuedes contactar conmigo a trav√©s de mi correo o seguir mi cuenta de¬†Twitter¬†que es @chuchip\nTambi√©n Pod√©is ver algunos de mis proyectos en mi p√°gina de GitHub.\n","description":"","tags":null,"title":"Acerca de","uri":"/es/acerca/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular","content":"Angular si no se le dice lo contrario, es ingles del bueno. Las fechas las pondr√° en su formato de mes/dia/a√±o . Los n√∫meros ser√°n con las comas con separadores de miles y los decimales con puntos. Vamos, muy ingles todo.\nEl problema es que no todo el mundo es ingles (aunque les pene a los ingleses ;- )) . As√≠ que en esta entrada voy a explicar como hacer que Angular se nos vuelva espa√±ol.\nLo primero es editar el fichero app.module.ts, para importar nuestros ficheros de locale (lease localizaci√≥n üòâ ) .\nimport localeEs from '@angular/common/locales/es'; registerLocaleData(localeEs, 'es');Ahora tendremos que incluir un¬†provider para que cuando mostremos un valor por pantalla¬†y queramos formatearlo lo formatee con nuestro locale espa√±ol.\nDe hecho, si no ponemos este provider, Angular cascara con gran alegr√≠a, si intentamos utilizar un pipe.\n@NgModule({ ..... providers: [ { provide: LOCALE_ID, useValue: 'es' } ], ..... })Ahora si en nuestra aplicaci√≥n tenemos este c√≥digo:\nimport { Component } from '@angular/core'; @Component({ selector: 'app-prueba', template: ` \u003cp\u003e Numero: {{numero | number: '1.2-2'}}\u003cbr\u003e Fecha: {{fecha | date: 'shortDate'}} \u003c/p\u003e ` }) export class PruebaComponent { numero=1234.5; fecha=new Date(); }Donde, como podemos ver utilizamos pipes, para formatear un numero:¬†{{numero | number: ‚Äò1.2-2‚Äô}}¬†y una fecha:¬†{{fecha | date: ‚ÄòshortDate‚Äô}}¬†El resultado sera el siguiente, que como se ve, es la salida en nuestro querido lenguaje espa√±ol.\nAhora ya solo falta que hag√°is vuestra aplicaci√≥n multi-lenguaje.¬†O sea, que se pueda elegir el idioma en que se van a presentar tanto los textos como los lenguajes.\nPero eso, chavales, es para nota.. y si me apetece ya lo explicare otro d√≠a.\n","description":"","tags":["angular","i18n","internacionalizacion"],"title":"Angular ‚Äì Hablando espa√±ol","uri":"/2018/09/24/hablando-espanol/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: i18n","uri":"/es/tags/i18n/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: i18n","uri":"/es/categories/i18n/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: internacionalizacion","uri":"/es/tags/internacionalizacion/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular","content":"Recordar lo primero que para utilizar toda la potencia de BootStrap, necesitamos tener instaladas las librerias de¬†JQuery y Popper¬†Hay varias maneras de¬†instalar estas librer√≠as.\nLocalmente usando npm Una vez estemos situados el directorio principal del proyecto, desde tu terminal preferido ejecutar las instrucciones siguientes:\nEsto nos instalara los archivos necesarios bajo el directorio¬†**node-modules.¬†**\nAhora debemos incluir el fichero de estilos (css) de BootStrap y las librer√≠as JavaScript de BootStrap, JQuery y Pooper.\nUna de las opciones es editando el fichero angular.json, e incluirlas¬†en los campos styles y scripts.\nEl fichero quedar√≠a algo as√≠ como esto:\nRecordar que hay que parar el servidor de node.js y volverlo a ejecutar con **ng serve¬†**si modificamos el fichero angular.json\nOtra manera de incluir estos ficheros seria a√±adirlos en¬†index.html, dentro de HEAD. Esto si fuera un proyecto habitual en HTML.\nUsando CDN En este caso, no bajamos nada locamente y lo que hacemos es incluir los enlaces hacia los correspondientes ficheros en interner.\nAs√≠, como explican en la pagina de¬†BootStrap CDN, a√±adir√≠amos esta linea para incluir bootstrap versi√≥n 4.1.3\nY esta linea para incluir JQuery y Pooper\n","description":"","tags":["angular","bootstrap","jquery","pooper"],"title":"Angular 6 ‚Äì A√±adir Bootstrap 4 con JQuery","uri":"/2018/09/20/angular-6-anadir-bootstrap-4-con-jquery/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: pooper","uri":"/es/tags/pooper/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: pooper","uri":"/es/categories/pooper/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: angular6","uri":"/es/tags/angular6/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular¬†\u003e¬†Curso de Angular 6","content":"Antes de continuar con el curso quiero dejar claro que Angular es¬†reactivo.\n¬ø Que significa eso ?.\nPues b√°sicamente que cualquier cambio que se haga en el modelo sera transmitido a la vista y viceversa. El modelo, enti√©ndase que son nuestros _Componentes.¬†_Es decir, nuestras clases definidas en los ficheros TypeScript. La vista es el c√≥digo HTML que se visualizara en nuestro navegador.\nAs√≠, si cambiamos el valor de un campo¬†**INPUT¬†**del HTML, que este unido con la directiva¬†**[(ngModel)]¬†**a una variable. Esa variable se modificara en tiempo real.\nObs√©rvese el siguiente c√≥digo:\nimport { Component} from '@angular/core'; @Component({ selector: 'app-datos-mes', template: '\u003cp\u003eTeclea aqu√≠: \u003cinput [(ngModel)]=\"variable\"/\u003e \u003cbr\u003elo que estas tecleando: {{variable}} \u003c/p\u003e', }) export class DatosMesComponent{ variable:string=\"\"; } Esto nos mostrar√≠a una pantalla como esta:\n!()[/img/2018/09/Captura1.png)\nAl modificar el valor del input, cambiara el valor mostrado.\nEn cuanto tecleemos una letra, el valor de¬†variable¬†cambiara y, por lo tanto, el valor mostrado con¬†{{variable}}¬†tambi√©n cambiara.\nEsto funciona a todos los niveles. Incluyendo las condiciones.\nimport { Component} from '@angular/core'; @Component({ selector: 'app-datos-mes', template: `\u003cp\u003eTeclea aqu√≠: \u003cinput [(ngModel)]=\"variable\"/\u003e \u003cbr\u003elo que estas tecleando: {{variable}} \u003c/p\u003e \u003cdiv *ngIf=\"variable=='0'\"\u003eVariable es cero\u003c/div\u003e `, }) export class DatosMesComponent{ variable:string=\"\"; }As√≠, en el momento que el valor de¬†variable¬†sea igual a ‚Äú0‚Äù Nos mostrara el texto Variable es cero.¬†Como se puede ver en el siguiente v√≠deo .\n/img/2018/09/prueba4.mp4\n","description":"","tags":["angular","angular6","reactivo"],"title":"Curso Angular 6 ‚Äì Reactivo!","uri":"/2018/09/19/curso-angular-6-reactivo/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: reactivo","uri":"/es/tags/reactivo/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Angular¬†\u003e¬†Curso de Angular 6","content":"En¬†la aplicaci√≥n que estamos desarrollando, de la cual, os recuerdo ten√©is el c√≥digo fuente en¬†https://github.com/chuchip/yagesclient-angular, tenemos que poder solicitar al usuario el ejercicio sobre el que vamos a realizar la consulta.\nPara introducir ese dato, vamos a utilizar un formulario muy simple, pero que nos servir√° para entender algunos conceptos b√°sicos de Angular.\nTrabajando con el componente AppComponent, definido en el fichero src/app/app.component.ts nos centramos primero en¬†el c√≥digo HTML¬†el cual,¬†es el siguiente:\napp.component.html\nEn la etiqueta form con el modificador¬†**(ngSubmit)=‚Äùbuscar()‚Äù¬†**indicaremos que llame a la funci√≥n buscar del componente¬†**AppComponent¬†**cuando se envi√© el formulario con el bot√≥n correspondiente.\nEn el input, vemos la etiqueta [(ngModel)] ,¬†a la que le asignamos el valor¬†‚Äúejercicio‚Äù. Esta etiqueta sirve para unir el valor de la variable¬†ejercicio con la vista. Esa uni√≥n es bidireccional; si se modifica el valor de la variable en¬†**AppComponent¬†** se cambiara el valor en la vista y viceversa. Estos cambios son inmediatos, es decir en cuanto introduzcamos una letra (o la borremos) en la pagina web, el valor de la variable¬†ejercicio¬†cambiara inmediatamente.\nLa¬†variable, esta definida como otra cualquiera, sin ning√∫n tipo de decorador o etiqueta especial.\nA continuaci√≥n, en¬†la etiqueta¬†span vemos la directiva¬†*ngIf . Con ella indicamos que la etiqueta¬†**span¬†**y todo lo que haya dentro de ella solo se debe procesar (y por lo tanto mostrar) si se cumple la condici√≥n indicada.\nEn este caso, si la variable¬†msgError es diferente de ‚Äú‚Äù (o sea si no esta vac√≠a)¬†se ejecutara la etiqueta¬†span. En caso contrario, simplemente saltara hasta donde se cierre esa etiqueta con Dentro de¬†span encontramos el texto¬†{{msgError}}. Con las dobles llaves le indicamos a Angular que lo que hay en su interior es una variable de nuestro¬†_componente¬†_que debe mostrar.¬†Digamos que es un poco como la directiva¬†**ngModel¬†**pero de solo salida. De tal modo que si cambia el valor de la variable, cambiara el valor mostrado en nuestro navegador.\nLa variable entre las dobles llaves puede ser de cualquier tipo. Una cadena de texto, un objeto, un n√∫mero, etc.\napp.component.ts\nDe este modo, cuando muestre el formulario en la p√°gina web, el input aparecer√° con el valor 2018.\nObservemos ahora la funci√≥n **buscar.¬†**Esa funci√≥n, como hemos dicho,¬†sera llamada¬†cuando pulsemos el bot√≥n de nuestro formulario.\nLo primero que hacemos es asignar a una variable local, a la que hemos llamado¬†num el valor de¬†la variable global ejercicio. Obs√©rvese la palabra¬†this antes de ejercicio, para indicar que esa variable es global. Si pondr√≠amos**¬†ejercicio**¬†sin la palabra reservada this, Angular dar√≠a un error, avisando de que esa variable no existe.\nSi nos fijamos vemos que se pone un m√°s (+) antes de¬†**this.ejercicio¬†** esto es una facilidad que nos da JavaScript para transformar una variable a tipo num√©rico. De ese modo, si el usuario ha introducido en el campo de texto algo que no sea un numero, por ejemplo ‚Äúpepe‚Äù, como no se podr√° transformar¬†**this.ejercicio¬†**a un n√∫mero, el valor de¬†**num¬†**sera igual a cero.\nEn el caso de que¬†num sea cero, ponemos la variable global **this.msgError¬†**con el texto de error y saldr√° de la funci√≥n.\nEn caso de que num sea diferente a cero ponemos la variable¬†**this.msgError¬†**a ‚Äú‚Äù (cadena vac√≠a) , y la variable¬†ejercicioActual la hacemos igual¬†a¬†ejercicio, para despu√©s navegar a la ruta¬†ejercicioActual, llamando a la funci√≥n¬†navigate del objeto **this.router¬†**que Angular habr√° inyectado¬†en nuestra clase al haber puesto en el constructor que recibimos la variable¬†router del tipo¬†Router.\nEnti√©ndase que¬†_navegar¬†_es a todos efectos como si el usuario pusiera en la barra de navegaci√≥n lo que nosotros hemos programado. En este caso, si se ha introducido el valor¬†2018¬†en el formulario**,** ir√≠amos a la direcci√≥n http://localhost:8080/2018\nResumiendo, cuando se pulse el bot√≥n¬†Consultar, si el usuario introduce un n√∫mero valido en el formulario, navegaremos al ejercicio tecleado. En caso contrario aparecer√° el mensaje¬†Ejercicio no ES valido.\n¬°¬° Nos vemos en la pr√≥xima clase üòâ !!\n","description":"","tags":["angular","formularios"],"title":"Curso Angular 6 ‚Äì Formularios (1)","uri":"/2018/09/19/curso-angular-6-formularios-1/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: formularios","uri":"/es/tags/formularios/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: curso","uri":"/es/tags/curso/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: routes","uri":"/es/tags/routes/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: angular 6","uri":"/es/tags/angular-6/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: jndi","uri":"/es/categories/jndi/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: Java ee","uri":"/es/tags/java-ee/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: netbeans","uri":"/es/categories/netbeans/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: netbeans9","uri":"/es/tags/netbeans9/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: lambda","uri":"/es/categories/lambda/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: jndi","uri":"/es/tags/jndi/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†MVC","content":"En una entrada anterior explique como instalar NetBeans 9, a√±adiendole el plugin para usar Spring Boot.\nAhora vamos a crear nuestro primer proyecto en este entorno.\nPulsaremos New Project, lo cual nos mostrara una pantalla como la siguiente.\ny en el campo Filter pondremos _spring,¬†_ para despu√©s eligir Spring Boot Inititilizr project. Pulsaremos Next y nos pedir√°¬†una serie de datos sobre¬†nuestro proyecto. Para este ejemplo podemos dejar los campos como aparecen por defecto.\nPulsamos siguiente (Next) y ahora debemos especificar de que tipo es nuestro proyecto:\nComo se ve hay muchas opciones, nosotros solo marcaremos la casilla WEB, porque va a ser una aplicaci√≥n WEB y Thymeleaf, porque es el motor de plantillas (Template Engines) que vamos a usar. Thymeleaf es un sustituto o evoluci√≥n de JSP con diferentes mejoras y que se integra perfectamente con Spring. Su pagina web es: https://www.thymeleaf.org/ y ten√©is una buena documentaci√≥n. De todos modos, en este ejemplo solo usaremos c√≥digo HTML sin poner c√≥digo en nuestras plantillas.\nVolveremos a pulsar Next, para, en el ultimo paso poner el nombre de nuestro provecto\nPulsaremos **Finish¬†** y esperaremos a que Maven baje los paquetes necesarios y configure el entorno de trabajo.\nAhora vamos a crear un par de paginas web. La primera sera index.html, la otra sera otrapagina.html. Esas paginas las debemos crear en OtherResources src/main/resources¬†templates, como se ve en la siguiente imagen:\nLos ficheros creados son tipo HTML.\nLos Ficheros quedaran as√≠\nindex.html\notrapagina.html\nAhora mismo ya podr√≠amos ejecutar nuestra aplicaci√≥n, y ver√≠amos nuestro index.html, pero vamos a crear el controlador para que se pueda mostrar la pagina otrapagina.html. Para ello, en Source Packages, dentro del paquete com.example.demo crearemos un nuevo fichero java al que llamaremos Controlador.java\nEn este fichero tendremos lo siguiente:\npackage com.example.demo; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; @Controller public class Controlador { @GetMapping(\"otra\") public String login() {\treturn \"otrapagina\"; } }Esta clase marcada con @Controller, tendr√° una √∫nica funci√≥n que tiene la etiqueta @GetMapping. El par√°metro de esa etiqueta sera la URL o p√°gina que debe tratar la funci√≥n que tenemos debajo.\nEs decir, que cuando nosotros pongamos en nuestro navegador:\nhttp://localhost:8080/otra\nSpring ejecutara lo que haya en la funci√≥n login().\nSi quisi√©ramos tener mas paginas simplemente a√±adiremos m√°s funciones, con la etiqueta @GetMapping(‚ÄúPAGINA QUE NOS DE LA GANA‚Äù)\nTerminar, comentando que el String devuelto por nuestra funci√≥n es la pagina web (el fichero) creado bajo el directorio templates (sin la extensi√≥n html). Resumiendo, en este ejemplo, al ir a:\nhttp://localhost:8080/otra\nSpring parseara el fichero otrapagina.html y devolver√° la pagina¬†HTML¬†creada por el.\nY con esto, ya hemos creado nuestra primera pagina web con Spring üòâ\nTerminar diciendo que el c√≥digo fuente de este proyecto lo ten√©is en mi repositorio de GITHUB.\n","description":"","tags":["java","mvc","netbeans","spring boot"],"title":"Ejemplo aplicaci√≥n MVC con Spring Boot  usando NetBeans 9","uri":"/2018/08/28/ejemplo-aplicacion-mvc-con-spring-boot-usando-netbeans-9/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"Para aquellas peque√±as empresas que necesitan tener una trazabilidad sencilla pero potente, y ademas gratis, prueba mi ERP.\nTotalmente funcional, te sorprender√° gratamente.\nM√°s informaci√≥n aqu√≠.\n","description":"","tags":null,"title":"ERP Anjelica","uri":"/es/anjelica/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring","content":"En esta entrada explicare como crear un aplicaci√≥n con el framework Spring Boot, usando el IDE NetBeans 9.\nAdemas haremos todo esto en un Linux Ubuntu 18.04\nSi no sab√©is lo que es Spring Boot, ya est√°is tardando en aprender al menos los conceptos b√°sicos.\nSpring Boot es Spring hecho (m√°s) f√°cil. Con Spring Boot, entre otras cosas, se puede realizar una aplicaci√≥n Web, con una m√≠nima configuraci√≥n. Una aplicaci√≥n¬†demo se crea en apenas¬†5 minutos. Y ademas, sin tener que usar un servidor de aplicaciones, pues Spring Boot, ya incluye una versi√≥n de Tomcat embebida. Spring Boot usa un sistema de paquetes, que hace mas f√°cil las dependencias de Maven (o Gradle). Spring Boot, la versi√≥n 5, funciona con Java 1.8 o superior, haciendo mucho uso de Lambdas, Streams y todas las nuevas capacidades de este lenguaje. Este es un video con una charla de introducci√≥n, de la gente de Paradigma Digital.\nYa se que Spring tiene su propio IDE, basado en Eclipse, pero la ultima versi√≥n al menos, esta tan pensada para Spring Boot, que intentar utilizar otro servidor de aplicaciones es muy engorroso.¬†Y bueno, que hay gente que nos sentimos c√≥modos con NetBeans y no nos apetece cambiar de IDE üôÇ\nPero si os apetece probar un IDE, totalmente configurado para¬†Spring Boot , usar¬†Spring Tool Suite baj√°ndolo de https://spring.io/tools/sts. No es mal IDE, pero ‚Ä¶. no es mi IDE üòâ\nBueno, lo primero es tener NetBeans 9 instalado, para ello, lo primero seria ir a la siguiente p√°gina: https://netbeans.apache.org/download/nb90/nb90.html y bajarnos el IDE.\nUna vez tengamos el IDE descargado, como es un ZIP, simplemente lo descomprimimos. En este ejemplo voy a suponer que lo instalamos en /nb (s√≠, ya se que no es lo normal, pero es para hacer mas f√°cil el tutorial).\nPara ejecutar NetBeans 9, deberemos ir al directorio bin y ejecutar el fichero netbeans.sh. Es decir en nuestro ejemplo deberemos ejecutar /nb/bin/netbeans.sh.\nUn momento,¬†¬ø que versi√≥n de Java ten√©is instalado en vuestro Ubuntu?.\nMe temo que NetBeans solo funciona con el Java de Oracle. OpenJDK no le gusta y no os arrancara, as√≠ que no os queda otra¬†(que yo sepa) que iros a la pagina web de Oracle y bajaros su JDK. En este caso yo me he bajado JDK 10.0.2. Bajaros el tar.gz de este enlace y lo descomprim√≠s¬†en el directorio /nb (podr√≠amos dejarlo en cualquier otro lugar pero es por facilitar el tutorial una vez mas). As√≠, ahora, tendr√©is el JDK en /nb/jdk-10.0.2/\nAhora hay que decirle a NetBeans que use el nuevo JDK que hemos instalado, para ello deber√©is editar el fichero situado¬†en **/nb/etc/netbeans.conf¬†**y cambiar la linea¬†**netbeans_jdkhome¬†** para que ponga esto:\nOk. Ya podemos ejecutar Netbeans, con el comando /nb/bin/netbeans.sh\nLa primera vez que ejecutamos NetBeans 9, nos solicita que instalemos la librer√≠a nbjavac, para mejorar el editor de textos y la funcionalidad en general. Le hacemos caso y la instalamos.\nUna vez instalada, nos pedir√° que reiniciemos el IDE. Somos buenos chicos y lo reiniciamos.\nAhora toca instalar el plugin para poder funcionar con Spring Boot. Para ello nos vamos al men√∫ Tools y elegimos la opci√≥n plugins. En la ventana que nos sale nos iremos a la pesta√±a de ‚ÄúAvailable Plugins‚Äù¬†y elegiremos NB SpringBoot. Despu√©s le daremos al bot√≥n Install.\nReiniciamos, una vez m√°s nuestro IDE, y ya podremos crear nuestro proyecto Spring Boot, en NetBeans 9. Como crearlo lo contare en la pr√≥xima entrada.\n","description":"","tags":["java","linux","netbeans","spring boot"],"title":"Instalar plugin Spring Boot en NetBeans","uri":"/2018/08/27/instalar-plugin-spring-boot-con-netbeans-9-en-ubuntu-18-04/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: linux","uri":"/es/tags/linux/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Database","content":"En un entrada anterior, explique como crear nuestra conexi√≥n a la base de datos, usando JNDI. En esta entrada explicare como usar esa conexi√≥n con JPA.\nRecordar que el c√≥digo fuente de de este ejemplo esta en: https://github.com/chuchip/jdbc_jpa_tomcat\nImportante recalcar que este ejemplo solo funciona con Java 1.8 o superior.\nLo primero explicar un poco de que va esto de JPA.¬†JPA son las siglas de¬†Java Persistence API. Es decir la API de persistencia en Java. Vale, que te has quedado como antes, ¬ø no ? üòâ . Bueno, la idea es tener una metodolog√≠a de tener objetos en nuestro entorno Java y que esos objetos sean un reflejo de las diferentes tablas de la base de datos, de tal manera que nosotros modifiquemos nuestros objetos y en la base de datos se vean reflejados esos cambios.\nLa idea parece interesante, ¬ø verdad ?. Bueno, pues encima no es nada complicado el hacerlo.\nManos a la obra.\nLo primero vamos a crear el objeto que representa la tabla de nuestra base de datos. As√≠, en nuestra base de datos tenemos la tabla usuario que solo tiene dos campos, el login y el nombre del usuario. Ambos campos son cadenas de caracteres (String, vamos). En nuestra tabla¬†usuario no puede haber dos login igual, es lo que se llama un indice unico o ‚Äúunique constraint‚Äù que dicen los ingleses.\nDefinamos entonces nuestro objeto (usando la librer√≠a Lombok, de la que ya hablaba en otra entrada)\n@Data @Entity @Table(name = \"usuario\", uniqueConstraints = { @UniqueConstraint(columnNames = {\"login\"})}) // Esto no es necesario en este ejemplo public class Usuario implements Serializable { @Id String login; @Column String nombre; public Usuario() {} public Usuario(String login, String nombre) { this.login = login; this.nombre = nombre; } }Como se ve f√°cilmente, es una simple clase POJO, que implementa el interface Serializable. Solo tiene dos campos y unas cuantas anotaciones, que ahora explicare.\nLo primero es declarar la clase del tipo¬†Entidad, para eso usaremos la anotaci√≥n @Entity. Gracias¬†a eso, JPA marcara esa clase para poder usarla en su entorno de persistencia.\nEl siguiente par√°metro @Table indica a que tabla de nuestra base de datos, hace referencia esa clase, ademas de cual es su¬†indice √∫nico . Si, como es el caso, el indice es simple y ademas la tabla se llama como nuestra clase no hace falta poner ese par√°metro pero yo lo he puesto para que sep√°is que exista ( y por man√≠as üòâ )\nLuego, dentro de la clase veis que antes de la definici√≥n de la variable login tenemos la anotaci√≥n @Id,¬†eso indicara que ese es nuestro campo indice o √∫nico. Antes de la definici√≥n de la variable nombre tenemos la anotaci√≥n @Column para indicar que es una columna m√°s de nuestra tabla. Aclarar que todas esas anotaciones permiten m√°s par√°metros.\nHay much√≠sima documentaci√≥n en la red, sobre JPA, pod√©is empezar, por ejemplo, por este PDF de la Universidad de Oviedo\nBien, una vez tenemos nuestra entidad vamos a trabajar con ella. Por hacerlo simple vamos a hacer uso Spring y de su interfaz CrudRepository. Este interfaz nos permite con apenas 3 lineas de c√≥digo acceder a los datos que representa nuestro POJO.\nSi, aunque parezca incre√≠ble, con solo crear esta interface ya podremos acceder a nuestra base de datos.\nVeis que he creado un interface, al que he llamado UsuarioRepositorio que extiende del interface CrudRepository y le he a√±adido el nombre de la clase U****suario, que es mi @Entity, y el tipo de campo (String) que es el indice √∫nico.\n¬ø Ya esta ?. Pues s√≠, ya esta. Ya pod√©is acceder a vuestra base de datos. ¬ø Qu√© como ?. Pues l√≥gicamente usando las funciones que implementa el interfaz CrudRepository. Por ejemplo existe la funci√≥n findById, si ejecut√°is esa funci√≥n pas√°ndole el nombre del usuario os devolver√° un objeto¬†**Optional\u003c**usuario \u003e . Os lo explico mejor con un ejemplo.\nCreamos esta clase en nuestro proyecto.\npublic class buscaUsuario { @Autowired UsuarioRepositorio usuRep; public String getNombreUsuario(String loginUsuario) { Optional usu=usuRep.findById(loginUsuario); String usuario = (usu.isPresent() ? usu.get().getNombre() : \"Usuario \"+loginUsuario+\" No encontrado\"); } } }Teniendo inyectada¬†una referencia, con la¬†anotaci√≥n @Autowired,¬†a nuestro interface¬†UsuarioRepositorio (Spring hace la magia), en la funci√≥n getNombreUsuario, invocamos a findById , la cual nos devuelve una clase tipo Optional. Este tipo de objeto es para poder encapsular un posible valor null de tal manera que siempre se devuelva algo, aun en el caso de que no se encuentre ning√∫n valor.¬†Para saber si se ha encontrado algo usaremos isPresent el cual nos devolver√° true si ha encontrado alg√∫n registro.\nOs estar√©is preguntando, como m√≠nimo, dos cosas:\n‚Äì ¬ø Como hace esto Java, si realmente no hemos creado ninguna clase, solo un interfaz ? 2.- ¬ø Qu√© pasa si yo quiero acceder a a campos que no son indices o varios campos simult√°neamente ?\nLa respuesta a la primera pregunta, esta en la Programaci√≥n Orientada a Objetos de Spring (echar un vistazo a JAspect). Gracias a esta tecnolog√≠a, cuando Spring recorre nuestras clases (al desplegarse la aplicaci√≥n en nuestro servidor de aplicaciones) y ve un interfaz que extiende de la clase¬†CrudRepository (hay otras clases que mejoran esta, pero no hablare de ellas en¬†este ejemplo) crea al vuelo una clase que implementa vuestro interfaz (en este caso UsuarioRepositorio) con sus correspondientes funciones. Por eso, en nuestras clases, podemos ejecutar algo que ni siquiera hemos creado.\nLa respuesta a la segunda pregunta es la anotaci√≥n @Query. Gracias a ella en nuestro interfaz podemos crear nuevas funciones, que ejecuten las sentencias SQL que necesitemos.\nAs√≠ si ponemos la siguiente funci√≥n en nuestra clase UsuarioRepositorio\n@Query(\"select u from Usuario u where u.nombre like :nombre order by u.nombre\") List\u003cUsuario\u003e buscaPorNombre(@Param(\"nombre\") String nombre);Podremos buscar todos los usuarios cuyo nombre contenga el String pasado a la funci√≥n buscaPorNombre.\nObservar que la sentencia SQL no es una sentencia SQL est√°ndar sino que hace uso de Java Persistence Query (JPQ) Este lenguaje es muy parecido a SQL pero tiene sus particularidades üòâ\nPara facilitar m√°s las cosas,¬†Spring es capaz de interpretar, a trav√©s del nombre de la funci√≥n lo que quieres hacer con esa funci√≥n.\nAs√≠, en el ejemplo anterior, si a nuestra funci√≥n le llamamos findIsLikeNombreOrderByNombre, har√≠a lo mismo, pero no tendriamos que tener la anotaci√≥n @Query. Spring la crea por nosotros, interpretando el nombre de la funci√≥n.\nAs√≠ nuestra clase quedar√≠a as√≠:\npublic interface UsuarioRepositorio extends CrudRepository\u003cUsuario, String\u003e { @Query(\"select u from Usuario u where u.nombre like :nombre order by u.nombre\") List\u003cUsuario\u003ebuscaPorNombre(@Param(\"nombre\") String nombre); /** * Esta funcion hace exactamente lo mismo que la funcion buscaPorNombre pero utilizando DSL (Domain Specificic Lenguage) de Spring * @param nombre Nombre de usuario a buscar (sin wildcards, ya lo pone JPL) * @return Lista de Usuarios a buscar */ List\u003cUsuario\u003e findIsLikeNombreOrderByNombre(String nombre); }Esto se hace gracias a la Spring y su Domain Specificic Lenguage (DSL). Ten√©is una referencia de como formar Querys usando esta nomenclatura en esta p√°gina de Spring\nY nada m√°s por hoy, solo recordaros que ten√©is much√≠sima documentaci√≥n sobre JPA y Spring en la web, os dejo un par de enlaces (en espa√±ol) donde se habla m√°s de ello:\nhttp://acodigo.blogspot.com/2017/03/spring-data-jpa-acceso-datos-simple-y.html https://www.adictosaltrabajo.com/tutoriales/spring-data-jpa/ Espero que os haya gustado la entrada.\nUn saludo\nEl profe.\n","description":"","tags":null,"title":"JPA + Hibernate en Spring","uri":"/2018/08/25/jpa-hibernate-en-spring/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Database","content":"En un [entrada anterior][1], explique que para usar JPA hay que tener nuestros objetos POJO definidos .¬†En esta entrada hablare de como mejorar la la definicion de nuestro objeto POJO, con la libreria Lombok.\nRecordar que el c√≥digo fuente de de este ejemplo esta en: https://github.com/chuchip/jdbc_jpa_tomcat\nAnteriormente teniamos definido nuestro objeto de esta manera:\n@Entity @Table(name = \"usuario\", uniqueConstraints = { @UniqueConstraint(columnNames = {\"login\"})}) public class Usuario implements Serializable { @Id String login; @Column String nombre; public Usuario() { } public String getLogin() { return login; } public void setLogin(String login) { this.login = login; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public Usuario(String login, String nombre) { this.login = login; this.nombre = nombre; } }``` Ahora amos a hacer la clase mas facil, gracias a la Lombok. Para ello, a mi proyecto Maven (en el fichero pom.xml) a√±ado la siguiente dependencia:¬†org.projectlombok lombok 1.18.2 provided Teneis documentaci√≥n de este proyecto en \u003ca href=\"https://projectlombok.org/\" target=\"_blank\" rel=\"noopener\"\u003esu pagina web\u003c/a\u003e. De momento baste decir que gracias a la anotacion @Data nuestra clase **usuario** se queda as√≠.import lombok.Data;\n@Data @Entity @Table(name = ‚Äúusuario‚Äù, uniqueConstraints = { @UniqueConstraint(columnNames = {‚Äúlogin‚Äù})}) public class Usuario implements Serializable {\n@Id String login; @Column String nombre; public Usuario(String login, String nombre) { this.login = login; this.nombre = nombre; } }\nMucho mas limpia, ¬ø a que si ?. Lombok se encargara de crear el constructor vacio, los setters y getters gracias la anotacion @Data. Gracias a Lombok, a la hora de compilar Java crea funciones al vuelo, para que nosotros no tengamos que teclear tanto y no nos cansemos üòâ \u003ca href=\"http://jnb.ociweb.com/jnb/jnbJan2010.html\" target=\"_blank\" rel=\"noopener\"\u003eEn esta p√°gina\u003c/a\u003e (una vez m√°s en un perfecto ingles) teneis las diferentes anotaciones que proporciona la libreria Lombok \u0026nbsp; \u0026nbsp; [1]: http://www.profesor-p.com/2018/08/21/conectando-con-postgresql-usando-jndi-y-spring-en-tomcat-parte-1/","description":"","tags":null,"title":"JPA con Lombok, simplificando.","uri":"/2018/08/24/jpa-con-lombok/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: Sin categor√≠a","uri":"/es/categories/sin-categor%C3%ADa/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: lambda","uri":"/es/tags/lambda/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Java","content":"En esta breve entrada explicare como mejorar el ejemplo anterior, con el uso de lambdas.\nComo siempre el c√≥digo fuente de este ejemplo lo ten√©is en: https://github.com/chuchip/jdbc_jpa_tomcat\nLas lambdas, son un mecanismo introducido en Java 8, pero que realmente en el mundo de la programaci√≥n no es nuevo.\nGracias a las lambdas se puede entre otras cosas, evitar, en gran medida el uso de las clases auxiliares. Ten√©is muchos manuales en la web, solo preguntarle a google, que lo sabe ‚Äòcasi‚Äô todo ;-), pero os aconsejo que le ech√©is un vistazo al siguiente enlace:\nhttps://www.oracle.com/technetwork/es/articles/java/expresiones-lambda-api-stream-java-2633852-esa.html\nYo, lo que os voy a dar un ejemplo de como usar lambda, para mejorar el uso de Swing Data JDBC. ¬°¬°Vamos a ello!!.\nEn nuestra clase anterior ten√≠amos el siguiente c√≥digo:\npublic class JdbcEjemplo { ..... public List\u0026lt;Usuario\u0026gt; findAllUsernames() { return jdbc.queryForObject( \"select login,nombre from usuario \", new usuarioListaRowMapper() ); } private class usuarioListaRowMapper implements RowMapper\u0026lt;List\u0026lt;Usuario\u0026gt;\u0026gt; { @Override public List\u0026lt;Usuario\u0026gt; mapRow(ResultSet rs, int rowNum) throws SQLException { ArrayList\u0026lt;Usuario\u0026gt; listaUsuarios = new ArrayList(); do { listaUsuarios.add(new Usuario(rs.getString(\"login\"), rs.getString(\"nombre\"))); } while (rs.next()); return listaUsuarios; } } }Ahora vamos a ver como usar una expresion lambda de tal manera que no tengamos que crear la clase usuarioListaRowMapper y, ademas nuestro c√≥digo quede mucho mas limpio.\npublic List\u0026lt;Usuario\u0026gt; findAllUsernames() { return jdbc.query( \"select login,nombre from usuario \", (rs, rowNum) -\u0026gt; new Usuario(rs.getString(\"login\"),rs.getString(\"nombre\")) ); }¬ø Sorprendido ?. S√≠, gracias al uso de expresiones lambda hemos dejado nuestro c√≥digo anterior en solo esas lineas. Y por supuesto no es necesario tener la clase **usuarioListaRowMapper¬†**\nLo que hemos hecho es cambiar la llamada a la funci√≥n queryForObject por la llamada a la funci√≥n query que esta definida de tal manera\n\u003cT\u003e List\u003cT\u003e query(String sql, RowMapper\u003cT\u003e rowMapper) throws DataAccessException;Es decir espera una sentencia SQL y un clase que implemente la interfaz funcional RowMapper (que es una interfaz funcional esta explicado en la p√°gina anteriormente referenciada)\nPues bien, hemos creado esa clase a trav√©s de la expresi√≥n lambda, y nos hemos ahorrado un mont√≥n de c√≥digo y dejado todo mucho m√°s limpio.\nChicos, aprender a usar expresiones lambda. ¬°¬° Mejoraran vuestro c√≥digo !!\n","description":"","tags":["java","lambda"],"title":"Usando Lambdas","uri":"/2018/08/23/usando-lambdas/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Spring¬†\u003e¬†Database","content":"En el anterior articulo explicaba como crear la conexion a la base de datos en un servidor de aplicaciones Tomcat . En este articulo explicare como acceder a esos datos a traves del paquete JDBC de Spring Data JDBC\nEl c√≥digo fuente de este ejemplo esta en: https://github.com/chuchip/jdbc_jpa_tomcat\nCreando nuestro POJO y Repositorio Ahora que ya tenemos nuestro acceso a la base de datos configurado y disponible, vamos a utilizarlo (por eso de que no se aburra üòâ )\nLo primero definimos nuestro POJO. Ya sabeis Plain Object Java Object, es decir Objeto Plano de Java, o en otras palabras ‚ÄòClase Tonta donde almacenar y que no tiene nada o muy poco de l√≥gica),\nEste POJO que har√° referencia a la tabla usuario, sera tal que as√≠:\n@Entity @Table(name = \"usuario\", uniqueConstraints = { @UniqueConstraint(columnNames = {\"login\"})}) public class Usuario implements Serializable { @Id String login; @Column String nombre; public Usuario() { } public String getLogin() { return login; } public void setLogin(String login) { this.login = login; } public String getNombre() { return nombre; } public void setNombre(String nombre) { this.nombre = nombre; } public Usuario(String login, String nombre) { this.login = login; this.nombre = nombre; } }Creo que esto no har√° falta explicarlo mucho. Si no entend√©is lo que es una @Entitty y tal os recomiendo que le√°is los siguientes manuales:\nhttps://www.arquitecturajava.com/ejemplo-de-jpa/\nhttps://www.oscarblancarteblog.com/2016/10/27/declarar-entidades-entity/\nUna vez que ya tenemos una clase (una @Entity) donde almacenar los registros de nuestra tabla usuario, vamos a ver como trabajar usando el paquete JDBC de Spring. Para ser mas exactos, utilizando JDBC Templates de Spring.\nEn la clase JdbcEjemplo tenemos lo siguiente:\n@Repository public class JdbcEjemplo { @Autowired private JdbcOperations jdbc; @Bean public JdbcTemplate jdbcTemplate(DataSource dataSource) { return new JdbcTemplate(dataSource); } public Usuario findByUsername(String username) { return jdbc.queryForObject( \"select login,nombre from usuario where login=?\", new usuarioRowMapper(), username); } public List\u003cUsuario\u003e findAllUsernames() { return jdbc.queryForObject( \"select login,nombre from usuario \", new usuarioListaRowMapper() ); } private class usuarioRowMapper implements RowMapper\u003cUsuario\u003e { @Override public Usuario mapRow(ResultSet rs, int rowNum) throws SQLException { return new Usuario( rs.getString(\"login\"), rs.getString(\"nombre\")); } } private class usuarioListaRowMapper implements RowMapper\u003cList\u003cUsuario\u003e\u003e { @Override public List\u003cUsuario\u003e mapRow(ResultSet rs, int rowNum) throws SQLException { ArrayList\u003cUsuario\u003e listaUsuarios = new ArrayList(); do { listaUsuarios.add(new Usuario(rs.getString(\"login\"), rs.getString(\"nombre\"))); } while (rs.next()); return listaUsuarios; } } }Explico la clase, poco a poco. Lo primero es marcarla como repositorio, eso se hace con la anotaci√≥n @Repository. Con esto conseguiremos que Spring cargue la clase y este disponible para otras clases a trav√©s del sistema de inyecci√≥n de dependencias (realmente para nuestro ejemplo nos habr√≠a valido con marcarla como @Component)\nCreamos la funci√≥n jdbcTemplate(DataSource dataSource) , la cual nos devolver√° un nuevo JdbcTemplate con el datasource que Spring ya tiene definido en su contexto. Como se puede ver, la funci√≥n esta marcada con @Bean, para que la variable jdbc, que tenemos al principio de la clase, la llame y pueda asignarle un valor. JdbcOperations es el interface que usan las clases del paquete JDBC de Spring. La clase JdbcTemplate, por supuesto, lo implementa.\nNosotros usaremos la funci√≥n findByUserName , para buscar el nombre del usuario (como nos gusta el ingles, madre m√≠a üòâ ). Y esta funci√≥n lo √∫nico que har√° sera usando la variable global jdbc, invocando el m√©todo queryForObject. Este m√©todo usa los siguientes par√°metros:\nLa sentencia SQL a ejecutar, teniendo en cuenta que los par√°metros a sustituir deben ser puestas con un ? , como si fuera un PreparedStatement, vamos.\nEl objeto donde se van a guardar los resultados. Este objeto debe implementar el interface RowMapper. En nuestro ejemplo creamos la clase usuarioRowMapper donde definimos la funci√≥n mapRow(ResultSet rs, int rowNum) la cual sera llamada por la funci√≥n queryForObject, de tal manera que devuelva un objeto Usuario.\nLas variables a sustituir en la sentencia SQL. Tendra que haber tantas variables como ? hemos puesto en nuestra sentencia SQL.\nEl caso es que cuando llamemos la funci√≥n findByUserName nos devolver√° una clase tipo Usuario o null si no encuentra nada.\nEn la siguiente funci√≥n, llamada findAllUsernames buscaremos todos los usuarios que haya en la base de datos, por lo cual necesesitamos que devolver una lista de usuarios, es decir una List. Como se ve la llamada es casi igual que la de findByUserName , con la diferencia de que el RowMapper a devolver es usuarioListaRowMapper que como se ve en su funci√≥n mapRow devuelve un objeto List que contiene Usuarios, es decir List.\nObs√©rvese lo c√≥modo que es usar Templates JDBC. No tenemos que abrir Conexiones ni crear Statements ni nada, Spring lo hace todo por debajo. Simplemente ponemos la sentencia SQL y recibimos un objeto que contiene los resultados.\nEn el proximo articulo explicare como realizar busquedas en la base de datos a traves de JPA e Hibernate.\n","description":"","tags":["java","jdbc","spring"],"title":"Acceso a Base de Datos con  Spring Data JDBC","uri":"/2018/08/22/acceso-a-base-de-datos-con-jdbc-spring/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: Sin categoria","uri":"/es/categories/sin-categoria/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†DBA","content":"En este ejemplo veremos como conecta a Postgresql usando JPA + Hibernate y Spring JDBC. Para ello uso como servidor de aplicaciones Tomcat. La configuraci√≥n esta realizada con anotaciones y XML y utilizo el pool de conexiones de Tomcat recogido a trav√©s de JNDI, para que la aplicaci√≥n no deba saber realmente ni donde se conecta.\nEl c√≥digo fuente lo teneis en: https://github.com/chuchip/jdbc_jpa_tomcat\nEn este enlace teneis este mismo documento (todas las partes) pero en PDF.\nEl ejemplo usa Maven y explicare como deber√° estar configurado Tomcat para que la aplicaci√≥n funcione correctamente.\n2. Configuraci√≥n de Postgresql Esta sera la √∫nica tabla a la que accederemos a trav√©s de Postgresql:\n3. Configuraci√≥n de Tomcat La configuraci√≥n de Tomcat deber√° tener las siguientes caracter√≠sticas:\nEn server.xml (estara en $TOMCAT_HOME/conf) deberemos a√±adir dentro de las siguientes lineas:\nEsto se utilizara para configurar nuestra fuente JNDI que permitir√° conectarnos con la base de datos. Para probar esta aplicaci√≥n cambiar los valores de url para que apunten a vuestra base de datos, asi como el username y la password.\nTambi√©n sera necesario a√±adir las siguientes lineas al fichero context.xml dentro de __de tomcat, que tambi√©n estar√° en $TOMCAT_HOME/conf\nCon estos dos ficheros ya tendremos nuestro tomcat configurado para que use su propio pool de conexiones al que hemos llamado ‚Äújdbc/anjelica‚Äù.\nAhora debemos a√±adir a Tomcat la librer√≠apara conectarnos a postgresql, en este caso usamos la versi√≥n 42.2.2\n‚Äì postgresql-42.2.2.jar\n4. Configuraci√≥n de la aplicaci√≥n. En esta aplicaci√≥n usaremos tanto ficheros xml como configuraci√≥n en Java.\nLo primero es configurar nuestro ficheros xml para que Tomcat use Spring, para ello en el directorio src\\main\\webapp\\WEB-INF de nuestra aplicaci√≥n tenderemos estos ficheros.\napplicationContext.xml dispatcher-servlet.xml web.xml 4.1 web.xml El √∫nico fichero que usa Tomcat es web.xml, y este, a su vez, usa los dos anteriores, de tal manera que b√°sicamente en web.xml , lo primero que hacemos es especificar que use el servlet de Spring y le decimos donde tendr√° la configuraci√≥n para ese servlet. Esto se hace con estas lineas:\nA continuaci√≥n configuramos el contexto con las siguientes lineas:\n4.2 dispatcher-servlet.xml Para configurar la parte Web de nuestra aplicaci√≥n (el servlet realmente) pondremos las siguientes lineas en el fichero dispatcher-servlet.xml\nCon permitiremos que en nuestra aplicaci√≥n haya anotaciones @Controller y @RequestMapping\nCon \u003ccontext:component-scan base-package=‚Äùchu.jdbc‚Äù /\u003e especificaremos que paquete deber√° escanear Spring para buscar anotaciones en los ficheros java. En este caso especificamos que busque en el paquete ‚Äúchu.jdbc‚Äù y sus hijos.\nLas ultimas lineas indican que usaremos JSP y especifica donde tendremos nuestros ficheros jsp.\nTen√©is un excelente documento explicando como hacer esta misma configuraci√≥n usando anotaciones java en la siguiente p√°gina: https://www.baeldung.com/bootstraping-a-web-application-with-spring-and-java-based-configuration\n4.3applicationContext.xml En este fichero crearemos nuestro DataSource que utilizaremos para conectarnos con el pool de conexiones anteriormente configurado en Tomcat.\nEsto se hace a√±adiendo la siguiente linea:\nTen√©is m√°s documentaci√≥n de lo que hace esta linea en http://www.jtech.ua.es/j2ee/publico/spring-2012-13/sesion01-apuntes.html\nDe todos modos b√°sicamente lo que hace es injectar en nuestra aplicaci√≥n una clase DataSource que luego podremos usar con sentencias como esta:\n5. La aplicaci√≥n 5.1 Configuracion JPA y JDBC En la clase JpaConfig es donde se hace toda la configuraci√≥n que necesitamos para conectarnos a la base de datos.\nPara ello, lo primero especificamos las siguientes configuraciones java\nExplico las directivas, una a una.\n@Configuration Especifica que es una clase de configuraci√≥n, con ello haremos que Spring la cargue y ejecute.\n@EnableLoadTimeWeaving Con esto permitimos a tomcat usar AOP. Si no la ponemos simplemente Tomcat no podr√° hacer uso de Programaci√≥n Orienta a a Aspectos (AOP) y la aplicaci√≥n no funcionara. Mas documentaci√≥n en: https://docs.spring.io/spring/docs/5.0.8.RELEASE/spring-framework-reference/core.html#aop-aj-ltw-environment-tomcat\n@EnableJpaRepositories(‚Äúchu.jdbc‚Äù) especificamos que busque repositorios (clases marcadas con la directiva @Repository) en el paquete chu.jdbc\nAhora inyectamos el Datasource que ya tendremos disponible por la configuraci√≥n aplicada anteriormente en nuestro fichero applicationContext.xml\nLo siguiente es crear nuestro fabrica de controladores de entidades (bueno, en ingles, nuestro EntityManagerFactoryBean), para ello y como usamos una versi√≥n de Hibernate superior a la 4 (con versiones anteriores utilizar√≠amos otra clase), ponemos el siguiente c√≥digo:\nComo se puede ver simplemente creamos nuestro LocalContainerEntityManagerFactoryBean , le a√±adimos nuestro DataSource y el adaptador de Hibernate. Tambi√©n le decimos los paquetes que deber√° escanear para buscar ‚ÄúEntity Classes‚Äù (clases que sean entidades, vamos).\nPor ultimo creamos nuestro controlador de transaciones con el siguiente c√≥digo:\nAhora ya solo falta crear nuestro ficherito hibernate.cfg.xml en nuestro directorio de resources, pero en el solamente tenemos lo siguiente:\nEs decir, simplemente definimos que vamos a usar una base de datos Postgresql. Este fichero debe existir. Cosas de Hibernate que hay que complacer.\nY voila nuestro entorno para JPA + Hibernate ya esta configurado y listo para funcionar.\nEn la siguiente parte explicare como crear un respositorio y la magia que hay detras.\n¬°¬° Hasta la proxima, chabales!!\n","description":"","tags":["hibernate","java","jndi","jpa","spring","tomcat"],"title":"Conectando a una base de datos usando JNDI y Spring en Tomcat","uri":"/2018/08/21/conectando-con-postgresql-usando-jndi-y-spring-en-tomcat-parte-1/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Contacto","content":"Experiencia como administrador de Base de Datos:\nInformix ‚Äì 10 a√±os Oracle ‚Äì 1 a√±o Postgresql ‚Äì 2 a√±os MYSQL ‚Äì 6 Meses SQL SERVER ‚Äì 3 Meses ","description":"","tags":["experiencia"],"title":"Bases de Datos","uri":"/es/contacto/experiencia_basesdatos/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Tags","content":"","description":"","tags":null,"title":"Etiqueta :: experiencia","uri":"/es/tags/experiencia/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Categories","content":"","description":"","tags":null,"title":"Categor√≠a :: experiencia","uri":"/es/categories/experiencia/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Contacto","content":" JAVA - 15 A√±os experiencia. Trabajando en entornos: SWING, SPRING y J2EE Informix 4GL ‚Äì 4 a√±os experiencia. Ensamblador¬†‚Äì 4 a√±os experiencia. C - 2 A√±os experiencia. PHP ‚Äì 6 Meses experiencia. PERL¬†‚Äì 6 Meses experiencia. PHP ‚Äì 6 Meses experiencia. KOTLIN ‚Äì 6 Meses experiencia. Android¬†‚Äì 6 Meses experiencia. Angular¬†‚Äì 9 Meses experiencia ","description":"","tags":["experiencia"],"title":"Lenguajes  de programaci√≥n","uri":"/es/contacto/experiencia_lenguajesprogramacion/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina¬†\u003e¬†Contacto","content":"Experiencia como administrador sistemas\nHPUX ‚Äì 6 A√±os Linux ‚Äì 10 a√±os Centos, Debian, Ubuntu. **Windows¬†**‚Äì 1 a√±o VMWARE ‚Äì 4 a√±os CITRIX ‚Äì 1 A√±o ","description":"","tags":["experiencia"],"title":"Sistemas","uri":"/es/contacto/experiencia_sistemas/index.html"},{"breadcrumb":"Bienvenido a mi p√°gina","content":"Est√°s son las ultimas entradas del blog\nTesting en SpringBoot Realizando test en SpringBoot utilizando diferentes t√©cnicas.\nQuery By Example Usando Query By Example para buscar registros en Spring Data JPA.\nSpring Cloud Gateway. Redirigiendo peticiones Reactivamente Realizaci√≥n de un programa para enrutar y balancear las peticiones a otros servicios incluyendo logging y fallback.\nLogging en Spring Boot Configuraci√≥n del loging en una aplicaci√≥n realizada con Spring Boot.\nCreando un proyecto de Django con Eclipse Aqu√≠ ten√©is un peque√±o manual de como crear un proyecto de DJango usando el IDE Eclipse y el plugin PyDev.\nIniciaci√≥n a la clase WebClient Aqu√≠ ten√©is un proyecto usando la clase WebClient que es la equivalente a RestTemplate para programaci√≥n Reactiva y por lo tanto permite llamadas as√≠ncronas.\nTrabajando con la clase RestTemplate-3 √öltimo art√≠culo sobre la clase RestTemplate donde hablo de sus diferentes m√©todos y peculiaridades.\nTrabajando con la clase RestTemplate-2 Segunda parte de la serie de art√≠culos sobre la clase RestTemplate donde sigo despejando dudas.\nTrabajando con la clase RestTemplate Primero de los art√≠culos sobre la clase RestTemplate . Aprende a realizar peticiones HTTP f√°cilmente, produci√©ndose la serializaci√≥n y deserializaci√≥n de los objetos de una manera transparente.\nEstableciendo Filtros en Spring Implementa filtros en Spring. Un filtro se puede establecer para controlar acciones a realizar cuando se recibe una petici√≥n HTTP.\nCacheando resultados con Spring Boot Aprende a utilizar cache en Spring para acelerar tus aplicaciones.\nBeans avanzados en Spring Aprende como cargar Beans din√°micamente desde Spring.\nOptimizando relaciones entre entidades en Hibernate Explicare como optimizar las consultas a la base de datos usando JPA. Se ver√°n diferentes tipos de consultas, explicando como realizar uniones entre tablas de modo perezoso (lazy) o agresivo (eager).\nAccediendo facilmente a los datos con Spring Rest Data Spring Boot ofrece un fant√°stico soporte para acceder a los datos con JPA a trav√©s de sus interfaces, del tipo Repository. Si a esto le a√±adimos la facilidad con que se crean servicios REST, podremos hacer una aplicaci√≥n ofreciendo una API para acceder a nuestra base de datos preferida f√°cilmente.\n","description":"","tags":null,"title":"Ultimas entradas","uri":"/es/last/index.html"}]